"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = callLLM;
const constants_1 = require("./constants");
const token_js_1 = require("token.js");
const client_secrets_manager_1 = require("@aws-sdk/client-secrets-manager");
const simpleCache_1 = require("./simpleCache");
const calculateCost_1 = require("./calculateCost");
const SECRET_NAME = 'llm-provider-api-keys';
const CACHE_USAGE_OBJECT = {
    prompt_tokens: 0,
    completion_tokens: 0,
    total_tokens: 0,
};
let cachedApiKeys = null;
async function loadApiKeys() {
    if (cachedApiKeys)
        return cachedApiKeys;
    const secretsManager = new client_secrets_manager_1.SecretsManagerClient();
    const command = new client_secrets_manager_1.GetSecretValueCommand({ SecretId: SECRET_NAME });
    const response = await secretsManager.send(command);
    if (response && response.SecretString) {
        cachedApiKeys = JSON.parse(response.SecretString);
    }
    return;
}
async function callLLM({ history, prompt, provider, model, log, userId }) {
    try {
        const simpleCacheResponse = await (0, simpleCache_1.checkSimpleCache)(prompt, userId, provider, model);
        if (simpleCacheResponse) {
            return {
                text: JSON.stringify(simpleCacheResponse) || '',
                usage: CACHE_USAGE_OBJECT,
                provider: provider,
                model: model,
                log: log.getLog(),
                simpleCacheHit: true,
            };
        }
        ;
        // const requestEmbedding = await getEmbedding(prompt);
        // const semanticCacheResponse =
        //   await checkSemanticCache(requestEmbedding, userId, provider, model);
        // if (semanticCacheResponse) {
        //   return {
        //     text: semanticCacheResponse || '',
        //     usage: CACHE_USAGE_OBJECT,
        //     provider: provider,
        //     model: model,
        //     log: log.getLog(),
        //     semanticCacheHit: true
        //   }
        // };
        await loadApiKeys();
        if (cachedApiKeys) {
            for (const [key, value] of Object.entries(cachedApiKeys)) {
                process.env[key] = value;
            }
        }
        const tokenjs = new token_js_1.TokenJS();
        const response = await tokenjs.chat.completions.create({
            provider: provider,
            model: model,
            messages: [
                { role: 'system', content: process.env.SYSTEM_PROMPT || constants_1.SYSTEM_PROMPT },
                ...history,
                {
                    role: 'user',
                    content: prompt,
                }
            ],
            temperature: 0.7,
            max_tokens: 500
        });
        const responseText = response.choices?.[0]?.message?.content || '';
        (0, simpleCache_1.addToSimpleCache)(prompt, responseText, userId, provider, model);
        // addToSemanticCache(
        //   requestEmbedding,
        //   prompt,
        //   responseText,
        //   userId,
        //   provider,
        //   model
        // );
        let cost;
        if (response.usage?.prompt_tokens && response.usage.completion_tokens) {
            cost = (0, calculateCost_1.calculateCost)(provider, model, response.usage.prompt_tokens, response.usage.completion_tokens);
        }
        console.log('cost: ', cost);
        return {
            text: responseText,
            usage: response.usage,
            provider: provider,
            model: model,
            log: log.getLog()
        };
    }
    catch (error) {
        console.error(`Error in ${provider} call:`, error);
        throw error;
    }
}
//# sourceMappingURL=data:application/json;base64,