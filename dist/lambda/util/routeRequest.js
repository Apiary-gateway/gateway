"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.routeRequest = routeRequest;
const routingConfigData_1 = require("./routingConfigData");
const callLLM_1 = require("./callLLM");
const errorHandling_1 = require("./errorHandling");
const constants_1 = require("./constants");
const constants_2 = require("./constants");
const routingLog_1 = require("./routingLog");
async function routeRequest({ history, prompt, provider, model, metadata, userId }) {
    const log = new routingLog_1.RoutingLog();
    const conditions = routingConfigData_1.routingConfig.conditions || [];
    if (provider) {
        model = model || constants_2.MODELS[provider][0];
        return await routeToSpecified({ history, prompt, provider, model, log });
    }
    if (conditions.length > 0 && metadata) {
        for (const cond of conditions) {
            if (cond.query(metadata)) { // fulfills condition, call load balance
                try {
                    log.conditionMatched(cond.name);
                    log.routedToLoadBalance();
                    const selectedModel = weightedPick(cond.loadBalance);
                    log.modelSelected(selectedModel.provider, selectedModel.model);
                    return await (0, callLLM_1.default)({
                        history,
                        prompt,
                        provider: selectedModel.provider,
                        model: selectedModel.model,
                        log,
                        userId
                    });
                }
                catch (error) {
                    return await handleRoutingError(error, history, prompt, log, cond);
                }
            }
        }
    }
    return await routeToDefault({ history, prompt, log });
}
async function handleRoutingError(error, history, prompt, log, condition) {
    const statusCode = (0, errorHandling_1.getErrorStatusCode)(error);
    log.routingError(error.message, statusCode);
    const fallbackStatuses = routingConfigData_1.routingConfig.fallbackOnStatus || constants_1.FALLBACK_STATUS_CODES;
    if (statusCode && fallbackStatuses.includes(statusCode)) {
        return await routeToFallback({ history, prompt, condition, log });
    }
    else {
        console.error('Error routing request:', error);
        throw error;
    }
}
async function routeToDefault({ history, prompt, condition, log, userId }) {
    try {
        const { provider, model } = routingConfigData_1.routingConfig.defaultModel;
        log.routedToDefault(provider, model);
        return await (0, callLLM_1.default)({ history, prompt, provider, model, log, userId });
    }
    catch (error) {
        return handleRoutingError(error, history, prompt, log, condition);
    }
}
async function routeToFallback({ history, prompt, condition, log, userId }) {
    const fallbackModel = condition?.fallbackModel || routingConfigData_1.routingConfig.fallbackModel;
    log.routedToFallback(fallbackModel.provider, fallbackModel.model);
    const result = await (0, callLLM_1.default)({
        history,
        prompt,
        provider: fallbackModel.provider,
        model: fallbackModel.model,
        log,
        userId
    });
    return result;
}
async function routeToSpecified({ history, prompt, provider, model, log, userId }) {
    try {
        log.routedToSpecified(provider, model);
        return await (0, callLLM_1.default)({ history, prompt, provider, model, log, userId });
    }
    catch (error) {
        return handleRoutingError(error, history, prompt, log);
    }
}
function weightedPick(choices) {
    if (!choices.length) {
        throw new Error('No choices provided for weighted selection');
    }
    const totalWeight = choices.reduce((acc, choice) => acc + choice.weight, 0);
    const randomWeight = Math.random() * totalWeight;
    let currentWeight = 0;
    for (const choice of choices) {
        currentWeight += choice.weight;
        if (randomWeight < currentWeight) {
            return choice;
        }
    }
    return choices[choices.length - 1];
}
//# sourceMappingURL=data:application/json;base64,