"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const client_s3_1 = require("@aws-sdk/client-s3");
const s3 = new client_s3_1.S3Client({});
// helper to convert stream to string
async function streamToString(stream) {
    return new Promise((resolve, reject) => {
        const chunks = [];
        stream.on('data', (chunk) => chunks.push(chunk));
        stream.on('error', reject);
        stream.on('end', () => resolve(Buffer.concat(chunks).toString('utf-8')));
    });
}
const handler = async (event) => {
    const { httpMethod, pathParameters, body } = event;
    const guardrailId = pathParameters?.id;
    const { GUARDRAILS_BUCKET = '', GUARDRAILS_KEY = '' } = process.env;
    try {
        switch (httpMethod) {
            case 'GET': {
                // GET the object
                const getObjectResp = await s3.send(new client_s3_1.GetObjectCommand({
                    Bucket: GUARDRAILS_BUCKET,
                    Key: GUARDRAILS_KEY,
                }));
                // read the body stream
                const fileBody = getObjectResp.Body
                    ? await streamToString(getObjectResp.Body)
                    : '[]';
                const utterances = JSON.parse(fileBody);
                return {
                    statusCode: 200,
                    headers: {
                        'Access-Control-Allow-Origin': '*',
                    },
                    body: JSON.stringify(utterances),
                };
            }
            // ... POST, DELETE, default, etc. ...
            default:
                return {
                    statusCode: 405,
                    body: JSON.stringify({
                        message: `Method ${httpMethod} not allowed.`,
                    }),
                };
        }
    }
    catch (error) {
        console.error('Error in guardrails lambda:', error);
        return {
            statusCode: 500,
            body: JSON.stringify({
                message: 'Internal Server Error',
                error: error.message,
            }),
        };
    }
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3VhcmRyYWlsc0FQSUhhbmRsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9sYW1iZGEvZ3VhcmRyYWlsc0FQSUhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0Esa0RBQWdFO0FBR2hFLE1BQU0sRUFBRSxHQUFHLElBQUksb0JBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUU1QixxQ0FBcUM7QUFDckMsS0FBSyxVQUFVLGNBQWMsQ0FBQyxNQUFnQjtJQUM1QyxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1FBQ3JDLE1BQU0sTUFBTSxHQUFhLEVBQUUsQ0FBQztRQUM1QixNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ2pELE1BQU0sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzNCLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0UsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBRU0sTUFBTSxPQUFPLEdBQUcsS0FBSyxFQUMxQixLQUEyQixFQUNLLEVBQUU7SUFDbEMsTUFBTSxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDO0lBQ25ELE1BQU0sV0FBVyxHQUFHLGNBQWMsRUFBRSxFQUFFLENBQUM7SUFDdkMsTUFBTSxFQUFFLGlCQUFpQixHQUFHLEVBQUUsRUFBRSxjQUFjLEdBQUcsRUFBRSxFQUFFLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQztJQUVwRSxJQUFJLENBQUM7UUFDSCxRQUFRLFVBQVUsRUFBRSxDQUFDO1lBQ25CLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDWCxpQkFBaUI7Z0JBQ2pCLE1BQU0sYUFBYSxHQUFHLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FDakMsSUFBSSw0QkFBZ0IsQ0FBQztvQkFDbkIsTUFBTSxFQUFFLGlCQUFpQjtvQkFDekIsR0FBRyxFQUFFLGNBQWM7aUJBQ3BCLENBQUMsQ0FDSCxDQUFDO2dCQUVGLHVCQUF1QjtnQkFDdkIsTUFBTSxRQUFRLEdBQUcsYUFBYSxDQUFDLElBQUk7b0JBQ2pDLENBQUMsQ0FBQyxNQUFNLGNBQWMsQ0FBQyxhQUFhLENBQUMsSUFBZ0IsQ0FBQztvQkFDdEQsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFFVCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUV4QyxPQUFPO29CQUNMLFVBQVUsRUFBRSxHQUFHO29CQUNmLE9BQU8sRUFBRTt3QkFDUCw2QkFBNkIsRUFBRSxHQUFHO3FCQUNuQztvQkFDRCxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUM7aUJBQ2pDLENBQUM7WUFDSixDQUFDO1lBRUQsc0NBQXNDO1lBRXRDO2dCQUNFLE9BQU87b0JBQ0wsVUFBVSxFQUFFLEdBQUc7b0JBQ2YsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUM7d0JBQ25CLE9BQU8sRUFBRSxVQUFVLFVBQVUsZUFBZTtxQkFDN0MsQ0FBQztpQkFDSCxDQUFDO1FBQ04sQ0FBQztJQUNILENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2YsT0FBTyxDQUFDLEtBQUssQ0FBQyw2QkFBNkIsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNwRCxPQUFPO1lBQ0wsVUFBVSxFQUFFLEdBQUc7WUFDZixJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQztnQkFDbkIsT0FBTyxFQUFFLHVCQUF1QjtnQkFDaEMsS0FBSyxFQUFHLEtBQWUsQ0FBQyxPQUFPO2FBQ2hDLENBQUM7U0FDSCxDQUFDO0lBQ0osQ0FBQztBQUNILENBQUMsQ0FBQztBQXREVyxRQUFBLE9BQU8sV0FzRGxCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQVBJR2F0ZXdheVByb3h5RXZlbnQsIEFQSUdhdGV3YXlQcm94eVJlc3VsdCB9IGZyb20gJ2F3cy1sYW1iZGEnO1xuaW1wb3J0IHsgUzNDbGllbnQsIEdldE9iamVjdENvbW1hbmQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtczMnO1xuaW1wb3J0IHsgUmVhZGFibGUgfSBmcm9tICdzdHJlYW0nO1xuXG5jb25zdCBzMyA9IG5ldyBTM0NsaWVudCh7fSk7XG5cbi8vIGhlbHBlciB0byBjb252ZXJ0IHN0cmVhbSB0byBzdHJpbmdcbmFzeW5jIGZ1bmN0aW9uIHN0cmVhbVRvU3RyaW5nKHN0cmVhbTogUmVhZGFibGUpOiBQcm9taXNlPHN0cmluZz4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IGNodW5rczogQnVmZmVyW10gPSBbXTtcbiAgICBzdHJlYW0ub24oJ2RhdGEnLCAoY2h1bmspID0+IGNodW5rcy5wdXNoKGNodW5rKSk7XG4gICAgc3RyZWFtLm9uKCdlcnJvcicsIHJlamVjdCk7XG4gICAgc3RyZWFtLm9uKCdlbmQnLCAoKSA9PiByZXNvbHZlKEJ1ZmZlci5jb25jYXQoY2h1bmtzKS50b1N0cmluZygndXRmLTgnKSkpO1xuICB9KTtcbn1cblxuZXhwb3J0IGNvbnN0IGhhbmRsZXIgPSBhc3luYyAoXG4gIGV2ZW50OiBBUElHYXRld2F5UHJveHlFdmVudFxuKTogUHJvbWlzZTxBUElHYXRld2F5UHJveHlSZXN1bHQ+ID0+IHtcbiAgY29uc3QgeyBodHRwTWV0aG9kLCBwYXRoUGFyYW1ldGVycywgYm9keSB9ID0gZXZlbnQ7XG4gIGNvbnN0IGd1YXJkcmFpbElkID0gcGF0aFBhcmFtZXRlcnM/LmlkO1xuICBjb25zdCB7IEdVQVJEUkFJTFNfQlVDS0VUID0gJycsIEdVQVJEUkFJTFNfS0VZID0gJycgfSA9IHByb2Nlc3MuZW52O1xuXG4gIHRyeSB7XG4gICAgc3dpdGNoIChodHRwTWV0aG9kKSB7XG4gICAgICBjYXNlICdHRVQnOiB7XG4gICAgICAgIC8vIEdFVCB0aGUgb2JqZWN0XG4gICAgICAgIGNvbnN0IGdldE9iamVjdFJlc3AgPSBhd2FpdCBzMy5zZW5kKFxuICAgICAgICAgIG5ldyBHZXRPYmplY3RDb21tYW5kKHtcbiAgICAgICAgICAgIEJ1Y2tldDogR1VBUkRSQUlMU19CVUNLRVQsXG4gICAgICAgICAgICBLZXk6IEdVQVJEUkFJTFNfS0VZLFxuICAgICAgICAgIH0pXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gcmVhZCB0aGUgYm9keSBzdHJlYW1cbiAgICAgICAgY29uc3QgZmlsZUJvZHkgPSBnZXRPYmplY3RSZXNwLkJvZHlcbiAgICAgICAgICA/IGF3YWl0IHN0cmVhbVRvU3RyaW5nKGdldE9iamVjdFJlc3AuQm9keSBhcyBSZWFkYWJsZSlcbiAgICAgICAgICA6ICdbXSc7XG5cbiAgICAgICAgY29uc3QgdXR0ZXJhbmNlcyA9IEpTT04ucGFyc2UoZmlsZUJvZHkpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3RhdHVzQ29kZTogMjAwLFxuICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nOiAnKicsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh1dHRlcmFuY2VzKSxcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgLy8gLi4uIFBPU1QsIERFTEVURSwgZGVmYXVsdCwgZXRjLiAuLi5cblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzdGF0dXNDb2RlOiA0MDUsXG4gICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgbWVzc2FnZTogYE1ldGhvZCAke2h0dHBNZXRob2R9IG5vdCBhbGxvd2VkLmAsXG4gICAgICAgICAgfSksXG4gICAgICAgIH07XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGluIGd1YXJkcmFpbHMgbGFtYmRhOicsIGVycm9yKTtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhdHVzQ29kZTogNTAwLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBtZXNzYWdlOiAnSW50ZXJuYWwgU2VydmVyIEVycm9yJyxcbiAgICAgICAgZXJyb3I6IChlcnJvciBhcyBFcnJvcikubWVzc2FnZSxcbiAgICAgIH0pLFxuICAgIH07XG4gIH1cbn07XG4iXX0=