"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = require("react");
const guardrails_service_1 = require("../services/guardrails.service");
const Guardrails = ({ onClose }) => {
    const [guardrails, setGuardrails] = (0, react_1.useState)([]);
    const [newGuardrail, setNewGuardrail] = (0, react_1.useState)('');
    const [isLoading, setIsLoading] = (0, react_1.useState)(true);
    const [isSubmitting, setIsSubmitting] = (0, react_1.useState)(false);
    const [notification, setNotification] = (0, react_1.useState)(null);
    (0, react_1.useEffect)(() => {
        const fetchGuardrails = async () => {
            try {
                const data = await (0, guardrails_service_1.getGuardrails)();
                setGuardrails(data);
                setNewGuardrail('');
            }
            catch (err) {
                setNotification({
                    type: 'error',
                    message: 'Failed to fetch guardrails',
                });
            }
            finally {
                setIsLoading(false);
            }
        };
        fetchGuardrails();
    }, []);
    (0, react_1.useEffect)(() => {
        if (notification) {
            const timer = setTimeout(() => {
                setNotification(null);
            }, 3000);
            return () => clearTimeout(timer);
        }
    }, [notification]);
    const handleAddGuardrail = () => {
        if (newGuardrail.trim()) {
            setGuardrails([...guardrails, newGuardrail.trim()]);
            setNewGuardrail('');
        }
    };
    const handleDeleteGuardrail = (index) => {
        setGuardrails(guardrails.filter((_, i) => i !== index));
    };
    const handleSubmit = async () => {
        setIsSubmitting(true);
        setNotification(null);
        try {
            const updatedGuardrails = await (0, guardrails_service_1.submitGuardrails)(guardrails);
            setGuardrails(updatedGuardrails);
            setNotification({
                type: 'success',
                message: 'Guardrails updated successfully',
            });
        }
        catch (err) {
            setNotification({
                type: 'error',
                message: 'Failed to update guardrails',
            });
        }
        finally {
            setIsSubmitting(false);
        }
    };
    return (<div className="guardrails-container">
      <h2>Guardrails</h2>
      {notification && (<div className={`notification ${notification.type}`}>
          {notification.message}
        </div>)}
      {(isLoading || isSubmitting) && (<div className="modal-loading-overlay">
          <div className="spinner"></div>
        </div>)}
      <div className="guardrails-list">
        {guardrails.map((guardrail, index) => (<div key={index} className="guardrail-item">
            <input type="text" value={guardrail} onChange={(e) => {
                const newGuardrails = [...guardrails];
                newGuardrails[index] = e.target.value;
                setGuardrails(newGuardrails);
            }} className="guardrail-input" disabled={isLoading || isSubmitting}/>
            <button onClick={() => handleDeleteGuardrail(index)} className="delete-button" disabled={isLoading || isSubmitting} title="Delete guardrail">
              <svg className="trash-icon" viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                <path d="M3 6h18"/>
                <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"/>
                <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"/>
                <line x1="10" y1="11" x2="10" y2="17"/>
                <line x1="14" y1="11" x2="14" y2="17"/>
              </svg>
            </button>
          </div>))}
      </div>
      <div className="add-guardrail">
        <input type="text" value={newGuardrail} onChange={(e) => setNewGuardrail(e.target.value)} placeholder="Add new guardrail" className="guardrail-input" disabled={isLoading || isSubmitting}/>
        <button onClick={handleAddGuardrail} className="add-button" disabled={isLoading || isSubmitting}>
          Add
        </button>
      </div>
      <div className="guardrails-actions">
        <button onClick={onClose} className="cancel-button" disabled={isLoading || isSubmitting}>
          Cancel
        </button>
        <button onClick={handleSubmit} disabled={isLoading || isSubmitting} className="submit-button">
          Save Changes
        </button>
      </div>
    </div>);
};
exports.default = Guardrails;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR3VhcmRyYWlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2Zyb250ZW5kLXVpL3NyYy9jb21wb25lbnRzL0d1YXJkcmFpbHMudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaUNBQTRDO0FBQzVDLHVFQUd3QztBQU14QyxNQUFNLFVBQVUsR0FBRyxDQUFDLEVBQUUsT0FBTyxFQUFtQixFQUFFLEVBQUU7SUFDbEQsTUFBTSxDQUFDLFVBQVUsRUFBRSxhQUFhLENBQUMsR0FBRyxJQUFBLGdCQUFRLEVBQVcsRUFBRSxDQUFDLENBQUM7SUFDM0QsTUFBTSxDQUFDLFlBQVksRUFBRSxlQUFlLENBQUMsR0FBRyxJQUFBLGdCQUFRLEVBQUMsRUFBRSxDQUFDLENBQUM7SUFDckQsTUFBTSxDQUFDLFNBQVMsRUFBRSxZQUFZLENBQUMsR0FBRyxJQUFBLGdCQUFRLEVBQUMsSUFBSSxDQUFDLENBQUM7SUFDakQsTUFBTSxDQUFDLFlBQVksRUFBRSxlQUFlLENBQUMsR0FBRyxJQUFBLGdCQUFRLEVBQUMsS0FBSyxDQUFDLENBQUM7SUFDeEQsTUFBTSxDQUFDLFlBQVksRUFBRSxlQUFlLENBQUMsR0FBRyxJQUFBLGdCQUFRLEVBR3RDLElBQUksQ0FBQyxDQUFDO0lBRWhCLElBQUEsaUJBQVMsRUFBQyxHQUFHLEVBQUU7UUFDYixNQUFNLGVBQWUsR0FBRyxLQUFLLElBQUksRUFBRTtZQUNqQyxJQUFJLENBQUM7Z0JBQ0gsTUFBTSxJQUFJLEdBQUcsTUFBTSxJQUFBLGtDQUFhLEdBQUUsQ0FBQztnQkFDbkMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNwQixlQUFlLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDdEIsQ0FBQztZQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7Z0JBQ2IsZUFBZSxDQUFDO29CQUNkLElBQUksRUFBRSxPQUFPO29CQUNiLE9BQU8sRUFBRSw0QkFBNEI7aUJBQ3RDLENBQUMsQ0FBQztZQUNMLENBQUM7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WUFBWSxDQUFDLENBQ3RCLFFBQVEsQ0FBQyxDQUFDLFNBQVMsSUFBSSxZQUFZLENBQUMsQ0FDcEMsU0FBUyxDQUFDLGVBQWUsQ0FFekI7O1FBQ0YsRUFBRSxNQUFNLENBQ1Y7TUFBQSxFQUFFLEdBQUcsQ0FDUDtJQUFBLEVBQUUsR0FBRyxDQUFDLENBQ1AsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLGtCQUFlLFVBQVUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1xuICBnZXRHdWFyZHJhaWxzLFxuICBzdWJtaXRHdWFyZHJhaWxzLFxufSBmcm9tICcuLi9zZXJ2aWNlcy9ndWFyZHJhaWxzLnNlcnZpY2UnO1xuXG5pbnRlcmZhY2UgR3VhcmRyYWlsc1Byb3BzIHtcbiAgb25DbG9zZTogKCkgPT4gdm9pZDtcbn1cblxuY29uc3QgR3VhcmRyYWlscyA9ICh7IG9uQ2xvc2UgfTogR3VhcmRyYWlsc1Byb3BzKSA9PiB7XG4gIGNvbnN0IFtndWFyZHJhaWxzLCBzZXRHdWFyZHJhaWxzXSA9IHVzZVN0YXRlPHN0cmluZ1tdPihbXSk7XG4gIGNvbnN0IFtuZXdHdWFyZHJhaWwsIHNldE5ld0d1YXJkcmFpbF0gPSB1c2VTdGF0ZSgnJyk7XG4gIGNvbnN0IFtpc0xvYWRpbmcsIHNldElzTG9hZGluZ10gPSB1c2VTdGF0ZSh0cnVlKTtcbiAgY29uc3QgW2lzU3VibWl0dGluZywgc2V0SXNTdWJtaXR0aW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW25vdGlmaWNhdGlvbiwgc2V0Tm90aWZpY2F0aW9uXSA9IHVzZVN0YXRlPHtcbiAgICB0eXBlOiAnc3VjY2VzcycgfCAnZXJyb3InO1xuICAgIG1lc3NhZ2U6IHN0cmluZztcbiAgfSB8IG51bGw+KG51bGwpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgZmV0Y2hHdWFyZHJhaWxzID0gYXN5bmMgKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IGdldEd1YXJkcmFpbHMoKTtcbiAgICAgICAgc2V0R3VhcmRyYWlscyhkYXRhKTtcbiAgICAgICAgc2V0TmV3R3VhcmRyYWlsKCcnKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBzZXROb3RpZmljYXRpb24oe1xuICAgICAgICAgIHR5cGU6ICdlcnJvcicsXG4gICAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byBmZXRjaCBndWFyZHJhaWxzJyxcbiAgICAgICAgfSk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xuICAgICAgfVxuICAgIH07XG4gICAgZmV0Y2hHdWFyZHJhaWxzKCk7XG4gIH0sIFtdKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChub3RpZmljYXRpb24pIHtcbiAgICAgIGNvbnN0IHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHNldE5vdGlmaWNhdGlvbihudWxsKTtcbiAgICAgIH0sIDMwMDApO1xuICAgICAgcmV0dXJuICgpID0+IGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgfVxuICB9LCBbbm90aWZpY2F0aW9uXSk7XG5cbiAgY29uc3QgaGFuZGxlQWRkR3VhcmRyYWlsID0gKCkgPT4ge1xuICAgIGlmIChuZXdHdWFyZHJhaWwudHJpbSgpKSB7XG4gICAgICBzZXRHdWFyZHJhaWxzKFsuLi5ndWFyZHJhaWxzLCBuZXdHdWFyZHJhaWwudHJpbSgpXSk7XG4gICAgICBzZXROZXdHdWFyZHJhaWwoJycpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBoYW5kbGVEZWxldGVHdWFyZHJhaWwgPSAoaW5kZXg6IG51bWJlcikgPT4ge1xuICAgIHNldEd1YXJkcmFpbHMoZ3VhcmRyYWlscy5maWx0ZXIoKF8sIGkpID0+IGkgIT09IGluZGV4KSk7XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlU3VibWl0ID0gYXN5bmMgKCkgPT4ge1xuICAgIHNldElzU3VibWl0dGluZyh0cnVlKTtcbiAgICBzZXROb3RpZmljYXRpb24obnVsbCk7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHVwZGF0ZWRHdWFyZHJhaWxzID0gYXdhaXQgc3VibWl0R3VhcmRyYWlscyhndWFyZHJhaWxzKTtcbiAgICAgIHNldEd1YXJkcmFpbHModXBkYXRlZEd1YXJkcmFpbHMpO1xuICAgICAgc2V0Tm90aWZpY2F0aW9uKHtcbiAgICAgICAgdHlwZTogJ3N1Y2Nlc3MnLFxuICAgICAgICBtZXNzYWdlOiAnR3VhcmRyYWlscyB1cGRhdGVkIHN1Y2Nlc3NmdWxseScsXG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHNldE5vdGlmaWNhdGlvbih7XG4gICAgICAgIHR5cGU6ICdlcnJvcicsXG4gICAgICAgIG1lc3NhZ2U6ICdGYWlsZWQgdG8gdXBkYXRlIGd1YXJkcmFpbHMnLFxuICAgICAgfSk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHNldElzU3VibWl0dGluZyhmYWxzZSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJndWFyZHJhaWxzLWNvbnRhaW5lclwiPlxuICAgICAgPGgyPkd1YXJkcmFpbHM8L2gyPlxuICAgICAge25vdGlmaWNhdGlvbiAmJiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgbm90aWZpY2F0aW9uICR7bm90aWZpY2F0aW9uLnR5cGV9YH0+XG4gICAgICAgICAge25vdGlmaWNhdGlvbi5tZXNzYWdlfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG4gICAgICB7KGlzTG9hZGluZyB8fCBpc1N1Ym1pdHRpbmcpICYmIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb2RhbC1sb2FkaW5nLW92ZXJsYXlcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNwaW5uZXJcIj48L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICApfVxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJndWFyZHJhaWxzLWxpc3RcIj5cbiAgICAgICAge2d1YXJkcmFpbHMubWFwKChndWFyZHJhaWwsIGluZGV4KSA9PiAoXG4gICAgICAgICAgPGRpdiBrZXk9e2luZGV4fSBjbGFzc05hbWU9XCJndWFyZHJhaWwtaXRlbVwiPlxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgdmFsdWU9e2d1YXJkcmFpbH1cbiAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3R3VhcmRyYWlscyA9IFsuLi5ndWFyZHJhaWxzXTtcbiAgICAgICAgICAgICAgICBuZXdHdWFyZHJhaWxzW2luZGV4XSA9IGUudGFyZ2V0LnZhbHVlO1xuICAgICAgICAgICAgICAgIHNldEd1YXJkcmFpbHMobmV3R3VhcmRyYWlscyk7XG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImd1YXJkcmFpbC1pbnB1dFwiXG4gICAgICAgICAgICAgIGRpc2FibGVkPXtpc0xvYWRpbmcgfHwgaXNTdWJtaXR0aW5nfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gaGFuZGxlRGVsZXRlR3VhcmRyYWlsKGluZGV4KX1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZGVsZXRlLWJ1dHRvblwiXG4gICAgICAgICAgICAgIGRpc2FibGVkPXtpc0xvYWRpbmcgfHwgaXNTdWJtaXR0aW5nfVxuICAgICAgICAgICAgICB0aXRsZT1cIkRlbGV0ZSBndWFyZHJhaWxcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8c3ZnXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwidHJhc2gtaWNvblwiXG4gICAgICAgICAgICAgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gICAgICAgICAgICAgICAgd2lkdGg9XCIyMFwiXG4gICAgICAgICAgICAgICAgaGVpZ2h0PVwiMjBcIlxuICAgICAgICAgICAgICAgIGZpbGw9XCJub25lXCJcbiAgICAgICAgICAgICAgICBzdHJva2U9XCJjdXJyZW50Q29sb3JcIlxuICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoPVwiMlwiXG4gICAgICAgICAgICAgICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCJcbiAgICAgICAgICAgICAgICBzdHJva2VMaW5lam9pbj1cInJvdW5kXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxwYXRoIGQ9XCJNMyA2aDE4XCIgLz5cbiAgICAgICAgICAgICAgICA8cGF0aCBkPVwiTTE5IDZ2MTRjMCAxLTEgMi0yIDJIN2MtMSAwLTItMS0yLTJWNlwiIC8+XG4gICAgICAgICAgICAgICAgPHBhdGggZD1cIk04IDZWNGMwLTEgMS0yIDItMmg0YzEgMCAyIDEgMiAydjJcIiAvPlxuICAgICAgICAgICAgICAgIDxsaW5lIHgxPVwiMTBcIiB5MT1cIjExXCIgeDI9XCIxMFwiIHkyPVwiMTdcIiAvPlxuICAgICAgICAgICAgICAgIDxsaW5lIHgxPVwiMTRcIiB5MT1cIjExXCIgeDI9XCIxNFwiIHkyPVwiMTdcIiAvPlxuICAgICAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApKX1cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJhZGQtZ3VhcmRyYWlsXCI+XG4gICAgICAgIDxpbnB1dFxuICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICB2YWx1ZT17bmV3R3VhcmRyYWlsfVxuICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gc2V0TmV3R3VhcmRyYWlsKGUudGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgICBwbGFjZWhvbGRlcj1cIkFkZCBuZXcgZ3VhcmRyYWlsXCJcbiAgICAgICAgICBjbGFzc05hbWU9XCJndWFyZHJhaWwtaW5wdXRcIlxuICAgICAgICAgIGRpc2FibGVkPXtpc0xvYWRpbmcgfHwgaXNTdWJtaXR0aW5nfVxuICAgICAgICAvPlxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgb25DbGljaz17aGFuZGxlQWRkR3VhcmRyYWlsfVxuICAgICAgICAgIGNsYXNzTmFtZT1cImFkZC1idXR0b25cIlxuICAgICAgICAgIGRpc2FibGVkPXtpc0xvYWRpbmcgfHwgaXNTdWJtaXR0aW5nfVxuICAgICAgICA+XG4gICAgICAgICAgQWRkXG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImd1YXJkcmFpbHMtYWN0aW9uc1wiPlxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgb25DbGljaz17b25DbG9zZX1cbiAgICAgICAgICBjbGFzc05hbWU9XCJjYW5jZWwtYnV0dG9uXCJcbiAgICAgICAgICBkaXNhYmxlZD17aXNMb2FkaW5nIHx8IGlzU3VibWl0dGluZ31cbiAgICAgICAgPlxuICAgICAgICAgIENhbmNlbFxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZVN1Ym1pdH1cbiAgICAgICAgICBkaXNhYmxlZD17aXNMb2FkaW5nIHx8IGlzU3VibWl0dGluZ31cbiAgICAgICAgICBjbGFzc05hbWU9XCJzdWJtaXQtYnV0dG9uXCJcbiAgICAgICAgPlxuICAgICAgICAgIFNhdmUgQ2hhbmdlc1xuICAgICAgICA8L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgR3VhcmRyYWlscztcbiJdfQ==