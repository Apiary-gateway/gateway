"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const zod_1 = require("zod");
const callLLM_1 = require("./util/callLLM");
const logger_1 = require("./util/logger");
const RequestSchema = zod_1.z.object({
    prompt: zod_1.z.string().min(1),
    threadID: zod_1.z.string().optional(),
    provider: zod_1.z.enum(['openai', 'anthropic', 'gemini']).optional(),
    model: zod_1.z
        .enum([
        'gpt-3.5-turbo',
        'gpt-4',
        'claude-3-opus-20240229',
        'gemini-1.5-pro',
    ])
        .optional(),
});
// type RequestPayload = z.infer<typeof RequestSchema>;
const handler = async (event) => {
    const logData = {
        requestStartTime: Date.now(),
        provider: null,
        model: null,
        tokens_used: 0,
        cost: 0,
        RawRequest: JSON.stringify(event),
    };
    try {
        const body = typeof event.body === 'string' ? JSON.parse(event.body) : event.body;
        const parsed = RequestSchema.safeParse(body);
        if (!parsed.success) {
            await (0, logger_1.logFailedRequest)({
                ...logData,
                errorMessage: 'Invalid Request Body',
            });
            return {
                statusCode: 400,
                body: JSON.stringify({
                    error: 'Invalid request body.',
                    details: parsed.error.flatten(),
                }),
            };
        }
        const { prompt } = parsed.data;
        // const threadID = parsed.data.threadID || Date.now().toString();
        let { provider, model } = parsed.data;
        // const history = await getMessageHistory(threadID);
        // Type assertion because from parsed.data `provider` and `model` should comeout as `VALID_MODELS` and `VALID_PROVIDERS`
        logData.model = model;
        logData.provider = provider;
        if (!prompt) {
            await (0, logger_1.logFailedRequest)({
                ...logData,
                errorMessage: 'No prompt provided in the request body',
            });
            return {
                statusCode: 400,
                body: JSON.stringify({
                    message: 'No prompt provided in the request body.',
                }),
            };
        }
        // await saveMessage({
        //   threadID: threadID,
        //   role: 'user',
        //   content: prompt,
        // });
        if (!provider) {
            provider = Math.random() < 0.5 ? 'openai' : 'anthropic';
        }
        const response = await (0, callLLM_1.default)([], prompt, provider, model);
        // await saveMessage({
        //   threadID: threadID,
        //   role: 'assistant',
        //   content: response.text,
        // });
        await (0, logger_1.logSuccessfulRequest)({
            ...logData,
            RawResponse: JSON.stringify(response),
        });
        return {
            statusCode: 200,
            body: JSON.stringify({
                provider,
                response,
            }),
        };
    }
    catch (error) {
        console.error(error);
        const errorMessage = error instanceof Error ? error.message : 'Unknown Error';
        await (0, logger_1.logFailedRequest)({ ...logData, errorMessage });
        return {
            statusCode: 500,
            body: JSON.stringify({
                error: errorMessage,
            }),
        };
    }
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicm91dGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDZCQUF3QjtBQUN4Qiw0Q0FBcUM7QUFFckMsMENBTXVCO0FBRXZCLE1BQU0sYUFBYSxHQUFHLE9BQUMsQ0FBQyxNQUFNLENBQUM7SUFDN0IsTUFBTSxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3pCLFFBQVEsRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQy9CLFFBQVEsRUFBRSxPQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLFdBQVcsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRTtJQUM5RCxLQUFLLEVBQUUsT0FBQztTQUNMLElBQUksQ0FBQztRQUNKLGVBQWU7UUFDZixPQUFPO1FBQ1Asd0JBQXdCO1FBQ3hCLGdCQUFnQjtLQUNqQixDQUFDO1NBQ0QsUUFBUSxFQUFFO0NBQ2QsQ0FBQyxDQUFDO0FBRUgsdURBQXVEO0FBRWhELE1BQU0sT0FBTyxHQUFHLEtBQUssRUFBRSxLQUFVLEVBQUUsRUFBRTtJQUMxQyxNQUFNLE9BQU8sR0FBa0I7UUFDN0IsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRTtRQUM1QixRQUFRLEVBQUUsSUFBSTtRQUNkLEtBQUssRUFBRSxJQUFJO1FBQ1gsV0FBVyxFQUFFLENBQUM7UUFDZCxJQUFJLEVBQUUsQ0FBQztRQUNQLFVBQVUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQztLQUNsQyxDQUFDO0lBRUYsSUFBSSxDQUFDO1FBQ0gsTUFBTSxJQUFJLEdBQ1IsT0FBTyxLQUFLLENBQUMsSUFBSSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FB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IH0gZnJvbSAnem9kJztcbmltcG9ydCBjYWxsTExNIGZyb20gJy4vdXRpbC9jYWxsTExNJztcbmltcG9ydCB7IHNhdmVNZXNzYWdlLCBnZXRNZXNzYWdlSGlzdG9yeSB9IGZyb20gJy4vdXRpbC9nZXRBbmRTYXZlTWVzc2FnZXMnO1xuaW1wb3J0IHtcbiAgbG9nU3VjY2Vzc2Z1bFJlcXVlc3QsXG4gIGxvZ0ZhaWxlZFJlcXVlc3QsXG4gIENvbW1vbkxvZ0RhdGEsXG4gIFZBTElEX01PREVMUyxcbiAgVkFMSURfUFJPVklERVJTLFxufSBmcm9tICcuL3V0aWwvbG9nZ2VyJztcblxuY29uc3QgUmVxdWVzdFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgcHJvbXB0OiB6LnN0cmluZygpLm1pbigxKSxcbiAgdGhyZWFkSUQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgcHJvdmlkZXI6IHouZW51bShbJ29wZW5haScsICdhbnRocm9waWMnLCAnZ2VtaW5pJ10pLm9wdGlvbmFsKCksXG4gIG1vZGVsOiB6XG4gICAgLmVudW0oW1xuICAgICAgJ2dwdC0zLjUtdHVyYm8nLFxuICAgICAgJ2dwdC00JyxcbiAgICAgICdjbGF1ZGUtMy1vcHVzLTIwMjQwMjI5JyxcbiAgICAgICdnZW1pbmktMS41LXBybycsXG4gICAgXSlcbiAgICAub3B0aW9uYWwoKSxcbn0pO1xuXG4vLyB0eXBlIFJlcXVlc3RQYXlsb2FkID0gei5pbmZlcjx0eXBlb2YgUmVxdWVzdFNjaGVtYT47XG5cbmV4cG9ydCBjb25zdCBoYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBhbnkpID0+IHtcbiAgY29uc3QgbG9nRGF0YTogQ29tbW9uTG9nRGF0YSA9IHtcbiAgICByZXF1ZXN0U3RhcnRUaW1lOiBEYXRlLm5vdygpLFxuICAgIHByb3ZpZGVyOiBudWxsLFxuICAgIG1vZGVsOiBudWxsLFxuICAgIHRva2Vuc191c2VkOiAwLFxuICAgIGNvc3Q6IDAsXG4gICAgUmF3UmVxdWVzdDogSlNPTi5zdHJpbmdpZnkoZXZlbnQpLFxuICB9O1xuXG4gIHRyeSB7XG4gICAgY29uc3QgYm9keSA9XG4gICAgICB0eXBlb2YgZXZlbnQuYm9keSA9PT0gJ3N0cmluZycgPyBKU09OLnBhcnNlKGV2ZW50LmJvZHkpIDogZXZlbnQuYm9keTtcbiAgICBjb25zdCBwYXJzZWQgPSBSZXF1ZXN0U2NoZW1hLnNhZmVQYXJzZShib2R5KTtcblxuICAgIGlmICghcGFyc2VkLnN1Y2Nlc3MpIHtcbiAgICAgIGF3YWl0IGxvZ0ZhaWxlZFJlcXVlc3Qoe1xuICAgICAgICAuLi5sb2dEYXRhLFxuICAgICAgICBlcnJvck1lc3NhZ2U6ICdJbnZhbGlkIFJlcXVlc3QgQm9keScsXG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdHVzQ29kZTogNDAwLFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgZXJyb3I6ICdJbnZhbGlkIHJlcXVlc3QgYm9keS4nLFxuICAgICAgICAgIGRldGFpbHM6IHBhcnNlZC5lcnJvci5mbGF0dGVuKCksXG4gICAgICAgIH0pLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBjb25zdCB7IHByb21wdCB9ID0gcGFyc2VkLmRhdGE7XG4gICAgLy8gY29uc3QgdGhyZWFkSUQgPSBwYXJzZWQuZGF0YS50aHJlYWRJRCB8fCBEYXRlLm5vdygpLnRvU3RyaW5nKCk7XG4gICAgbGV0IHsgcHJvdmlkZXIsIG1vZGVsIH0gPSBwYXJzZWQuZGF0YTtcbiAgICAvLyBjb25zdCBoaXN0b3J5ID0gYXdhaXQgZ2V0TWVzc2FnZUhpc3RvcnkodGhyZWFkSUQpO1xuXG4gICAgLy8gVHlwZSBhc3NlcnRpb24gYmVjYXVzZSBmcm9tIHBhcnNlZC5kYXRhIGBwcm92aWRlcmAgYW5kIGBtb2RlbGAgc2hvdWxkIGNvbWVvdXQgYXMgYFZBTElEX01PREVMU2AgYW5kIGBWQUxJRF9QUk9WSURFUlNgXG5cbiAgICBsb2dEYXRhLm1vZGVsID0gbW9kZWwgYXMgVkFMSURfTU9ERUxTO1xuICAgIGxvZ0RhdGEucHJvdmlkZXIgPSBwcm92aWRlciBhcyBWQUxJRF9QUk9WSURFUlM7XG5cbiAgICBpZiAoIXByb21wdCkge1xuICAgICAgYXdhaXQgbG9nRmFpbGVkUmVxdWVzdCh7XG4gICAgICAgIC4uLmxvZ0RhdGEsXG4gICAgICAgIGVycm9yTWVzc2FnZTogJ05vIHByb21wdCBwcm92aWRlZCBpbiB0aGUgcmVxdWVzdCBib2R5JyxcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGF0dXNDb2RlOiA0MDAsXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICBtZXNzYWdlOiAnTm8gcHJvbXB0IHByb3ZpZGVkIGluIHRoZSByZXF1ZXN0IGJvZHkuJyxcbiAgICAgICAgfSksXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIGF3YWl0IHNhdmVNZXNzYWdlKHtcbiAgICAvLyAgIHRocmVhZElEOiB0aHJlYWRJRCxcbiAgICAvLyAgIHJvbGU6ICd1c2VyJyxcbiAgICAvLyAgIGNvbnRlbnQ6IHByb21wdCxcbiAgICAvLyB9KTtcblxuICAgIGlmICghcHJvdmlkZXIpIHtcbiAgICAgIHByb3ZpZGVyID0gTWF0aC5yYW5kb20oKSA8IDAuNSA/ICdvcGVuYWknIDogJ2FudGhyb3BpYyc7XG4gICAgfVxuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjYWxsTExNKFtdLCBwcm9tcHQsIHByb3ZpZGVyLCBtb2RlbCk7XG5cbiAgICAvLyBhd2FpdCBzYXZlTWVzc2FnZSh7XG4gICAgLy8gICB0aHJlYWRJRDogdGhyZWFkSUQsXG4gICAgLy8gICByb2xlOiAnYXNzaXN0YW50JyxcbiAgICAvLyAgIGNvbnRlbnQ6IHJlc3BvbnNlLnRleHQsXG4gICAgLy8gfSk7XG5cbiAgICBhd2FpdCBsb2dTdWNjZXNzZnVsUmVxdWVzdCh7XG4gICAgICAuLi5sb2dEYXRhLFxuICAgICAgUmF3UmVzcG9uc2U6IEpTT04uc3RyaW5naWZ5KHJlc3BvbnNlKSxcbiAgICB9KTtcblxuICAgIHJldHVybiB7XG4gICAgICBzdGF0dXNDb2RlOiAyMDAsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIHByb3ZpZGVyLFxuICAgICAgICByZXNwb25zZSxcbiAgICAgIH0pLFxuICAgIH07XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihlcnJvcik7XG5cbiAgICBjb25zdCBlcnJvck1lc3NhZ2UgPVxuICAgICAgZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBFcnJvcic7XG5cbiAgICBhd2FpdCBsb2dGYWlsZWRSZXF1ZXN0KHsgLi4ubG9nRGF0YSwgZXJyb3JNZXNzYWdlIH0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXR1c0NvZGU6IDUwMCxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgZXJyb3I6IGVycm9yTWVzc2FnZSxcbiAgICAgIH0pLFxuICAgIH07XG4gIH1cbn07XG4iXX0=