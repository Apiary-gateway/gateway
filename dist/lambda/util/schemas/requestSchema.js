"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestSchema = void 0;
const zod_1 = require("zod");
const constants_1 = require("../constants");
const modelValidation_1 = require("../modelValidation");
const providers = Object.keys(constants_1.MODELS); // zod requires a tuple with at least one string element in its enum() function
exports.RequestSchema = zod_1.z
    .object({
    prompt: zod_1.z.string().min(1),
    threadID: zod_1.z.string().optional(),
    provider: zod_1.z.enum(providers).optional(),
    model: zod_1.z.string().optional(),
    userId: zod_1.z.string().optional(),
    userType: zod_1.z.string().optional(),
    region: zod_1.z.string().optional(),
})
    .superRefine((data, ctx) => {
    const { provider, model } = data;
    if (model && !provider) {
        ctx.addIssue({
            code: zod_1.z.ZodIssueCode.custom,
            message: 'Provider is required when model is specified',
            path: ['model'],
        });
        return;
    }
    if (model && provider && !(0, modelValidation_1.isValidModelForProvider)(provider, model)) {
        ctx.addIssue({
            code: zod_1.z.ZodIssueCode.custom,
            message: `Invalid model for provider ${provider}`,
            path: ['model'],
        });
        return;
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVxdWVzdFNjaGVtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xhbWJkYS91dGlsL3NjaGVtYXMvcmVxdWVzdFNjaGVtYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2QkFBd0I7QUFDeEIsNENBQXNDO0FBQ3RDLHdEQUE2RDtBQUU3RCxNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLGtCQUFNLENBQTBCLENBQUMsQ0FBQywrRUFBK0U7QUFFbEksUUFBQSxhQUFhLEdBQUcsT0FBQztLQUMzQixNQUFNLENBQUM7SUFDTixNQUFNLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDekIsUUFBUSxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUU7SUFDL0IsUUFBUSxFQUFFLE9BQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsUUFBUSxFQUFFO0lBQ3RDLEtBQUssRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQzVCLE1BQU0sRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQzdCLFFBQVEsRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQy9CLE1BQU0sRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0NBQzlCLENBQUM7S0FDRCxXQUFXLENBQUMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEVBQUU7SUFDekIsTUFBTSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUM7SUFDakMsSUFBSSxLQUFLLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNyQixHQUFHLENBQUMsUUFBUSxDQUFDO1lBQ1QsSUFBSSxFQUFFLE9BQUMsQ0FBQyxZQUFZLENBQUMsTUFBTTtZQUMzQixPQUFPLEVBQUUsOENBQThDO1lBQ3ZELElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQztTQUNsQixDQUFDLENBQUM7UUFDSCxPQUFPO0lBQ1gsQ0FBQztJQUVELElBQUksS0FBSyxJQUFJLFFBQVEsSUFBSSxDQUFDLElBQUEseUNBQXVCLEVBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDakUsR0FBRyxDQUFDLFFBQVEsQ0FBQztZQUNULElBQUksRUFBRSxPQUFDLENBQUMsWUFBWSxDQUFDLE1BQU07WUFDM0IsT0FBTyxFQUFFLDhCQUE4QixRQUFRLEVBQUU7WUFDakQsSUFBSSxFQUFFLENBQUMsT0FBTyxDQUFDO1NBQ2xCLENBQUMsQ0FBQztRQUNILE9BQU87SUFFWCxDQUFDO0FBQ0gsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB6IH0gZnJvbSAnem9kJztcbmltcG9ydCB7IE1PREVMUyB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBpc1ZhbGlkTW9kZWxGb3JQcm92aWRlciB9IGZyb20gJy4uL21vZGVsVmFsaWRhdGlvbic7XG5cbmNvbnN0IHByb3ZpZGVycyA9IE9iamVjdC5rZXlzKE1PREVMUykgYXMgW3N0cmluZywgLi4uc3RyaW5nW11dOyAvLyB6b2QgcmVxdWlyZXMgYSB0dXBsZSB3aXRoIGF0IGxlYXN0IG9uZSBzdHJpbmcgZWxlbWVudCBpbiBpdHMgZW51bSgpIGZ1bmN0aW9uXG5cbmV4cG9ydCBjb25zdCBSZXF1ZXN0U2NoZW1hID0gelxuICAub2JqZWN0KHtcbiAgICBwcm9tcHQ6IHouc3RyaW5nKCkubWluKDEpLFxuICAgIHRocmVhZElEOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgcHJvdmlkZXI6IHouZW51bShwcm92aWRlcnMpLm9wdGlvbmFsKCksXG4gICAgbW9kZWw6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICB1c2VySWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICB1c2VyVHlwZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgIHJlZ2lvbjogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICB9KVxuICAuc3VwZXJSZWZpbmUoKGRhdGEsIGN0eCkgPT4ge1xuICAgIGNvbnN0IHsgcHJvdmlkZXIsIG1vZGVsIH0gPSBkYXRhO1xuICAgIGlmIChtb2RlbCAmJiAhcHJvdmlkZXIpIHtcbiAgICAgICAgY3R4LmFkZElzc3VlKHtcbiAgICAgICAgICAgIGNvZGU6IHouWm9kSXNzdWVDb2RlLmN1c3RvbSxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdQcm92aWRlciBpcyByZXF1aXJlZCB3aGVuIG1vZGVsIGlzIHNwZWNpZmllZCcsXG4gICAgICAgICAgICBwYXRoOiBbJ21vZGVsJ10sXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG1vZGVsICYmIHByb3ZpZGVyICYmICFpc1ZhbGlkTW9kZWxGb3JQcm92aWRlcihwcm92aWRlciwgbW9kZWwpKSB7XG4gICAgICAgIGN0eC5hZGRJc3N1ZSh7XG4gICAgICAgICAgICBjb2RlOiB6LlpvZElzc3VlQ29kZS5jdXN0b20sXG4gICAgICAgICAgICBtZXNzYWdlOiBgSW52YWxpZCBtb2RlbCBmb3IgcHJvdmlkZXIgJHtwcm92aWRlcn1gLFxuICAgICAgICAgICAgcGF0aDogWydtb2RlbCddLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgXG4gICAgfVxuICB9KTtcblxuZXhwb3J0IHR5cGUgUmVxdWVzdFBheWxvYWQgPSB6LmluZmVyPHR5cGVvZiBSZXF1ZXN0U2NoZW1hPjsiXX0=