"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = void 0;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const uuid_1 = require("uuid");
const LOG_TABLE_NAME = process.env.LOG_TABLE_NAME;
if (!LOG_TABLE_NAME) {
    throw new Error('LOG_TABLE_NAME must be set');
}
class Logger {
    constructor() {
        this.requestStartTime = new Date();
        this.is_successful = false;
        this.user_id = null;
        this.metadata = null;
        this.success_reason = null;
        this.error_reason = null;
        this.model_routing_history = [];
        this.thread_id = null;
        this.provider = null;
        this.model = null;
        this.cost = null;
        this.raw_request = null;
        this.raw_response = null;
        this.error_message = null;
    }
    async log() {
        // Build the log object
        const structuredLog = {
            id: (0, uuid_1.v4)(),
            timestamp: this.requestStartTime.getTime(),
            latency: BigInt(Date.now() - this.requestStartTime.getTime()),
            is_successful: this.is_successful,
            success_reason: this.success_reason,
            error_reason: this.error_reason,
            model_routing_history: JSON.stringify(this.model_routing_history),
            user_id: this.user_id,
            metadata: this.metadata,
            thread_id: this.thread_id,
            provider: this.provider,
            model: this.model,
            cost: this.cost,
            raw_request: this.raw_request,
            raw_response: this.raw_response,
            error_message: this.error_message,
        };
        // Write to DynamoDB only
        const isoDate = new Date(structuredLog.timestamp).toISOString();
        await Logger.ddb.send(new client_dynamodb_1.PutItemCommand({
            TableName: LOG_TABLE_NAME,
            Item: {
                PK: { S: 'LOG' },
                SK: { S: `TS#${isoDate}` },
                id: { S: structuredLog.id },
                timestamp: { S: isoDate },
                latency: { N: structuredLog.latency.toString() },
                is_successful: { BOOL: structuredLog.is_successful },
                success_reason: structuredLog.success_reason
                    ? { S: structuredLog.success_reason }
                    : { NULL: true },
                error_reason: structuredLog.error_reason
                    ? { S: structuredLog.error_reason }
                    : { NULL: true },
                model_routing_history: { S: structuredLog.model_routing_history },
                user_id: structuredLog.user_id
                    ? { S: structuredLog.user_id }
                    : { NULL: true },
                metadata: structuredLog.metadata
                    ? { S: structuredLog.metadata }
                    : { NULL: true },
                thread_id: structuredLog.thread_id
                    ? { S: structuredLog.thread_id }
                    : { NULL: true },
                provider: structuredLog.provider
                    ? { S: structuredLog.provider }
                    : { NULL: true },
                model: structuredLog.model
                    ? { S: structuredLog.model }
                    : { NULL: true },
                cost: structuredLog.cost !== null
                    ? { N: structuredLog.cost.toString() }
                    : { NULL: true },
                raw_request: structuredLog.raw_request
                    ? { S: structuredLog.raw_request }
                    : { NULL: true },
                raw_response: structuredLog.raw_response
                    ? { S: structuredLog.raw_response }
                    : { NULL: true },
                error_message: structuredLog.error_message
                    ? { S: structuredLog.error_message }
                    : { NULL: true },
            },
        }));
    }
    setRawRequest(rawRequest) {
        this.raw_request = rawRequest;
    }
    setInitialData(threadId, userId, metadata) {
        this.thread_id = threadId;
        this.user_id = userId || null;
        this.metadata = metadata;
    }
    async logSuccessData(model, provider, modelRoutingHistory, successReason, rawResponse) {
        const modelRoutingHistoryJsonArray = modelRoutingHistory.events.map((e) => JSON.stringify(e, null, 2));
        this.model = model;
        this.provider = provider;
        this.model_routing_history = modelRoutingHistoryJsonArray;
        this.success_reason = successReason;
        this.raw_response = rawResponse;
        this.is_successful = true;
        await this.log();
    }
    async logErrorData(errorReason, errorMessage) {
        this.error_reason = errorReason;
        this.error_message = errorMessage;
        await this.log();
    }
}
exports.Logger = Logger;
Logger.ddb = new client_dynamodb_1.DynamoDBClient({});
//# sourceMappingURL=data:application/json;base64,