"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.presignedUrlSchema = exports.configSchema = exports.cacheSchema = exports.guardrailsSchema = exports.routingSchema = exports.routingConditionSchema = exports.weightedProviderModelSchema = exports.providerModelSchema = void 0;
const zod_1 = require("zod");
exports.providerModelSchema = zod_1.z.object({
    provider: zod_1.z.string(),
    model: zod_1.z.string(),
});
exports.weightedProviderModelSchema = exports.providerModelSchema.extend({
    weight: zod_1.z.number(),
});
exports.routingConditionSchema = zod_1.z.object({
    name: zod_1.z.string(),
    query: zod_1.z.any(),
    loadBalance: zod_1.z.array(exports.weightedProviderModelSchema),
    fallbackModel: zod_1.z.optional(exports.providerModelSchema),
});
exports.routingSchema = zod_1.z.object({
    defaultModel: exports.providerModelSchema,
    enableFallbacks: zod_1.z.boolean(),
    fallbackModel: exports.providerModelSchema,
    retries: zod_1.z.number(),
    availableMetadata: zod_1.z.array(zod_1.z.string()),
    fallbackOnStatus: zod_1.z.array(zod_1.z.number()).optional(),
    conditions: zod_1.z.array(exports.routingConditionSchema).optional(),
});
exports.guardrailsSchema = zod_1.z.object({
    enabled: zod_1.z.boolean(),
    threshold: zod_1.z.number(),
    restrictedWords: zod_1.z.array(zod_1.z.string()),
    sensitivityLevel: zod_1.z.union([zod_1.z.literal(0), zod_1.z.literal(1), zod_1.z.literal(2)]),
    resendOnViolation: zod_1.z.boolean(),
    blockedContentResponse: zod_1.z.string(),
});
exports.cacheSchema = zod_1.z.object({
    enableSimple: zod_1.z.boolean(),
    enableSemantic: zod_1.z.boolean(),
    semanticCacheThreshold: zod_1.z.number(),
});
exports.configSchema = zod_1.z.object({
    routing: exports.routingSchema,
    guardrails: exports.guardrailsSchema,
    cache: exports.cacheSchema,
});
exports.presignedUrlSchema = zod_1.z.object({
    url: zod_1.z.string(),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLnR5cGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vZnJvbnRlbmQtdWkvc3JjL3R5cGVzL2NvbmZpZy50eXBlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2QkFBd0I7QUFFWCxRQUFBLG1CQUFtQixHQUFHLE9BQUMsQ0FBQyxNQUFNLENBQUM7SUFDeEMsUUFBUSxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUU7SUFDcEIsS0FBSyxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUU7Q0FDbEIsQ0FBQyxDQUFDO0FBRVUsUUFBQSwyQkFBMkIsR0FBRywyQkFBbUIsQ0FBQyxNQUFNLENBQUM7SUFDcEUsTUFBTSxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUU7Q0FDbkIsQ0FBQyxDQUFDO0FBRVEsUUFBQSxzQkFBc0IsR0FBRyxPQUFDLENBQUMsTUFBTSxDQUFDO0lBQzdDLElBQUksRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFO0lBQ2hCLEtBQUssRUFBRSxPQUFDLENBQUMsR0FBRyxFQUFFO0lBQ2QsV0FBVyxFQUFFLE9BQUMsQ0FBQyxLQUFLLENBQUMsbUNBQTJCLENBQUM7SUFDakQsYUFBYSxFQUFFLE9BQUMsQ0FBQyxRQUFRLENBQUMsMkJBQW1CLENBQUM7Q0FDL0MsQ0FBQyxDQUFDO0FBRVUsUUFBQSxhQUFhLEdBQUcsT0FBQyxDQUFDLE1BQU0sQ0FBQztJQUNwQyxZQUFZLEVBQUUsMkJBQW1CO0lBQ2pDLGVBQWUsRUFBRSxPQUFDLENBQUMsT0FBTyxFQUFFO0lBQzVCLGFBQWEsRUFBRSwyQkFBbUI7SUFDbEMsT0FBTyxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUU7SUFDbkIsaUJBQWlCLEVBQUUsT0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDdEMsZ0JBQWdCLEVBQUUsT0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxRQUFRLEVBQUU7SUFDaEQsVUFBVSxFQUFFLE9BQUMsQ0FBQyxLQUFLLENBQUMsOEJBQXNCLENBQUMsQ0FBQyxRQUFRLEVBQUU7Q0FDdkQsQ0FBQyxDQUFDO0FBRVUsUUFBQSxnQkFBZ0IsR0FBRyxPQUFDLENBQUMsTUFBTSxDQUFDO0lBQ3ZDLE9BQU8sRUFBRSxPQUFDLENBQUMsT0FBTyxFQUFFO0lBQ3BCLFNBQVMsRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFO0lBQ3JCLGVBQWUsRUFBRSxPQUFDLENBQUMsS0FBSyxDQUFDLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNwQyxnQkFBZ0IsRUFBRSxPQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNyRSxpQkFBaUIsRUFBRSxPQUFDLENBQUMsT0FBTyxFQUFFO0lBQzlCLHNCQUFzQixFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUU7Q0FDbkMsQ0FBQyxDQUFDO0FBRVUsUUFBQSxXQUFXLEdBQUcsT0FBQyxDQUFDLE1BQU0sQ0FBQztJQUNsQyxZQUFZLEVBQUUsT0FBQyxDQUFDLE9BQU8sRUFBRTtJQUN6QixjQUFjLEVBQUUsT0FBQyxDQUFDLE9BQU8sRUFBRTtJQUMzQixzQkFBc0IsRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFO0NBQ25DLENBQUMsQ0FBQztBQUVVLFFBQUEsWUFBWSxHQUFHLE9BQUMsQ0FBQyxNQUFNLENBQUM7SUFDbkMsT0FBTyxFQUFFLHFCQUFhO0lBQ3RCLFVBQVUsRUFBRSx3QkFBZ0I7SUFDNUIsS0FBSyxFQUFFLG1CQUFXO0NBQ25CLENBQUMsQ0FBQztBQUVVLFFBQUEsa0JBQWtCLEdBQUcsT0FBQyxDQUFDLE1BQU0sQ0FBQztJQUN2QyxHQUFHLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRTtDQUNsQixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB6IH0gZnJvbSAnem9kJztcblxuZXhwb3J0IGNvbnN0IHByb3ZpZGVyTW9kZWxTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgcHJvdmlkZXI6IHouc3RyaW5nKCksXG4gICAgbW9kZWw6IHouc3RyaW5nKCksXG4gIH0pO1xuXG4gIGV4cG9ydCBjb25zdCB3ZWlnaHRlZFByb3ZpZGVyTW9kZWxTY2hlbWEgPSBwcm92aWRlck1vZGVsU2NoZW1hLmV4dGVuZCh7XG4gICAgd2VpZ2h0OiB6Lm51bWJlcigpLFxuICB9KTtcblxuZXhwb3J0IGNvbnN0IHJvdXRpbmdDb25kaXRpb25TY2hlbWEgPSB6Lm9iamVjdCh7XG4gIG5hbWU6IHouc3RyaW5nKCksXG4gIHF1ZXJ5OiB6LmFueSgpLCBcbiAgbG9hZEJhbGFuY2U6IHouYXJyYXkod2VpZ2h0ZWRQcm92aWRlck1vZGVsU2NoZW1hKSxcbiAgZmFsbGJhY2tNb2RlbDogei5vcHRpb25hbChwcm92aWRlck1vZGVsU2NoZW1hKSxcbn0pO1xuXG5leHBvcnQgY29uc3Qgcm91dGluZ1NjaGVtYSA9IHoub2JqZWN0KHtcbiAgZGVmYXVsdE1vZGVsOiBwcm92aWRlck1vZGVsU2NoZW1hLFxuICBlbmFibGVGYWxsYmFja3M6IHouYm9vbGVhbigpLFxuICBmYWxsYmFja01vZGVsOiBwcm92aWRlck1vZGVsU2NoZW1hLFxuICByZXRyaWVzOiB6Lm51bWJlcigpLFxuICBhdmFpbGFibGVNZXRhZGF0YTogei5hcnJheSh6LnN0cmluZygpKSxcbiAgZmFsbGJhY2tPblN0YXR1czogei5hcnJheSh6Lm51bWJlcigpKS5vcHRpb25hbCgpLFxuICBjb25kaXRpb25zOiB6LmFycmF5KHJvdXRpbmdDb25kaXRpb25TY2hlbWEpLm9wdGlvbmFsKCksXG59KTtcblxuZXhwb3J0IGNvbnN0IGd1YXJkcmFpbHNTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIGVuYWJsZWQ6IHouYm9vbGVhbigpLFxuICB0aHJlc2hvbGQ6IHoubnVtYmVyKCksXG4gIHJlc3RyaWN0ZWRXb3Jkczogei5hcnJheSh6LnN0cmluZygpKSxcbiAgc2Vuc2l0aXZpdHlMZXZlbDogei51bmlvbihbei5saXRlcmFsKDApLCB6LmxpdGVyYWwoMSksIHoubGl0ZXJhbCgyKV0pLFxuICByZXNlbmRPblZpb2xhdGlvbjogei5ib29sZWFuKCksXG4gIGJsb2NrZWRDb250ZW50UmVzcG9uc2U6IHouc3RyaW5nKCksXG59KTtcblxuZXhwb3J0IGNvbnN0IGNhY2hlU2NoZW1hID0gei5vYmplY3Qoe1xuICBlbmFibGVTaW1wbGU6IHouYm9vbGVhbigpLFxuICBlbmFibGVTZW1hbnRpYzogei5ib29sZWFuKCksXG4gIHNlbWFudGljQ2FjaGVUaHJlc2hvbGQ6IHoubnVtYmVyKCksXG59KTtcblxuZXhwb3J0IGNvbnN0IGNvbmZpZ1NjaGVtYSA9IHoub2JqZWN0KHtcbiAgcm91dGluZzogcm91dGluZ1NjaGVtYSxcbiAgZ3VhcmRyYWlsczogZ3VhcmRyYWlsc1NjaGVtYSxcbiAgY2FjaGU6IGNhY2hlU2NoZW1hLFxufSk7XG5cbmV4cG9ydCBjb25zdCBwcmVzaWduZWRVcmxTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdXJsOiB6LnN0cmluZygpLFxufSlcblxuZXhwb3J0IHR5cGUgQ29uZmlnID0gei5pbmZlcjx0eXBlb2YgY29uZmlnU2NoZW1hPjtcbmV4cG9ydCB0eXBlIFByZXNpZ25lZFVybCA9IHouaW5mZXI8dHlwZW9mIHByZXNpZ25lZFVybFNjaGVtYT47XG4iXX0=