"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const client_athena_1 = require("@aws-sdk/client-athena");
const dynamoClient = new client_dynamodb_1.DynamoDBClient({});
const athenaClient = new client_athena_1.AthenaClient({});
const LOG_TABLE_NAME = process.env.LOG_TABLE_NAME || '';
const LOG_BUCKET_NAME = process.env.LOG_BUCKET_NAME || '';
const ATHENA_DATABASE = 'ai_gateway_logs_db';
const ATHENA_WORKGROUP = 'llm_logs_workgroup';
const PAGE_SIZE = 15;
// Utility to get today's date in yyyy-MM-dd format
const getTodayDate = () => {
    return new Date().toISOString().split('T')[0]; // e.g., "2025-03-27"
};
// Map DynamoDB items to a consistent format
const mapDynamoItem = (item) => ({
    id: item.id?.S,
    timestamp: item.timestamp?.S,
    status: item.status?.S,
    provider: item.provider?.S,
    model: item.model?.S,
    latency: item.latency?.N,
});
// Map Athena rows to a consistent format
const mapAthenaRow = (row) => {
    const data = row.Data || [];
    return {
        id: data[0]?.VarCharValue,
        timestamp: data[1]?.VarCharValue,
        status: data[2]?.VarCharValue,
        provider: data[3]?.VarCharValue,
        model: data[4]?.VarCharValue,
        latency: data[5]?.VarCharValue,
    };
};
const handler = async (event) => {
    try {
        const queryParams = event.queryStringParameters || {};
        const older = queryParams.older === 'true'; // ?older=true for Athena, otherwise DynamoDB
        const page = parseInt(queryParams.page || '1', 10); // Default to page 1
        if (isNaN(page) || page < 1) {
            return {
                statusCode: 400,
                body: JSON.stringify({ message: 'Invalid page number' }),
            };
        }
        const offset = (page - 1) * PAGE_SIZE; // Calculate offset based on page number
        let logs = [];
        let totalPages;
        if (older) {
            // Query Athena for older logs with offset
            const today = getTodayDate();
            const athenaQuery = `
        SELECT id, timestamp, status, provider, model, latency
        FROM "ai_gateway_logs"
        WHERE date < '${today}'
        ORDER BY date DESC, timestamp DESC
        LIMIT ${PAGE_SIZE} OFFSET ${offset}
      `;
            const startQuery = new client_athena_1.StartQueryExecutionCommand({
                QueryString: athenaQuery,
                WorkGroup: ATHENA_WORKGROUP,
                ResultConfiguration: {
                    OutputLocation: `s3://${LOG_BUCKET_NAME}/athena-results/`,
                },
                QueryExecutionContext: {
                    Database: ATHENA_DATABASE,
                },
            });
            const queryExecution = await athenaClient.send(startQuery);
            const queryExecutionId = queryExecution.QueryExecutionId;
            // Poll for query completion using GetQueryExecutionCommand
            let queryState;
            do {
                await new Promise((resolve) => setTimeout(resolve, 1000)); // Wait 1 second
                const queryExecutionResult = await athenaClient.send(new client_athena_1.GetQueryExecutionCommand({ QueryExecutionId: queryExecutionId }));
                queryState = queryExecutionResult.QueryExecution?.Status?.State;
            } while (queryState === 'RUNNING' || queryState === 'QUEUED');
            if (queryState === 'FAILED') {
                throw new Error('Athena query failed: ' +
                    (await athenaClient.send(new client_athena_1.GetQueryExecutionCommand({
                        QueryExecutionId: queryExecutionId,
                    }))).QueryExecution?.Status?.StateChangeReason);
            }
            // Fetch results once query succeeds
            const queryResults = await athenaClient.send(new client_athena_1.GetQueryResultsCommand({ QueryExecutionId: queryExecutionId }));
            logs = queryResults.ResultSet?.Rows?.slice(1).map(mapAthenaRow) || []; // Skip header row
            // Calculate total pages for Athena only on page 1
            if (page === 1) {
                const countQuery = `
          SELECT COUNT(*) as total
          FROM "ai_gateway_logs"
          WHERE date < '${today}'
        `;
                const startCountQuery = new client_athena_1.StartQueryExecutionCommand({
                    QueryString: countQuery,
                    WorkGroup: ATHENA_WORKGROUP,
                    ResultConfiguration: {
                        OutputLocation: `s3://${LOG_BUCKET_NAME}/athena-results/`,
                    },
                    QueryExecutionContext: { Database: ATHENA_DATABASE },
                });
                const countExecution = await athenaClient.send(startCountQuery);
                let countState;
                do {
                    await new Promise((resolve) => setTimeout(resolve, 1000));
                    const countExecutionResult = await athenaClient.send(new client_athena_1.GetQueryExecutionCommand({
                        QueryExecutionId: countExecution.QueryExecutionId,
                    }));
                    countState = countExecutionResult.QueryExecution?.Status?.State;
                } while (countState === 'RUNNING' || countState === 'QUEUED');
                if (countState === 'SUCCEEDED') {
                    const countResults = await athenaClient.send(new client_athena_1.GetQueryResultsCommand({
                        QueryExecutionId: countExecution.QueryExecutionId,
                    }));
                    const totalRows = parseInt(countResults.ResultSet?.Rows?.[1].Data?.[0].VarCharValue || '0', 10);
                    totalPages = Math.ceil(totalRows / PAGE_SIZE);
                }
            }
        }
        else {
            // Query DynamoDB for today's logs with offset
            const today = getTodayDate();
            const dynamoQuery = new client_dynamodb_1.QueryCommand({
                TableName: LOG_TABLE_NAME,
                KeyConditionExpression: 'PK = :pk AND begins_with(SK, :sk)',
                ExpressionAttributeValues: {
                    ':pk': { S: 'LOG' }, // Adjust if your PK is different
                    ':sk': { S: today }, // SK starts with today's date
                },
                ScanIndexForward: true, // Ascending order (adjust if needed)
            });
            // Fetch all items and manually paginate
            const dynamoResult = await dynamoClient.send(dynamoQuery);
            const allLogs = dynamoResult.Items?.map(mapDynamoItem) || [];
            logs = allLogs.slice(offset, offset + PAGE_SIZE); // Slice to get the requested page
            totalPages = Math.ceil(allLogs.length / PAGE_SIZE); // Calculate total pages for DynamoDB
        }
        return {
            statusCode: 200,
            body: JSON.stringify({
                logs,
                page,
                pageSize: PAGE_SIZE,
                totalPages, // Included for DynamoDB always, Athena on page 1
            }),
        };
    }
    catch (error) {
        console.error('Error fetching logs:', error);
        return {
            statusCode: 500,
            body: JSON.stringify({
                message: 'Error fetching logs',
                error: String(error),
            }),
        };
    }
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,