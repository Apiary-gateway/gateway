"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = callLLM;
const constants_1 = require("./constants");
const token_js_1 = require("token.js");
const constants_2 = require("./constants");
const client_secrets_manager_1 = require("@aws-sdk/client-secrets-manager");
const SECRET_NAME = 'llm-provider-api-keys';
let cachedApiKeys = null;
async function loadApiKeys() {
    if (cachedApiKeys)
        return cachedApiKeys;
    const secretsManager = new client_secrets_manager_1.SecretsManagerClient();
    const command = new client_secrets_manager_1.GetSecretValueCommand({ SecretId: SECRET_NAME });
    const response = await secretsManager.send(command);
    if (response && response.SecretString) {
        cachedApiKeys = JSON.parse(response.SecretString);
    }
    return;
}
async function callLLM({ history, prompt, provider, model }) {
    try {
        await loadApiKeys();
        if (cachedApiKeys) {
            for (const [key, value] of Object.entries(cachedApiKeys)) {
                process.env[key] = value;
            }
        }
        const tokenjs = new token_js_1.TokenJS();
        const response = await tokenjs.chat.completions.create({
            provider: provider,
            model: model || constants_2.MODELS[provider][0],
            messages: [
                { role: 'system', content: process.env.SYSTEM_PROMPT || constants_1.SYSTEM_PROMPT },
                ...history,
                {
                    role: 'user',
                    content: prompt,
                }
            ],
            temperature: 0.7,
            max_tokens: 500
        });
        return {
            text: response.choices?.[0]?.message?.content || '',
            usage: response.usage,
            provider: provider,
            model: model
        };
    }
    catch (error) {
        console.error(`Error in ${provider} call:`, error);
        throw error;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsbExMTS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xhbWJkYS91dGlsL2NhbGxMTE0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUF5QkEsMEJBdUNDO0FBaEVELDJDQUE0QztBQUM1Qyx1Q0FBbUM7QUFDbkMsMkNBQXFDO0FBR3JDLDRFQUE4RjtBQUU5RixNQUFNLFdBQVcsR0FBRyx1QkFBdUIsQ0FBQztBQUU1QyxJQUFJLGFBQWEsR0FBa0MsSUFBSSxDQUFDO0FBRXhELEtBQUssVUFBVSxXQUFXO0lBQ3RCLElBQUksYUFBYTtRQUFFLE9BQU8sYUFBYSxDQUFDO0lBRXhDLE1BQU0sY0FBYyxHQUFHLElBQUksNkNBQW9CLEVBQUUsQ0FBQztJQUNsRCxNQUFNLE9BQU8sR0FBRyxJQUFJLDhDQUFxQixDQUFDLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUM7SUFDckUsTUFBTSxRQUFRLEdBQUcsTUFBTSxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRXBELElBQUksUUFBUSxJQUFJLFFBQVEsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNwQyxhQUFhLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVELE9BQU87QUFDWCxDQUFDO0FBRWMsS0FBSyxVQUFVLE9BQU8sQ0FBQyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBZTtJQUduRixJQUFJLENBQUM7UUFDRCxNQUFNLFdBQVcsRUFBRSxDQUFDO1FBRXBCLElBQUksYUFBYSxFQUFFLENBQUM7WUFDaEIsS0FBSyxNQUFNLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQztnQkFDdkQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDN0IsQ0FBQztRQUNMLENBQUM7UUFFRCxNQUFNLE9BQU8sR0FBRyxJQUFJLGtCQUFPLEVBQUUsQ0FBQztRQUU5QixNQUFNLFFBQVEsR0FBRyxNQUFNLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQztZQUNuRCxRQUFRLEVBQUUsUUFBZTtZQUN6QixLQUFLLEVBQUUsS0FBSyxJQUFJLGtCQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25DLFFBQVEsRUFBRTtnQkFDTixFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxJQUFJLHlCQUFhLEVBQUU7Z0JBQ3ZFLEdBQUcsT0FBTztnQkFDVjtvQkFDSSxJQUFJLEVBQUUsTUFBTTtvQkFDWixPQUFPLEVBQUUsTUFBTTtpQkFDbEI7YUFDSjtZQUNELFdBQVcsRUFBRSxHQUFHO1lBQ2hCLFVBQVUsRUFBRSxHQUFHO1NBQ2xCLENBQUMsQ0FBQztRQUVILE9BQU87WUFDSCxJQUFJLEVBQUUsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxPQUFPLElBQUksRUFBRTtZQUNuRCxLQUFLLEVBQUUsUUFBUSxDQUFDLEtBQUs7WUFDckIsUUFBUSxFQUFFLFFBQVE7WUFDbEIsS0FBSyxFQUFFLEtBQUs7U0FDZixDQUFBO0lBQ0wsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDYixPQUFPLENBQUMsS0FBSyxDQUFDLFlBQVksUUFBUSxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDbkQsTUFBTSxLQUFLLENBQUM7SUFDaEIsQ0FBQztBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTWVNURU1fUFJPTVBUIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgVG9rZW5KUyB9IGZyb20gJ3Rva2VuLmpzJztcbmltcG9ydCB7IE1PREVMUyB9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCB7IENhbGxMTE1BcmdzIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgdHlwZSB7IENvbXBsZXRpb25SZXNwb25zZSB9IGZyb20gJ3Rva2VuLmpzJztcbmltcG9ydCB7IFNlY3JldHNNYW5hZ2VyQ2xpZW50LCBHZXRTZWNyZXRWYWx1ZUNvbW1hbmQgfSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LXNlY3JldHMtbWFuYWdlclwiO1xuXG5jb25zdCBTRUNSRVRfTkFNRSA9ICdsbG0tcHJvdmlkZXItYXBpLWtleXMnO1xuXG5sZXQgY2FjaGVkQXBpS2V5czogUmVjb3JkPHN0cmluZywgc3RyaW5nPiB8IG51bGwgPSBudWxsO1xuXG5hc3luYyBmdW5jdGlvbiBsb2FkQXBpS2V5cygpIHtcbiAgICBpZiAoY2FjaGVkQXBpS2V5cykgcmV0dXJuIGNhY2hlZEFwaUtleXM7IFxuICBcbiAgICBjb25zdCBzZWNyZXRzTWFuYWdlciA9IG5ldyBTZWNyZXRzTWFuYWdlckNsaWVudCgpO1xuICAgIGNvbnN0IGNvbW1hbmQgPSBuZXcgR2V0U2VjcmV0VmFsdWVDb21tYW5kKHsgU2VjcmV0SWQ6IFNFQ1JFVF9OQU1FIH0pO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgc2VjcmV0c01hbmFnZXIuc2VuZChjb21tYW5kKTtcblxuICAgIGlmIChyZXNwb25zZSAmJiByZXNwb25zZS5TZWNyZXRTdHJpbmcpIHtcbiAgICAgICAgY2FjaGVkQXBpS2V5cyA9IEpTT04ucGFyc2UocmVzcG9uc2UuU2VjcmV0U3RyaW5nKTtcbiAgICB9XG4gIFxuICAgIHJldHVybjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gY2FsbExMTSh7IGhpc3RvcnksIHByb21wdCwgcHJvdmlkZXIsIG1vZGVsIH06IENhbGxMTE1BcmdzKTpcbiAgICBQcm9taXNlPHsgdGV4dDogc3RyaW5nLCB1c2FnZTogQ29tcGxldGlvblJlc3BvbnNlWyd1c2FnZSddLCBwcm92aWRlcjogc3RyaW5nLCBtb2RlbDogc3RyaW5nIH0+IHtcblxuICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGxvYWRBcGlLZXlzKCk7XG5cbiAgICAgICAgaWYgKGNhY2hlZEFwaUtleXMpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGNhY2hlZEFwaUtleXMpKSB7XG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5lbnZba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdG9rZW5qcyA9IG5ldyBUb2tlbkpTKCk7XG5cbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0b2tlbmpzLmNoYXQuY29tcGxldGlvbnMuY3JlYXRlKHtcbiAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlciBhcyBhbnksXG4gICAgICAgICAgICBtb2RlbDogbW9kZWwgfHwgTU9ERUxTW3Byb3ZpZGVyXVswXSxcbiAgICAgICAgICAgIG1lc3NhZ2VzOiBbXG4gICAgICAgICAgICAgICAgeyByb2xlOiAnc3lzdGVtJywgY29udGVudDogcHJvY2Vzcy5lbnYuU1lTVEVNX1BST01QVCB8fCBTWVNURU1fUFJPTVBUIH0sXG4gICAgICAgICAgICAgICAgLi4uaGlzdG9yeSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHJvbGU6ICd1c2VyJyxcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogcHJvbXB0LFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB0ZW1wZXJhdHVyZTogMC43LFxuICAgICAgICAgICAgbWF4X3Rva2VuczogNTAwXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0ZXh0OiByZXNwb25zZS5jaG9pY2VzPy5bMF0/Lm1lc3NhZ2U/LmNvbnRlbnQgfHwgJycsXG4gICAgICAgICAgICB1c2FnZTogcmVzcG9uc2UudXNhZ2UsXG4gICAgICAgICAgICBwcm92aWRlcjogcHJvdmlkZXIsXG4gICAgICAgICAgICBtb2RlbDogbW9kZWxcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIGluICR7cHJvdmlkZXJ9IGNhbGw6YCwgZXJyb3IpO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG59Il19