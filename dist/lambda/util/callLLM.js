"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = callLLM;
exports.callLLMWithGuardrail = callLLMWithGuardrail;
const constants_1 = require("./constants");
const token_js_1 = require("token.js");
const client_secrets_manager_1 = require("@aws-sdk/client-secrets-manager");
const simpleCache_1 = require("./simpleCache");
const semanticCache_1 = require("./semanticCache");
const vectorSearch_1 = require("./vectorSearch");
const checkGuardrails_1 = require("./checkGuardrails");
const calculateCost_1 = require("./calculateCost");
const getConfig_1 = require("./getConfig");
const SECRET_NAME = 'llm-provider-api-keys';
const CACHE_USAGE_OBJECT = {
    prompt_tokens: 0,
    completion_tokens: 0,
    total_tokens: 0,
};
let cachedApiKeys = null;
async function loadApiKeys() {
    if (cachedApiKeys)
        return cachedApiKeys;
    const secretsManager = new client_secrets_manager_1.SecretsManagerClient();
    const command = new client_secrets_manager_1.GetSecretValueCommand({ SecretId: SECRET_NAME });
    const response = await secretsManager.send(command);
    if (response && response.SecretString) {
        cachedApiKeys = JSON.parse(response.SecretString);
    }
    return;
}
async function callLLM({ history, prompt, provider, model, log, userId }) {
    try {
        const config = (0, getConfig_1.getConfig)();
        const simpleCacheResponse = config.cache.enableSimple
            ? await (0, simpleCache_1.checkSimpleCache)(prompt, userId, provider, model)
            : null;
        if (simpleCacheResponse) {
            log.cacheHit('simple');
            return {
                text: JSON.stringify(simpleCacheResponse),
                usage: CACHE_USAGE_OBJECT,
                provider,
                model,
                log: log.getLog(),
                simpleCacheHit: true,
            };
        }
        ;
        const requestEmbedding = config.cache.enableSemantic
            ? await (0, vectorSearch_1.getEmbedding)(prompt)
            : null;
        const semanticCacheResponse = config.cache.enableSemantic
            ? await (0, semanticCache_1.checkSemanticCache)(requestEmbedding, userId, provider, model)
            : null;
        if (semanticCacheResponse) {
            log.cacheHit('semantic');
            return {
                text: semanticCacheResponse,
                usage: CACHE_USAGE_OBJECT,
                provider,
                model,
                log: log.getLog(),
                semanticCacheHit: true
            };
        }
        await loadApiKeys();
        if (cachedApiKeys) {
            for (const [key, value] of Object.entries(cachedApiKeys)) {
                process.env[key] = value;
            }
        }
        const tokenjs = new token_js_1.TokenJS();
        const systemPrompt = process.env.SYSTEM_PROMPT || constants_1.SYSTEM_PROMPT;
        const response = await tokenjs.chat.completions.create({
            provider: provider,
            model: model,
            messages: [
                { role: 'system', content: systemPrompt },
                ...history,
                { role: 'user', content: prompt }
            ],
            temperature: 0.7,
            max_tokens: 500
        });
        let responseText = response.choices?.[0]?.message?.content || '';
        let tokensUsed = response.usage;
        const guardrailHit = config.guardrails.enabled
            ? await (0, checkGuardrails_1.checkGuardrails)(prompt, responseText, log)
            : { isBlocked: false };
        if (guardrailHit.isBlocked && guardrailHit.match) {
            if (config.guardrails.resendOnViolation) {
                const retryResponse = await callLLMWithGuardrail({
                    history,
                    prompt,
                    provider,
                    model,
                    log,
                    userId,
                    llmResponse: responseText,
                    match: guardrailHit.match,
                    embeddedPrompt: requestEmbedding
                });
                responseText = retryResponse.text;
                if (tokensUsed && retryResponse.usage) {
                    tokensUsed.prompt_tokens += retryResponse.usage?.prompt_tokens;
                    tokensUsed.completion_tokens += retryResponse.usage?.completion_tokens;
                }
            }
            else {
                responseText = config.guardrails.blockedContentResponse;
            }
        }
        // Asynchronously cache results
        if (config.cache.enableSimple)
            (0, simpleCache_1.addToSimpleCache)(prompt, responseText, userId, provider, model);
        if (config.cache.enableSemantic)
            (0, semanticCache_1.addToSemanticCache)(requestEmbedding, prompt, responseText, userId, provider, model);
        let cost;
        if (tokensUsed) {
            cost = (0, calculateCost_1.calculateCost)(provider, model, tokensUsed.prompt_tokens, tokensUsed.completion_tokens);
        }
        console.log('cost: ', cost);
        return {
            text: responseText,
            usage: tokensUsed,
            provider,
            model,
            log: log.getLog()
        };
    }
    catch (error) {
        console.error(`Error in ${provider} call:`, error);
        throw error;
    }
}
async function callLLMWithGuardrail({ history, prompt, provider, model, log, userId, llmResponse, match, embeddedPrompt }) {
    try {
        const config = (0, getConfig_1.getConfig)();
        const tokenjs = new token_js_1.TokenJS();
        log.guardrailRetry();
        const response = await tokenjs.chat.completions.create({
            provider: provider,
            model: model,
            messages: [
                { role: 'system', content: process.env.SYSTEM_PROMPT || constants_1.SYSTEM_PROMPT },
                ...history,
                {
                    role: 'user',
                    content: prompt,
                },
                {
                    role: 'system',
                    content: llmResponse,
                },
                {
                    role: 'user',
                    content: `I'd like a response that doesn't include the word or phrase ${match}. 
                    Can you please give me a different answer that doesn't include that sentiment?`
                }
            ],
            temperature: 0.7,
            max_tokens: 500
        });
        const responseText = response.choices?.[0]?.message?.content || '';
        const guardrailHit = await (0, checkGuardrails_1.checkGuardrails)(prompt, responseText, log);
        if (guardrailHit.isBlocked) {
            return {
                text: config.guardrails.blockedContentResponse,
                usage: response.usage,
            };
        }
        // don't await - no need to wait here
        (0, simpleCache_1.addToSimpleCache)(prompt, responseText, userId, provider, model);
        (0, semanticCache_1.addToSemanticCache)(embeddedPrompt, prompt, responseText, userId, provider, model);
        return {
            text: responseText,
            usage: response.usage,
        };
    }
    catch (error) {
        console.error(`Error in ${provider} call:`, error);
        throw error;
    }
}
//# sourceMappingURL=data:application/json;base64,