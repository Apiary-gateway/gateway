"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.logFailedRequest = exports.logSuccessfulRequest = void 0;
const client_s3_1 = require("@aws-sdk/client-s3");
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const uuid_1 = require("uuid");
const parquets = require("parquets");
const os = require("os");
const path = require("path");
const promises_1 = require("fs/promises");
const s3 = new client_s3_1.S3Client({});
const ddb = new client_dynamodb_1.DynamoDBClient({});
const LOG_BUCKET = process.env.LOG_BUCKET_NAME;
const LOG_TABLE_NAME = process.env.LOG_TABLE_NAME;
if (!LOG_BUCKET || !LOG_TABLE_NAME) {
    throw new Error('LOG_BUCKET_NAME and LOG_TABLE_NAME must be set');
}
process.on('warning', (warning) => {
    if (warning.name !== 'DeprecationWarning') {
        console.warn(warning);
    }
});
const saveLog = async (log, status) => {
    try {
        const now = new Date();
        const timestamp = now.toISOString(); // e.g., "2025-03-27T21:41:07.770Z"
        const thread_ts = timestamp;
        const latency = BigInt(Date.now() - log.requestStartTime);
        const date = timestamp.split('T')[0]; // "2025-03-27"
        const provider = log.provider ?? 'unknown';
        const model = log.model ?? 'unknown';
        const id = (0, uuid_1.v4)();
        const structuredLog = {
            id,
            thread_ts,
            timestamp,
            latency,
            provider,
            model,
            tokens_used: BigInt(log.tokens_used),
            cost: log.cost,
            raw_request: log.RawRequest,
            raw_response: log.RawResponse,
            error_message: log.errorMessage,
            status,
        };
        // Write to Parquet
        const schema = new parquets.ParquetSchema({
            id: { type: 'UTF8' },
            thread_ts: { type: 'UTF8' },
            timestamp: { type: 'UTF8' },
            latency: { type: 'INT64' },
            provider: { type: 'UTF8' },
            model: { type: 'UTF8' },
            tokens_used: { type: 'INT64' },
            cost: { type: 'DOUBLE' },
            raw_request: { type: 'UTF8' },
            raw_response: { type: 'UTF8', optional: true },
            error_message: { type: 'UTF8', optional: true },
            status: { type: 'UTF8' },
        });
        const tmpFilePath = path.join(os.tmpdir(), `${id}.parquet`);
        const writer = await parquets.ParquetWriter.openFile(schema, tmpFilePath);
        await writer.appendRow(structuredLog);
        await writer.close();
        const buffer = await (0, promises_1.readFile)(tmpFilePath);
        await (0, promises_1.unlink)(tmpFilePath);
        const key = `logs/parquet/status=${status}/date=${date}/provider=${provider}/model=${model}/${id}.parquet`;
        await s3.send(new client_s3_1.PutObjectCommand({
            Bucket: LOG_BUCKET,
            Key: key,
            Body: buffer,
            ContentType: 'application/octet-stream',
        }));
        // Write to DynamoDB with single-table design:
        // PK is a constant ("LOG") and SK is "TS#<timestamp>"
        await ddb.send(new client_dynamodb_1.PutItemCommand({
            TableName: LOG_TABLE_NAME,
            Item: {
                PK: { S: 'LOG' },
                SK: { S: `TS#${timestamp}` },
                id: { S: id },
                thread_ts: { S: thread_ts },
                timestamp: { S: timestamp },
                latency: { N: latency.toString() },
                provider: { S: provider },
                model: { S: model },
                tokens_used: { N: log.tokens_used.toString() },
                cost: { N: log.cost.toString() },
                raw_request: { S: log.RawRequest },
                raw_response: log.RawResponse
                    ? { S: log.RawResponse }
                    : { NULL: true },
                error_message: log.errorMessage
                    ? { S: log.errorMessage }
                    : { NULL: true },
                status: { S: status },
            },
        }));
    }
    catch (err) {
        console.error('[LogError] Failed to write log to S3 or DynamoDB:', err);
        throw err; // Optional: rethrow to allow caller to handle
    }
};
const logSuccessfulRequest = async (logData) => {
    console.log('[Success]', logData);
    await saveLog(logData, 'success');
};
exports.logSuccessfulRequest = logSuccessfulRequest;
const logFailedRequest = async (logData) => {
    console.error('[Failure]', logData);
    await saveLog(logData, 'failure');
};
exports.logFailedRequest = logFailedRequest;
//# sourceMappingURL=data:application/json;base64,