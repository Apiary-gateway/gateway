"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const validateRequest_1 = require("./util/validateRequest");
const extractRequestData_1 = require("./util/extractRequestData");
const getAndSaveMessages_1 = require("./util/getAndSaveMessages");
const routeRequest_1 = require("./util/routeRequest");
const logger_1 = require("./util/logger");
// import { parse } from 'path';
// import { calculateCost } from "./util/calculateCost";
const handler = async (event) => {
    const logger = new logger_1.Logger();
    logger.setRawRequest(JSON.stringify(event, null, 2));
    try {
        const payload = (0, validateRequest_1.validateRequest)(event);
        const { threadID, prompt, provider, model, userId } = (0, extractRequestData_1.extractRequestData)(payload);
        const metadata = (0, extractRequestData_1.extractRequestMetadata)(event, payload);
        logger.setInitialData(threadID, userId, JSON.stringify(metadata));
        const history = await (0, getAndSaveMessages_1.getMessageHistory)(threadID);
        const response = await (0, routeRequest_1.routeRequest)({
            history,
            prompt,
            provider,
            model,
            metadata,
        });
        await (0, getAndSaveMessages_1.saveMessages)(prompt, response.text, threadID);
        let successReason;
        if (response.semanticCacheHit) {
            successReason = 'SIMPLE_CACHE_HIT';
        }
        else if (response.semanticCacheHit) {
            successReason = 'SEMANTIC_CACHE_HIT';
        }
        else {
            successReason = 'LLM_RESPONSE';
        }
        logger.logSuccessData(response.model, response.provider, response.log, successReason, JSON.stringify(response, null, 2));
        return {
            statusCode: 200,
            headers: {
                'simple-cache': `${response.simpleCacheHit ? 'HIT' : 'MISS'}`,
                'semantic-cache': `${response.semanticCacheHit ? 'HIT' : 'MISS'}`,
            },
            body: JSON.stringify({
                threadID,
                response,
            }),
        };
    }
    catch (error) {
        const errorMessage = error instanceof Error ? error.message : 'Unknown Error';
        logger.logErrorData('Unknown Error Reason', errorMessage);
        return {
            statusCode: 500,
            body: JSON.stringify({
                error: errorMessage,
            }),
        };
    }
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGFtYmRhL3JvdXRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw0REFBeUQ7QUFDekQsa0VBR21DO0FBQ25DLGtFQUE0RTtBQUM1RSxzREFBbUQ7QUFDbkQsMENBQXVDO0FBR3ZDLGdDQUFnQztBQUNoQyx3REFBd0Q7QUFFakQsTUFBTSxPQUFPLEdBQUcsS0FBSyxFQUFFLEtBQWMsRUFBRSxFQUFFO0lBQzlDLE1BQU0sTUFBTSxHQUFHLElBQUksZUFBTSxFQUFFLENBQUM7SUFDNUIsTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNyRCxJQUFJLENBQUM7UUFDSCxNQUFNLE9BQU8sR0FBRyxJQUFBLGlDQUFlLEVBQUMsS0FBSyxDQUFDLENBQUM7UUFDdkMsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsR0FDakQsSUFBQSx1Q0FBa0IsRUFBQyxPQUFPLENBQUMsQ0FBQztRQUM5QixNQUFNLFFBQVEsR0FBRyxJQUFBLDJDQUFzQixFQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztRQUV4RCxNQUFNLENBQUMsY0FBYyxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBRWxFLE1BQU0sT0FBTyxHQUFHLE1BQU0sSUFBQSxzQ0FBaUIsRUFBQyxRQUFRLENBQUMsQ0FBQztRQUNsRCxNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUEsMkJBQVksRUFBQztZQUNsQyxPQUFPO1lBQ1AsTUFBTTtZQUNOLFFBQVE7WUFDUixLQUFLO1lBQ0wsUUFBUTtTQUNULENBQUMsQ0FBQztRQUVILE1BQU0sSUFBQSxpQ0FBWSxFQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBRXBELElBQUksYUFBYSxDQUFDO1FBRWxCLElBQUksUUFBUSxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDOUIsYUFBYSxHQUFHLGtCQUFrQixDQUFDO1FBQ3JDLENBQUM7YUFBTSxJQUFJLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1lBQ3JDLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQztRQUN2QyxDQUFDO2FBQU0sQ0FBQztZQUNOLGFBQWEsR0FBRyxjQUFjLENBQUM7UUFDakMsQ0FBQztRQUVELE1BQU0sQ0FBQyxjQUFjLENBQ25CLFFBQVEsQ0FBQyxLQUFLLEVBQ2QsUUFBUSxDQUFDLFFBQVEsRUFDakIsUUFBUSxDQUFDLEdBQUcsRUFDWixhQUFhLEVBQ2IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUNsQyxDQUFDO1FBQ0YsT0FBTztZQUNMLFVBQVUsRUFBRSxHQUFHO1lBQ2YsT0FBTyxFQUFFO2dCQUNQLGNBQWMsRUFBRSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFO2dCQUM3RCxnQkFBZ0IsRUFBRSxHQUFHLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUU7YUFDbEU7WUFDRCxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQztnQkFDbkIsUUFBUTtnQkFDUixRQUFRO2FBQ1QsQ0FBQztTQUNILENBQUM7SUFDSixDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNmLE1BQU0sWUFBWSxHQUNoQixLQUFLLFlBQVksS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUM7UUFFM0QsTUFBTSxDQUFDLFlBQVksQ0FBQyxzQkFBc0IsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUMxRCxPQUFPO1lBQ0wsVUFBVSxFQUFFLEdBQUc7WUFDZixJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQztnQkFDbkIsS0FBSyxFQUFFLFlBQVk7YUFDcEIsQ0FBQztTQUNILENBQUM7SUFDSixDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBOURXLFFBQUEsT0FBTyxXQThEbEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB2YWxpZGF0ZVJlcXVlc3QgfSBmcm9tICcuL3V0aWwvdmFsaWRhdGVSZXF1ZXN0JztcbmltcG9ydCB7XG4gIGV4dHJhY3RSZXF1ZXN0RGF0YSxcbiAgZXh0cmFjdFJlcXVlc3RNZXRhZGF0YSxcbn0gZnJvbSAnLi91dGlsL2V4dHJhY3RSZXF1ZXN0RGF0YSc7XG5pbXBvcnQgeyBnZXRNZXNzYWdlSGlzdG9yeSwgc2F2ZU1lc3NhZ2VzIH0gZnJvbSAnLi91dGlsL2dldEFuZFNhdmVNZXNzYWdlcyc7XG5pbXBvcnQgeyByb3V0ZVJlcXVlc3QgfSBmcm9tICcuL3V0aWwvcm91dGVSZXF1ZXN0JztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4vdXRpbC9sb2dnZXInO1xuaW1wb3J0IHsgaXNWYWxpZE1vZGVsRm9yUHJvdmlkZXIgfSBmcm9tICcuL3V0aWwvbW9kZWxWYWxpZGF0aW9uJztcbmltcG9ydCB7IGxvZyB9IGZyb20gJ2NvbnNvbGUnO1xuLy8gaW1wb3J0IHsgcGFyc2UgfSBmcm9tICdwYXRoJztcbi8vIGltcG9ydCB7IGNhbGN1bGF0ZUNvc3QgfSBmcm9tIFwiLi91dGlsL2NhbGN1bGF0ZUNvc3RcIjtcblxuZXhwb3J0IGNvbnN0IGhhbmRsZXIgPSBhc3luYyAoZXZlbnQ6IHVua25vd24pID0+IHtcbiAgY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcigpO1xuICBsb2dnZXIuc2V0UmF3UmVxdWVzdChKU09OLnN0cmluZ2lmeShldmVudCwgbnVsbCwgMikpO1xuICB0cnkge1xuICAgIGNvbnN0IHBheWxvYWQgPSB2YWxpZGF0ZVJlcXVlc3QoZXZlbnQpO1xuICAgIGNvbnN0IHsgdGhyZWFkSUQsIHByb21wdCwgcHJvdmlkZXIsIG1vZGVsLCB1c2VySWQgfSA9XG4gICAgICBleHRyYWN0UmVxdWVzdERhdGEocGF5bG9hZCk7XG4gICAgY29uc3QgbWV0YWRhdGEgPSBleHRyYWN0UmVxdWVzdE1ldGFkYXRhKGV2ZW50LCBwYXlsb2FkKTtcblxuICAgIGxvZ2dlci5zZXRJbml0aWFsRGF0YSh0aHJlYWRJRCwgdXNlcklkLCBKU09OLnN0cmluZ2lmeShtZXRhZGF0YSkpO1xuXG4gICAgY29uc3QgaGlzdG9yeSA9IGF3YWl0IGdldE1lc3NhZ2VIaXN0b3J5KHRocmVhZElEKTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJvdXRlUmVxdWVzdCh7XG4gICAgICBoaXN0b3J5LFxuICAgICAgcHJvbXB0LFxuICAgICAgcHJvdmlkZXIsXG4gICAgICBtb2RlbCxcbiAgICAgIG1ldGFkYXRhLFxuICAgIH0pO1xuXG4gICAgYXdhaXQgc2F2ZU1lc3NhZ2VzKHByb21wdCwgcmVzcG9uc2UudGV4dCwgdGhyZWFkSUQpO1xuXG4gICAgbGV0IHN1Y2Nlc3NSZWFzb247XG5cbiAgICBpZiAocmVzcG9uc2Uuc2VtYW50aWNDYWNoZUhpdCkge1xuICAgICAgc3VjY2Vzc1JlYXNvbiA9ICdTSU1QTEVfQ0FDSEVfSElUJztcbiAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLnNlbWFudGljQ2FjaGVIaXQpIHtcbiAgICAgIHN1Y2Nlc3NSZWFzb24gPSAnU0VNQU5USUNfQ0FDSEVfSElUJztcbiAgICB9IGVsc2Uge1xuICAgICAgc3VjY2Vzc1JlYXNvbiA9ICdMTE1fUkVTUE9OU0UnO1xuICAgIH1cblxuICAgIGxvZ2dlci5sb2dTdWNjZXNzRGF0YShcbiAgICAgIHJlc3BvbnNlLm1vZGVsLFxuICAgICAgcmVzcG9uc2UucHJvdmlkZXIsXG4gICAgICByZXNwb25zZS5sb2csXG4gICAgICBzdWNjZXNzUmVhc29uLFxuICAgICAgSlNPTi5zdHJpbmdpZnkocmVzcG9uc2UsIG51bGwsIDIpXG4gICAgKTtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhdHVzQ29kZTogMjAwLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnc2ltcGxlLWNhY2hlJzogYCR7cmVzcG9uc2Uuc2ltcGxlQ2FjaGVIaXQgPyAnSElUJyA6ICdNSVNTJ31gLFxuICAgICAgICAnc2VtYW50aWMtY2FjaGUnOiBgJHtyZXNwb25zZS5zZW1hbnRpY0NhY2hlSGl0ID8gJ0hJVCcgOiAnTUlTUyd9YCxcbiAgICAgIH0sXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIHRocmVhZElELFxuICAgICAgICByZXNwb25zZSxcbiAgICAgIH0pLFxuICAgIH07XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc3QgZXJyb3JNZXNzYWdlID1cbiAgICAgIGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gRXJyb3InO1xuXG4gICAgbG9nZ2VyLmxvZ0Vycm9yRGF0YSgnVW5rbm93biBFcnJvciBSZWFzb24nLCBlcnJvck1lc3NhZ2UpO1xuICAgIHJldHVybiB7XG4gICAgICBzdGF0dXNDb2RlOiA1MDAsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIGVycm9yOiBlcnJvck1lc3NhZ2UsXG4gICAgICB9KSxcbiAgICB9O1xuICB9XG59O1xuIl19