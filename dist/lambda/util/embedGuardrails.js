"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.embedAndIndexGuardrails = embedAndIndexGuardrails;
const client_s3_1 = require("@aws-sdk/client-s3");
const vectorSearch_1 = require("./vectorSearch");
const retryWithBackoff_1 = require("./retryWithBackoff");
const s3 = new client_s3_1.S3Client({ region: process.env.AWS_REGION });
async function embedAndIndexGuardrails({ bucket, key }) {
    const command = new client_s3_1.GetObjectCommand({ Bucket: bucket, Key: key });
    const response = await s3.send(command);
    const streamToString = (stream) => new Promise((resolve, reject) => {
        const chunks = [];
        stream.on("data", (chunk) => chunks.push(chunk));
        stream.on("end", () => resolve(Buffer.concat(chunks).toString("utf-8")));
        stream.on("error", reject);
    });
    const json = await streamToString(response.Body);
    const utterances = JSON.parse(json);
    for (const utterance of utterances) {
        const embedding = await (0, retryWithBackoff_1.retryWithBackoff)(() => (0, vectorSearch_1.getEmbedding)(utterance));
        await (0, retryWithBackoff_1.retryWithBackoff)(() => (0, vectorSearch_1.indexVector)("guardrails-index", {
            text: utterance,
            embedding,
        }));
    }
    console.log(`âœ… Indexed ${utterances.length} guardrail utterances`);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1iZWRHdWFyZHJhaWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGFtYmRhL3V0aWwvZW1iZWRHdWFyZHJhaWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBT0EsMERBeUJDO0FBaENELGtEQUFnRTtBQUNoRSxpREFBMkQ7QUFDM0QseURBQXNEO0FBR3RELE1BQU0sRUFBRSxHQUFHLElBQUksb0JBQVEsQ0FBQyxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7QUFFckQsS0FBSyxVQUFVLHVCQUF1QixDQUFDLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBcUI7SUFFOUUsTUFBTSxPQUFPLEdBQUcsSUFBSSw0QkFBZ0IsQ0FBQyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDbkUsTUFBTSxRQUFRLEdBQUcsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRXhDLE1BQU0sY0FBYyxHQUFHLENBQUMsTUFBVyxFQUFtQixFQUFFLENBQ3RELElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1FBQzlCLE1BQU0sTUFBTSxHQUFpQixFQUFFLENBQUM7UUFDaEMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFpQixFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDN0QsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6RSxNQUFNLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM3QixDQUFDLENBQUMsQ0FBQztJQUVMLE1BQU0sSUFBSSxHQUFHLE1BQU0sY0FBYyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqRCxNQUFNLFVBQVUsR0FBYSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRTlDLEtBQUssTUFBTSxTQUFTLElBQUksVUFBVSxFQUFFLENBQUM7UUFDbkMsTUFBTSxTQUFTLEdBQUcsTUFBTSxJQUFBLG1DQUFnQixFQUFDLEdBQUcsRUFBRSxDQUFDLElBQUEsMkJBQVksRUFBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ3hFLE1BQU0sSUFBQSxtQ0FBZ0IsRUFBQyxHQUFHLEVBQUUsQ0FBQyxJQUFBLDBCQUFXLEVBQUMsa0JBQWtCLEVBQUU7WUFDM0QsSUFBSSxFQUFFLFNBQVM7WUFDZixTQUFTO1NBQ1YsQ0FBQyxDQUFDLENBQUM7SUFDTixDQUFDO0lBRUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLFVBQVUsQ0FBQyxNQUFNLHVCQUF1QixDQUFDLENBQUM7QUFDckUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFMzQ2xpZW50LCBHZXRPYmplY3RDb21tYW5kIH0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1zM1wiO1xuaW1wb3J0IHsgZ2V0RW1iZWRkaW5nLCBpbmRleFZlY3RvciB9IGZyb20gXCIuL3ZlY3RvclNlYXJjaFwiO1xuaW1wb3J0IHsgcmV0cnlXaXRoQmFja29mZiB9IGZyb20gXCIuL3JldHJ5V2l0aEJhY2tvZmZcIjtcbmltcG9ydCB7IEd1YXJkcmFpbFMzUGFyYW1zIH0gZnJvbSBcIi4vdHlwZXNcIjtcblxuY29uc3QgczMgPSBuZXcgUzNDbGllbnQoeyByZWdpb246IHByb2Nlc3MuZW52LkFXU19SRUdJT04gfSk7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBlbWJlZEFuZEluZGV4R3VhcmRyYWlscyh7IGJ1Y2tldCwga2V5IH06IEd1YXJkcmFpbFMzUGFyYW1zKSB7XG5cbiAgY29uc3QgY29tbWFuZCA9IG5ldyBHZXRPYmplY3RDb21tYW5kKHsgQnVja2V0OiBidWNrZXQsIEtleToga2V5IH0pO1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHMzLnNlbmQoY29tbWFuZCk7XG5cbiAgY29uc3Qgc3RyZWFtVG9TdHJpbmcgPSAoc3RyZWFtOiBhbnkpOiBQcm9taXNlPHN0cmluZz4gPT5cbiAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBjaHVua3M6IFVpbnQ4QXJyYXlbXSA9IFtdO1xuICAgICAgc3RyZWFtLm9uKFwiZGF0YVwiLCAoY2h1bms6IFVpbnQ4QXJyYXkpID0+IGNodW5rcy5wdXNoKGNodW5rKSk7XG4gICAgICBzdHJlYW0ub24oXCJlbmRcIiwgKCkgPT4gcmVzb2x2ZShCdWZmZXIuY29uY2F0KGNodW5rcykudG9TdHJpbmcoXCJ1dGYtOFwiKSkpO1xuICAgICAgc3RyZWFtLm9uKFwiZXJyb3JcIiwgcmVqZWN0KTtcbiAgICB9KTtcblxuICBjb25zdCBqc29uID0gYXdhaXQgc3RyZWFtVG9TdHJpbmcocmVzcG9uc2UuQm9keSk7XG4gIGNvbnN0IHV0dGVyYW5jZXM6IHN0cmluZ1tdID0gSlNPTi5wYXJzZShqc29uKTtcblxuICBmb3IgKGNvbnN0IHV0dGVyYW5jZSBvZiB1dHRlcmFuY2VzKSB7XG4gICAgY29uc3QgZW1iZWRkaW5nID0gYXdhaXQgcmV0cnlXaXRoQmFja29mZigoKSA9PiBnZXRFbWJlZGRpbmcodXR0ZXJhbmNlKSk7XG4gICAgYXdhaXQgcmV0cnlXaXRoQmFja29mZigoKSA9PiBpbmRleFZlY3RvcihcImd1YXJkcmFpbHMtaW5kZXhcIiwge1xuICAgICAgdGV4dDogdXR0ZXJhbmNlLFxuICAgICAgZW1iZWRkaW5nLFxuICAgIH0pKTtcbiAgfVxuXG4gIGNvbnNvbGUubG9nKGDinIUgSW5kZXhlZCAke3V0dGVyYW5jZXMubGVuZ3RofSBndWFyZHJhaWwgdXR0ZXJhbmNlc2ApO1xufVxuIl19