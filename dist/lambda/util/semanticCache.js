"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkSemanticCache = checkSemanticCache;
exports.addToSemanticCache = addToSemanticCache;
const axios_1 = require("axios");
const vectorSearch_1 = require("./vectorSearch");
const getConfig_1 = require("./getConfig");
const client_scheduler_1 = require("@aws-sdk/client-scheduler");
const uuid_1 = require("uuid");
// TODO
// Check supported Bedrock regions and validate regional support in CDK stack
// test different embedding sizes? 1024, 512, and 256 options for Titan v2
// if embedding request fails, just move on - right? 
// include cache hit or miss header in response from `router`
// format cached response better - ex. tokens used = 0
const indexName = process.env.OPENSEARCH_INDEX;
const CACHE_TTL_MS = 5 * 60 * 1000; // 5 minutes
async function checkSemanticCache(requestEmbedding, userId, provider, model) {
    const config = (0, getConfig_1.getConfig)();
    const similarityThreshold = config.cache.semanticCacheThreshold;
    [userId, provider, model] = getFilters(userId, provider, model);
    // KNN is K-nearest neighbors, where K is number of nearest neighbors to get  
    const knnQuery = {
        size: 1,
        query: {
            knn: {
                embedding: {
                    vector: requestEmbedding,
                    k: 1
                }
            }
        },
        post_filter: {
            bool: {
                must: [
                    { term: { userId: { value: userId } } },
                    { term: { provider: { value: provider } } },
                    { term: { model: { value: model } } },
                ]
            }
        }
    };
    const response = await (0, vectorSearch_1.signedPost)(`/${indexName}/_search`, knnQuery);
    const topHit = response.hits?.hits?.[0];
    const similarityScore = topHit?._score;
    return similarityScore && similarityScore >= similarityThreshold ?
        topHit._source.llmResponse : null;
}
async function addToSemanticCache(embedding, prompt, llmResponse, userId, provider, model) {
    try {
        [userId, provider, model] = getFilters(userId, provider, model);
        const response = await (0, vectorSearch_1.signedPost)(`/${indexName}/_doc`, {
            userId,
            provider,
            model,
            embedding,
            requestText: prompt,
            llmResponse,
            timestamp: new Date().toISOString()
        });
        await scheduleDelete(response._id);
        console.log('successfully added to semantic cache: ', JSON.stringify(response));
    }
    catch (err) {
        if (err instanceof axios_1.AxiosError) {
            console.log('Axios error in addToSemanticCache: ', err.response?.data);
        }
        else {
            console.log('error in addToSemanticCache: ', err);
        }
    }
}
async function scheduleDelete(documentId) {
    console.log(`scheduling delete for document: ${documentId}`);
    const scheduler = new client_scheduler_1.SchedulerClient({});
    let runAt = new Date(Date.now() + CACHE_TTL_MS).toISOString();
    const runAtFormatMatch = runAt.match(/\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}/);
    if (runAtFormatMatch) {
        runAt = runAtFormatMatch[0];
    }
    ;
    const command = new client_scheduler_1.CreateScheduleCommand({
        Name: `delete-doc-${(0, uuid_1.v4)()}`,
        ScheduleExpression: `at(${runAt})`,
        FlexibleTimeWindow: { Mode: "OFF" },
        Target: {
            Arn: process.env.DELETE_DOCUMENT_LAMBDA_ARN,
            RoleArn: process.env.SCHEDULER_ROLE_ARN,
            Input: JSON.stringify({ documentId }),
        },
    });
    const response = await scheduler.send(command);
    console.log(`Document scheduled for deletion. Scheduler response: ${JSON.stringify(response)}`);
    return {
        message: `Document scheduled for deletion. Scheduler response: ${JSON.stringify(response)}`,
    };
}
function getFilters(userId, provider, model) {
    userId = userId ? userId : 'global';
    provider = provider ? provider : '';
    model = model ? model : '';
    return [userId, provider, model];
}
/*
Known working OSS endpoints:
  * '/semantic-cache-index' (GET request returns index schema)
  * '/semantic-cache-index/_search'
  *
*/
//# sourceMappingURL=data:application/json;base64,