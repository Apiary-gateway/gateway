"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetLogsResponseSchema = void 0;
const zod_1 = require("zod");
// Schema for `prompt_tokens_details` and `completion_tokens_details` inside `usage`
// const TokenDetailsSchema = z.object({
//   cached_tokens: z.number(),
//   audio_tokens: z.number(),
// });
// const CompletionTokenDetailsSchema = z.object({
//   reasoning_tokens: z.number(),
//   audio_tokens: z.number(),
//   accepted_prediction_tokens: z.number(),
//   rejected_prediction_tokens: z.number(),
// });
// Schema for `usage` inside `raw_response`
const UsageSchema = zod_1.z.object({
    prompt_tokens: zod_1.z.number(),
    completion_tokens: zod_1.z.number(),
    total_tokens: zod_1.z.number(),
    // prompt_tokens_details: TokenDetailsSchema,
    // completion_tokens_details: CompletionTokenDetailsSchema,
});
// Schema for `raw_response`
const RawResponseSchema = zod_1.z.object({
    text: zod_1.z.string(),
    usage: UsageSchema,
    provider: zod_1.z.string().optional(),
    model: zod_1.z.string().optional(),
});
// Schema for `body` inside `raw_request`
const RequestBodySchema = zod_1.z.object({
    prompt: zod_1.z.string(),
    provider: zod_1.z.string().optional(),
    model: zod_1.z.string().optional(),
});
// Schema for `identity` inside `requestContext`
// const IdentitySchema = z.object({
//   cognitoIdentityPoolId: z.string().nullable(),
//   cognitoIdentityId: z.string().nullable(),
//   apiKey: z.string(),
//   principalOrgId: z.string().nullable(),
//   cognitoAuthenticationType: z.string().nullable(),
//   userArn: z.string().nullable(),
//   apiKeyId: z.string(),
//   userAgent: z.string(),
//   accountId: z.string().nullable(),
//   caller: z.string().nullable(),
//   sourceIp: z.string(),
//   accessKey: z.string().nullable(),
//   cognitoAuthenticationProvider: z.string().nullable(),
//   user: z.string().nullable(),
// });
// Schema for `requestContext` inside `raw_request`
// const RequestContextSchema = z.object({
//   resourceId: z.string(),
//   resourcePath: z.string(),
//   httpMethod: z.string(),
//   extendedRequestId: z.string(),
//   requestTime: z.string(),
//   path: z.string(),
//   accountId: z.string(),
//   protocol: z.string(),
//   stage: z.string(),
//   domainPrefix: z.string(),
//   requestTimeEpoch: z.number(),
//   requestId: z.string(),
//   identity: IdentitySchema,
//   domainName: z.string(),
//   deploymentId: z.string(),
//   apiId: z.string(),
// });
// Schema for `raw_request`
const RawRequestSchema = zod_1.z.object({
    resource: zod_1.z.string(),
    path: zod_1.z.string(),
    httpMethod: zod_1.z.string(),
    headers: zod_1.z.record(zod_1.z.string(), zod_1.z.string()),
    multiValueHeaders: zod_1.z.record(zod_1.z.string(), zod_1.z.array(zod_1.z.string())),
    queryStringParameters: zod_1.z.record(zod_1.z.string(), zod_1.z.string()).nullable(),
    multiValueQueryStringParameters: zod_1.z
        .record(zod_1.z.string(), zod_1.z.array(zod_1.z.string()))
        .nullable(),
    pathParameters: zod_1.z.record(zod_1.z.string(), zod_1.z.string()).nullable(),
    stageVariables: zod_1.z.record(zod_1.z.string(), zod_1.z.string()).nullable(),
    // requestContext: RequestContextSchema,
    body: zod_1.z.string().transform((str) => RequestBodySchema.parse(JSON.parse(str))),
    isBase64Encoded: zod_1.z.boolean(),
});
// Schema for each log entry
const LogEntrySchema = zod_1.z.object({
    id: zod_1.z.string(),
    thread_ts: zod_1.z.string(),
    timestamp: zod_1.z.string(),
    latency: zod_1.z.string().transform((str) => Number(str)),
    provider: zod_1.z.string(),
    model: zod_1.z.string(),
    tokens_used: zod_1.z.string().transform((str) => Number(str)),
    cost: zod_1.z.string().transform((str) => Number(str)),
    raw_request: zod_1.z
        .string()
        .transform((str) => RawRequestSchema.parse(JSON.parse(str))),
    raw_response: zod_1.z
        .string()
        .nullable()
        .transform((str) => str ? RawResponseSchema.parse(JSON.parse(str)) : null),
    error_message: zod_1.z.string().nullable(),
    status: zod_1.z.string(),
});
// Schema for the inner logs response (previously the top-level schema)
const LogsResponseSchema = zod_1.z.object({
    logs: zod_1.z.array(LogEntrySchema),
    page: zod_1.z.number(),
    pageSize: zod_1.z.number(),
    nextToken: zod_1.z.string().nullable(),
});
// Schema for the outer API response
exports.GetLogsResponseSchema = zod_1.z.object({
    statusCode: zod_1.z.number(),
    body: zod_1.z
        .string()
        .transform((str) => LogsResponseSchema.parse(JSON.parse(str))),
});
//# sourceMappingURL=data:application/json;base64,