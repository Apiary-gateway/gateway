"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMessageHistory = getMessageHistory;
exports.saveMessage = saveMessage;
exports.saveMessages = saveMessages;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const util_dynamodb_1 = require("@aws-sdk/util-dynamodb");
const dynamoClient = new client_dynamodb_1.DynamoDBClient({});
async function getMessageHistory(threadID) {
    const command = new client_dynamodb_1.QueryCommand({
        TableName: process.env.MESSAGE_TABLE_NAME,
        KeyConditionExpression: 'threadID = :threadID',
        ExpressionAttributeValues: {
            ':threadID': { S: threadID },
        },
        ExpressionAttributeNames: {
            '#r': 'role',
            '#c': 'content',
        },
        ProjectionExpression: '#r, #c',
        ScanIndexForward: true,
    });
    try {
        const result = await dynamoClient.send(command);
        return result.Items?.map(item => (0, util_dynamodb_1.unmarshall)(item)) || [];
    }
    catch (error) {
        console.log('Error getting message history: ', error);
        throw error;
    }
}
async function saveMessage(message) {
    const timestamp = Date.now();
    const item = { ...message, timestamp };
    const command = new client_dynamodb_1.PutItemCommand({
        TableName: process.env.MESSAGE_TABLE_NAME,
        Item: (0, util_dynamodb_1.marshall)(item),
    });
    try {
        await dynamoClient.send(command);
    }
    catch (error) {
        console.log('Error saving message: ', error);
        throw error;
    }
}
async function saveMessages(userPrompt, assistantResponse, threadID) {
    const userMessage = {
        threadID: threadID,
        role: 'user',
        content: userPrompt,
    };
    const assistantMessage = {
        threadID: threadID,
        role: 'assistant',
        content: assistantResponse,
    };
    await saveMessage(userMessage);
    await saveMessage(assistantMessage);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0QW5kU2F2ZU1lc3NhZ2VzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGFtYmRhL3V0aWwvZ2V0QW5kU2F2ZU1lc3NhZ2VzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBTUEsOENBd0JDO0FBRUQsa0NBZ0JDO0FBRUQsb0NBZUM7QUFqRUQsOERBQXdGO0FBQ3hGLDBEQUE4RDtBQUc5RCxNQUFNLFlBQVksR0FBRyxJQUFJLGdDQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7QUFFckMsS0FBSyxVQUFVLGlCQUFpQixDQUFDLFFBQWdCO0lBRXBELE1BQU0sT0FBTyxHQUFHLElBQUksOEJBQVksQ0FBQztRQUM3QixTQUFTLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0I7UUFDekMsc0JBQXNCLEVBQUUsc0JBQXNCO1FBQzlDLHlCQUF5QixFQUFFO1lBQ3ZCLFdBQVcsRUFBRSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUU7U0FDL0I7UUFDRCx3QkFBd0IsRUFBRTtZQUN0QixJQUFJLEVBQUUsTUFBTTtZQUNaLElBQUksRUFBRSxTQUFTO1NBQ2xCO1FBQ0Qsb0JBQW9CLEVBQUUsUUFBUTtRQUM5QixnQkFBZ0IsRUFBRSxJQUFJO0tBQ3pCLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQztRQUNELE1BQU0sTUFBTSxHQUFHLE1BQU0sWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNoRCxPQUFPLE1BQU0sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBQSwwQkFBVSxFQUFDLElBQUksQ0FBb0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNoRixDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNiLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUNBQWlDLEVBQUUsS0FBSyxDQUFDLENBQUE7UUFDckQsTUFBTSxLQUFLLENBQUM7SUFDaEIsQ0FBQztBQUVMLENBQUM7QUFFTSxLQUFLLFVBQVUsV0FBVyxDQUFDLE9BQTJDO0lBQ3pFLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUM3QixNQUFNLElBQUksR0FBb0IsRUFBRSxHQUFHLE9BQU8sRUFBRSxTQUFTLEVBQUUsQ0FBQztJQUV4RCxNQUFNLE9BQU8sR0FBRyxJQUFJLGdDQUFjLENBQUM7UUFDL0IsU0FBUyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCO1FBQ3pDLElBQUksRUFBRSxJQUFBLHdCQUFRLEVBQUMsSUFBSSxDQUFDO0tBQ3ZCLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQztRQUNELE1BQU0sWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNiLE9BQU8sQ0FBQyxHQUFHLENBQUMsd0JBQXdCLEVBQUUsS0FBSyxDQUFDLENBQUE7UUFDNUMsTUFBTSxLQUFLLENBQUM7SUFDaEIsQ0FBQztBQUVMLENBQUM7QUFFTSxLQUFLLFVBQVUsWUFBWSxDQUFDLFVBQWtCLEVBQUUsaUJBQXlCLEVBQUUsUUFBZ0I7SUFDOUYsTUFBTSxXQUFXLEdBQXVDO1FBQ3BELFFBQVEsRUFBRSxRQUFRO1FBQ2xCLElBQUksRUFBRSxNQUFNO1FBQ1osT0FBTyxFQUFFLFVBQVU7S0FDdEIsQ0FBQTtJQUVELE1BQU0sZ0JBQWdCLEdBQXVDO1FBQ3pELFFBQVEsRUFBRSxRQUFRO1FBQ2xCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE9BQU8sRUFBRSxpQkFBaUI7S0FDN0IsQ0FBQTtJQUVELE1BQU0sV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQy9CLE1BQU0sV0FBVyxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDeEMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IER5bmFtb0RCQ2xpZW50LCBQdXRJdGVtQ29tbWFuZCwgUXVlcnlDb21tYW5kIH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LWR5bmFtb2RiJztcbmltcG9ydCB7IG1hcnNoYWxsLCB1bm1hcnNoYWxsIH0gZnJvbSAnQGF3cy1zZGsvdXRpbC1keW5hbW9kYic7XG5pbXBvcnQgeyBJbnRlcm5hbE1lc3NhZ2UgfSBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgZHluYW1vQ2xpZW50ID0gbmV3IER5bmFtb0RCQ2xpZW50KHt9KTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldE1lc3NhZ2VIaXN0b3J5KHRocmVhZElEOiBzdHJpbmcpOiBQcm9taXNlPEludGVybmFsTWVzc2FnZVtdPiB7XG5cbiAgICBjb25zdCBjb21tYW5kID0gbmV3IFF1ZXJ5Q29tbWFuZCh7XG4gICAgICAgIFRhYmxlTmFtZTogcHJvY2Vzcy5lbnYuTUVTU0FHRV9UQUJMRV9OQU1FLFxuICAgICAgICBLZXlDb25kaXRpb25FeHByZXNzaW9uOiAndGhyZWFkSUQgPSA6dGhyZWFkSUQnLFxuICAgICAgICBFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzOiB7XG4gICAgICAgICAgICAnOnRocmVhZElEJzogeyBTOiB0aHJlYWRJRCB9LFxuICAgICAgICB9LFxuICAgICAgICBFeHByZXNzaW9uQXR0cmlidXRlTmFtZXM6IHtcbiAgICAgICAgICAgICcjcic6ICdyb2xlJyxcbiAgICAgICAgICAgICcjYyc6ICdjb250ZW50JyxcbiAgICAgICAgfSxcbiAgICAgICAgUHJvamVjdGlvbkV4cHJlc3Npb246ICcjciwgI2MnLFxuICAgICAgICBTY2FuSW5kZXhGb3J3YXJkOiB0cnVlLFxuICAgIH0pO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZHluYW1vQ2xpZW50LnNlbmQoY29tbWFuZCk7XG4gICAgICAgIHJldHVybiByZXN1bHQuSXRlbXM/Lm1hcChpdGVtID0+IHVubWFyc2hhbGwoaXRlbSkgYXMgSW50ZXJuYWxNZXNzYWdlKSB8fCBbXTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmxvZygnRXJyb3IgZ2V0dGluZyBtZXNzYWdlIGhpc3Rvcnk6ICcsIGVycm9yKVxuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG5cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNhdmVNZXNzYWdlKG1lc3NhZ2U6IE9taXQ8SW50ZXJuYWxNZXNzYWdlLCAndGltZXN0YW1wJz4pIHtcbiAgICBjb25zdCB0aW1lc3RhbXAgPSBEYXRlLm5vdygpO1xuICAgIGNvbnN0IGl0ZW06IEludGVybmFsTWVzc2FnZSA9IHsgLi4ubWVzc2FnZSwgdGltZXN0YW1wIH07XG5cbiAgICBjb25zdCBjb21tYW5kID0gbmV3IFB1dEl0ZW1Db21tYW5kKHtcbiAgICAgICAgVGFibGVOYW1lOiBwcm9jZXNzLmVudi5NRVNTQUdFX1RBQkxFX05BTUUsXG4gICAgICAgIEl0ZW06IG1hcnNoYWxsKGl0ZW0pLFxuICAgIH0pO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgZHluYW1vQ2xpZW50LnNlbmQoY29tbWFuZCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0Vycm9yIHNhdmluZyBtZXNzYWdlOiAnLCBlcnJvcilcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICAgIFxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2F2ZU1lc3NhZ2VzKHVzZXJQcm9tcHQ6IHN0cmluZywgYXNzaXN0YW50UmVzcG9uc2U6IHN0cmluZywgdGhyZWFkSUQ6IHN0cmluZykge1xuICAgIGNvbnN0IHVzZXJNZXNzYWdlOiBPbWl0PEludGVybmFsTWVzc2FnZSwgJ3RpbWVzdGFtcCc+ID0ge1xuICAgICAgICB0aHJlYWRJRDogdGhyZWFkSUQsXG4gICAgICAgIHJvbGU6ICd1c2VyJyxcbiAgICAgICAgY29udGVudDogdXNlclByb21wdCxcbiAgICB9XG5cbiAgICBjb25zdCBhc3Npc3RhbnRNZXNzYWdlOiBPbWl0PEludGVybmFsTWVzc2FnZSwgJ3RpbWVzdGFtcCc+ID0ge1xuICAgICAgICB0aHJlYWRJRDogdGhyZWFkSUQsXG4gICAgICAgIHJvbGU6ICdhc3Npc3RhbnQnLFxuICAgICAgICBjb250ZW50OiBhc3Npc3RhbnRSZXNwb25zZSxcbiAgICB9XG5cbiAgICBhd2FpdCBzYXZlTWVzc2FnZSh1c2VyTWVzc2FnZSk7XG4gICAgYXdhaXQgc2F2ZU1lc3NhZ2UoYXNzaXN0YW50TWVzc2FnZSk7XG59XG5cbiJdfQ==