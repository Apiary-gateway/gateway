"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = require("react");
const logs_service_1 = require("./services/logs.service"); // Adjust the import path
const LogsTable_1 = __importDefault(require("./components/LogsTable")); // Adjust the import path
const Modal_1 = __importDefault(require("./components/Modal"));
const LogDetails_1 = __importDefault(require("./components/LogDetails"));
const Guardrails_1 = __importDefault(require("./components/Guardrails"));
const Config_1 = __importDefault(require("./components/Config"));
function App() {
    const [showAthenaLogs, setShowAthenaLogs] = (0, react_1.useState)(false);
    const [dynamoLogsRecord, setDynamoLogsRecord] = (0, react_1.useState)({});
    const [athenaLogsRecord, setAthenaLogsRecord] = (0, react_1.useState)({});
    const [athenaNextToken, setAthenaNextToken] = (0, react_1.useState)(null);
    const [dynamoNextToken, setDynamoNextToken] = (0, react_1.useState)(null);
    const [athenaQueryExecutionId, setAthenaQueryExecutionId] = (0, react_1.useState)(null);
    const [currentPage, setCurrentPage] = (0, react_1.useState)(0);
    const [isLoading, setIsLoading] = (0, react_1.useState)(false);
    const [isModalOpen, setIsModalOpen] = (0, react_1.useState)(false);
    const [selectedLog, setSelectedLog] = (0, react_1.useState)(null);
    const [isGuardrailsModalOpen, setIsGuardrailsModalOpen] = (0, react_1.useState)(false);
    const [isConfigModalOpen, setIsConfigModalOpen] = (0, react_1.useState)(false);
    const fetchLogsFromAthena = async () => {
        setIsLoading(true);
        try {
            const logsResponse = await (0, logs_service_1.getLogsFromAthena)(athenaNextToken, athenaQueryExecutionId);
            setAthenaLogsRecord({
                ...athenaLogsRecord,
                [currentPage + 1]: logsResponse.logs,
            });
            setCurrentPage(currentPage + 1);
            setAthenaNextToken(logsResponse.nextToken || null);
            setAthenaQueryExecutionId(logsResponse.queryExecutionId || null);
        }
        catch (error) {
            console.error(error);
        }
        finally {
            setIsLoading(false);
        }
    };
    const fetchLogsFromDynamo = async () => {
        setIsLoading(true);
        try {
            const logsResponse = await (0, logs_service_1.getLogsFromDynamo)(dynamoNextToken);
            setDynamoLogsRecord({
                ...dynamoLogsRecord,
                [currentPage + 1]: logsResponse.logs,
            });
            setCurrentPage(currentPage + 1);
            setDynamoNextToken(logsResponse.nextToken || null);
        }
        catch (error) {
            console.error(error);
        }
        finally {
            setIsLoading(false);
        }
    };
    (0, react_1.useEffect)(() => {
        if (showAthenaLogs && !athenaLogsRecord[1]) {
            fetchLogsFromAthena();
        }
        else if (!showAthenaLogs && !dynamoLogsRecord[1]) {
            fetchLogsFromDynamo();
        }
    }, [showAthenaLogs]);
    const handlePageSelect = (page) => {
        setCurrentPage(page);
    };
    const handleToggleLogs = () => {
        if (!showAthenaLogs && !athenaLogsRecord[1]) {
            setCurrentPage(0);
        }
        setShowAthenaLogs(!showAthenaLogs);
    };
    const handleNext = async () => {
        if (showAthenaLogs) {
            await fetchLogsFromAthena();
        }
        else {
            await fetchLogsFromDynamo();
        }
    };
    const handleDetailsClick = (log) => {
        console.log(log.model_routing_history);
        setSelectedLog(log);
        setIsModalOpen(true);
    };
    const handleCloseModal = () => {
        setIsModalOpen(false);
        setSelectedLog(null);
    };
    const currentLogs = showAthenaLogs
        ? athenaLogsRecord[currentPage]
        : dynamoLogsRecord[currentPage];
    const pageNumbers = showAthenaLogs
        ? Array.from(Object.keys(athenaLogsRecord))
        : Array.from(Object.keys(dynamoLogsRecord));
    const isNextButtonDisabled = showAthenaLogs
        ? !athenaNextToken
        : !dynamoNextToken;
    return (<div className="app-container">
      <header className="app-header">
        <h1>AI GATEWAY LOGS ({showAthenaLogs ? 'Athena' : 'Dynamo'})</h1>
        <div className="header-buttons">
          <button className="toggle-button" onClick={handleToggleLogs}>
            {showAthenaLogs ? 'Show Dynamo Logs' : 'Show Athena Logs'}
          </button>
          <button className="guardrails-button" onClick={() => setIsGuardrailsModalOpen(true)}>
            Manage Guardrails
          </button>
          <button className="config-button" onClick={() => setIsConfigModalOpen(true)}>
            Manage Gateway Configuration
          </button>
        </div>
      </header>
      <LogsTable_1.default logs={currentLogs || []} pageNumbers={pageNumbers} currentPage={currentPage} isNextButtonDisabled={isNextButtonDisabled} onNext={handleNext} onPageSelect={handlePageSelect} onDetailsClick={handleDetailsClick}/>
      {isLoading && (<div className="loading-overlay">
          <div className="spinner"></div>
        </div>)}
      {isModalOpen && selectedLog && (<Modal_1.default onClose={handleCloseModal}>
          <LogDetails_1.default log={selectedLog}/>
        </Modal_1.default>)}
      {isGuardrailsModalOpen && (<Modal_1.default onClose={() => setIsGuardrailsModalOpen(false)}>
          <Guardrails_1.default onClose={() => setIsGuardrailsModalOpen(false)}/>
        </Modal_1.default>)}
      {isConfigModalOpen && (<Modal_1.default onClose={() => setIsConfigModalOpen(false)}>
          <Config_1.default onClose={() => setIsConfigModalOpen(false)}/>
        </Modal_1.default>)}
    </div>);
}
exports.default = App;
//# sourceMappingURL=data:application/json;base64,