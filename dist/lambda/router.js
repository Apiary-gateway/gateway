"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const validateRequest_1 = require("./util/validateRequest");
const extractRequestData_1 = require("./util/extractRequestData");
const getAndSaveMessages_1 = require("./util/getAndSaveMessages");
const routeRequest_1 = require("./util/routeRequest");
const logger_1 = require("./util/logger");
const getConfig_1 = require("./util/getConfig");
const handler = async (event) => {
    await (0, getConfig_1.initConfig)();
    const logger = new logger_1.Logger();
    logger.setRawRequest(JSON.stringify(event, null, 2));
    try {
        const payload = (0, validateRequest_1.validateRequest)(event);
        const { threadID, prompt, provider, model, userId } = (0, extractRequestData_1.extractRequestData)(payload);
        const metadata = (0, extractRequestData_1.extractRequestMetadata)(event, payload);
        logger.setInitialData(threadID, userId, JSON.stringify(metadata));
        const history = await (0, getAndSaveMessages_1.getMessageHistory)(threadID);
        const response = await (0, routeRequest_1.routeRequest)({
            history,
            prompt,
            provider,
            model,
            metadata,
        });
        await (0, getAndSaveMessages_1.saveMessages)(prompt, response.text, threadID);
        let successReason;
        if (response.simpleCacheHit) {
            successReason = 'SIMPLE_CACHE_HIT';
        }
        else if (response.semanticCacheHit) {
            successReason = 'SEMANTIC_CACHE_HIT';
        }
        else {
            successReason = 'LLM_RESPONSE';
        }
        await logger.logSuccessData(response.model, response.provider, response.log, successReason, JSON.stringify(response, null, 2));
        return {
            statusCode: 200,
            headers: {
                'simple-cache': `${response.simpleCacheHit ? 'HIT' : 'MISS'}`,
                'semantic-cache': `${response.semanticCacheHit ? 'HIT' : 'MISS'}`,
            },
            body: JSON.stringify({
                threadID,
                response,
            }),
        };
    }
    catch (error) {
        const errorMessage = error instanceof Error ? error.message : 'Unknown Error';
        await logger.logErrorData('Unknown Error Reason', errorMessage);
        return {
            statusCode: 500,
            body: JSON.stringify({
                error: errorMessage,
            }),
        };
    }
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGFtYmRhL3JvdXRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw0REFBeUQ7QUFDekQsa0VBR21DO0FBQ25DLGtFQUE0RTtBQUM1RSxzREFBbUQ7QUFDbkQsMENBQXVDO0FBQ3ZDLGdEQUE4QztBQUV2QyxNQUFNLE9BQU8sR0FBRyxLQUFLLEVBQUUsS0FBYyxFQUFFLEVBQUU7SUFDNUMsTUFBTSxJQUFBLHNCQUFVLEdBQUUsQ0FBQztJQUNuQixNQUFNLE1BQU0sR0FBRyxJQUFJLGVBQU0sRUFBRSxDQUFDO0lBQzVCLE1BQU0sQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFckQsSUFBSSxDQUFDO1FBQ0gsTUFBTSxPQUFPLEdBQUcsSUFBQSxpQ0FBZSxFQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEdBQ2pELElBQUEsdUNBQWtCLEVBQUMsT0FBTyxDQUFDLENBQUM7UUFDOUIsTUFBTSxRQUFRLEdBQUcsSUFBQSwyQ0FBc0IsRUFBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFeEQsTUFBTSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUVsRSxNQUFNLE9BQU8sR0FBRyxNQUFNLElBQUEsc0NBQWlCLEVBQUMsUUFBUSxDQUFDLENBQUM7UUFDbEQsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFBLDJCQUFZLEVBQUM7WUFDbEMsT0FBTztZQUNQLE1BQU07WUFDTixRQUFRO1lBQ1IsS0FBSztZQUNMLFFBQVE7U0FDVCxDQUFDLENBQUM7UUFFSCxNQUFNLElBQUEsaUNBQVksRUFBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztRQUVwRCxJQUFJLGFBQWEsQ0FBQztRQUVsQixJQUFJLFFBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUM1QixhQUFhLEdBQUcsa0JBQWtCLENBQUM7UUFDckMsQ0FBQzthQUFNLElBQUksUUFBUSxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDckMsYUFBYSxHQUFHLG9CQUFvQixDQUFDO1FBQ3ZDLENBQUM7YUFBTSxDQUFDO1lBQ04sYUFBYSxHQUFHLGNBQWMsQ0FBQztRQUNqQyxDQUFDO1FBRUQsTUFBTSxNQUFNLENBQUMsY0FBYyxDQUN6QixRQUFRLENBQUMsS0FBSyxFQUNkLFFBQVEsQ0FBQyxRQUFRLEVBQ2pCLFFBQVEsQ0FBQyxHQUFHLEVBQ1osYUFBYSxFQUNiLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FDbEMsQ0FBQztRQUNGLE9BQU87WUFDTCxVQUFVLEVBQUUsR0FBRztZQUNmLE9BQU8sRUFBRTtnQkFDUCxjQUFjLEVBQUUsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRTtnQkFDN0QsZ0JBQWdCLEVBQUUsR0FBRyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFO2FBQ2xFO1lBQ0QsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUM7Z0JBQ25CLFFBQVE7Z0JBQ1IsUUFBUTthQUNULENBQUM7U0FDSCxDQUFDO0lBQ0osQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDZixNQUFNLFlBQVksR0FDaEIsS0FBSyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDO1FBRTNELE1BQU0sTUFBTSxDQUFDLFlBQVksQ0FBQyxzQkFBc0IsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUNoRSxPQUFPO1lBQ0wsVUFBVSxFQUFFLEdBQUc7WUFDZixJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQztnQkFDbkIsS0FBSyxFQUFFLFlBQVk7YUFDcEIsQ0FBQztTQUNILENBQUM7SUFDSixDQUFDO0FBQ0wsQ0FBQyxDQUFDO0FBaEVXLFFBQUEsT0FBTyxXQWdFbEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB2YWxpZGF0ZVJlcXVlc3QgfSBmcm9tICcuL3V0aWwvdmFsaWRhdGVSZXF1ZXN0JztcbmltcG9ydCB7XG4gIGV4dHJhY3RSZXF1ZXN0RGF0YSxcbiAgZXh0cmFjdFJlcXVlc3RNZXRhZGF0YSxcbn0gZnJvbSAnLi91dGlsL2V4dHJhY3RSZXF1ZXN0RGF0YSc7XG5pbXBvcnQgeyBnZXRNZXNzYWdlSGlzdG9yeSwgc2F2ZU1lc3NhZ2VzIH0gZnJvbSAnLi91dGlsL2dldEFuZFNhdmVNZXNzYWdlcyc7XG5pbXBvcnQgeyByb3V0ZVJlcXVlc3QgfSBmcm9tICcuL3V0aWwvcm91dGVSZXF1ZXN0JztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4vdXRpbC9sb2dnZXInO1xuaW1wb3J0IHsgaW5pdENvbmZpZyB9IGZyb20gJy4vdXRpbC9nZXRDb25maWcnO1xuXG5leHBvcnQgY29uc3QgaGFuZGxlciA9IGFzeW5jIChldmVudDogdW5rbm93bikgPT4ge1xuICAgIGF3YWl0IGluaXRDb25maWcoKTtcbiAgICBjb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKCk7XG4gICAgbG9nZ2VyLnNldFJhd1JlcXVlc3QoSlNPTi5zdHJpbmdpZnkoZXZlbnQsIG51bGwsIDIpKTtcbiAgICBcbiAgICB0cnkge1xuICAgICAgY29uc3QgcGF5bG9hZCA9IHZhbGlkYXRlUmVxdWVzdChldmVudCk7XG4gICAgICBjb25zdCB7IHRocmVhZElELCBwcm9tcHQsIHByb3ZpZGVyLCBtb2RlbCwgdXNlcklkIH0gPVxuICAgICAgICBleHRyYWN0UmVxdWVzdERhdGEocGF5bG9hZCk7XG4gICAgICBjb25zdCBtZXRhZGF0YSA9IGV4dHJhY3RSZXF1ZXN0TWV0YWRhdGEoZXZlbnQsIHBheWxvYWQpO1xuXG4gICAgICBsb2dnZXIuc2V0SW5pdGlhbERhdGEodGhyZWFkSUQsIHVzZXJJZCwgSlNPTi5zdHJpbmdpZnkobWV0YWRhdGEpKTtcblxuICAgICAgY29uc3QgaGlzdG9yeSA9IGF3YWl0IGdldE1lc3NhZ2VIaXN0b3J5KHRocmVhZElEKTtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcm91dGVSZXF1ZXN0KHtcbiAgICAgICAgaGlzdG9yeSxcbiAgICAgICAgcHJvbXB0LFxuICAgICAgICBwcm92aWRlcixcbiAgICAgICAgbW9kZWwsXG4gICAgICAgIG1ldGFkYXRhLFxuICAgICAgfSk7XG5cbiAgICAgIGF3YWl0IHNhdmVNZXNzYWdlcyhwcm9tcHQsIHJlc3BvbnNlLnRleHQsIHRocmVhZElEKTtcblxuICAgICAgbGV0IHN1Y2Nlc3NSZWFzb247XG5cbiAgICAgIGlmIChyZXNwb25zZS5zaW1wbGVDYWNoZUhpdCkge1xuICAgICAgICBzdWNjZXNzUmVhc29uID0gJ1NJTVBMRV9DQUNIRV9ISVQnO1xuICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5zZW1hbnRpY0NhY2hlSGl0KSB7XG4gICAgICAgIHN1Y2Nlc3NSZWFzb24gPSAnU0VNQU5USUNfQ0FDSEVfSElUJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN1Y2Nlc3NSZWFzb24gPSAnTExNX1JFU1BPTlNFJztcbiAgICAgIH1cblxuICAgICAgYXdhaXQgbG9nZ2VyLmxvZ1N1Y2Nlc3NEYXRhKFxuICAgICAgICByZXNwb25zZS5tb2RlbCxcbiAgICAgICAgcmVzcG9uc2UucHJvdmlkZXIsXG4gICAgICAgIHJlc3BvbnNlLmxvZyxcbiAgICAgICAgc3VjY2Vzc1JlYXNvbixcbiAgICAgICAgSlNPTi5zdHJpbmdpZnkocmVzcG9uc2UsIG51bGwsIDIpXG4gICAgICApO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdHVzQ29kZTogMjAwLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgJ3NpbXBsZS1jYWNoZSc6IGAke3Jlc3BvbnNlLnNpbXBsZUNhY2hlSGl0ID8gJ0hJVCcgOiAnTUlTUyd9YCxcbiAgICAgICAgICAnc2VtYW50aWMtY2FjaGUnOiBgJHtyZXNwb25zZS5zZW1hbnRpY0NhY2hlSGl0ID8gJ0hJVCcgOiAnTUlTUyd9YCxcbiAgICAgICAgfSxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgIHRocmVhZElELFxuICAgICAgICAgIHJlc3BvbnNlLFxuICAgICAgICB9KSxcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9XG4gICAgICAgIGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gRXJyb3InO1xuXG4gICAgICBhd2FpdCBsb2dnZXIubG9nRXJyb3JEYXRhKCdVbmtub3duIEVycm9yIFJlYXNvbicsIGVycm9yTWVzc2FnZSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGF0dXNDb2RlOiA1MDAsXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICBlcnJvcjogZXJyb3JNZXNzYWdlLFxuICAgICAgICB9KSxcbiAgICAgIH07XG4gICAgfVxufTsiXX0=