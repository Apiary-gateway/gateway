"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.calculateCost = calculateCost;
// prices are in dollars per million tokens
const modelCosts = {
    anthropic: {
        'claude-3-5-haiku-20241022': {
            input: 0.8,
            output: 4,
        },
        'claude-3-opus-20240229': {
            input: 15,
            output: 75,
        },
    },
    gemini: {
        'gemini-1.5-pro': {
            input: 1.25, // for prompts <=128K tokens
            inputLargePrompt: 2.50, // for prompts >128K tokens
            output: 5, // for prompts <=128K tokens
            outputLargePrompt: 10, // for prompts >128K tokens
        },
        'gemini-2.0-flash-001': {
            input: 0.1,
            output: 0.4,
        }
    },
    openai: {
        'gpt-3.5-turbo': {
            input: 0.5,
            output: 1.5,
        },
        'gpt-4': {
            input: 30,
            output: 60,
        },
        'gpt-4o-mini': {
            input: 0.15,
            output: 0.6,
        },
    },
};
function calculateCost(provider, model, inputTokens, outputTokens) {
    let inputCostPerToken, outputCostPerToken;
    if (provider === 'gemini'
        && model === 'gemini-1.5-pro'
        && inputTokens > 128000
        && modelCosts[provider][model].inputLargePrompt
        && modelCosts[provider][model].outputLargePrompt) {
        inputCostPerToken = modelCosts[provider][model].inputLargePrompt / 1000000;
        outputCostPerToken = modelCosts[provider][model].outputLargePrompt / 1000000;
    }
    else {
        inputCostPerToken = modelCosts[provider][model].input / 1000000;
        outputCostPerToken = modelCosts[provider][model].output / 1000000;
    }
    const inputCost = inputTokens * inputCostPerToken;
    const outputCost = outputTokens * outputCostPerToken;
    return inputCost + outputCost;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsY3VsYXRlQ29zdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xhbWJkYS91dGlsL2NhbGN1bGF0ZUNvc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUEwQ0Esc0NBMEJDO0FBbEVELDJDQUEyQztBQUMzQyxNQUFNLFVBQVUsR0FBa0I7SUFDaEMsU0FBUyxFQUFFO1FBQ1QsMkJBQTJCLEVBQUU7WUFDN0IsS0FBSyxFQUFFLEdBQUc7WUFDVixNQUFNLEVBQUUsQ0FBQztTQUNSO1FBQ0Qsd0JBQXdCLEVBQUU7WUFDeEIsS0FBSyxFQUFFLEVBQUU7WUFDVCxNQUFNLEVBQUUsRUFBRTtTQUNYO0tBQ0Y7SUFDRCxNQUFNLEVBQUU7UUFDTixnQkFBZ0IsRUFBRTtZQUNoQixLQUFLLEVBQUUsSUFBSSxFQUFFLDRCQUE0QjtZQUN6QyxnQkFBZ0IsRUFBRSxJQUFJLEVBQUUsMkJBQTJCO1lBQ25ELE1BQU0sRUFBRSxDQUFDLEVBQUUsNEJBQTRCO1lBQ3ZDLGlCQUFpQixFQUFFLEVBQUUsRUFBRSwyQkFBMkI7U0FDbkQ7UUFDRCxzQkFBc0IsRUFBRTtZQUN0QixLQUFLLEVBQUUsR0FBRztZQUNWLE1BQU0sRUFBRSxHQUFHO1NBQ1o7S0FDRjtJQUNELE1BQU0sRUFBRTtRQUNOLGVBQWUsRUFBRTtZQUNmLEtBQUssRUFBRSxHQUFHO1lBQ1YsTUFBTSxFQUFFLEdBQUc7U0FDWjtRQUNELE9BQU8sRUFBRTtZQUNQLEtBQUssRUFBRSxFQUFFO1lBQ1QsTUFBTSxFQUFFLEVBQUU7U0FDWDtRQUNELGFBQWEsRUFBRTtZQUNiLEtBQUssRUFBRSxJQUFJO1lBQ1gsTUFBTSxFQUFFLEdBQUc7U0FDWjtLQUNGO0NBQ0YsQ0FBQztBQUVGLFNBQWdCLGFBQWEsQ0FDM0IsUUFBdUIsRUFDdkIsS0FBZ0IsRUFDaEIsV0FBbUIsRUFDbkIsWUFBb0I7SUFFcEIsSUFBSSxpQkFBaUIsRUFBRSxrQkFBa0IsQ0FBQztJQUUxQyxJQUNFLFFBQVEsS0FBSyxRQUFRO1dBQ2xCLEtBQUssS0FBSyxnQkFBZ0I7V0FDMUIsV0FBVyxHQUFHLE1BQU07V0FDcEIsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLGdCQUFnQjtXQUM1QyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsaUJBQWlCLEVBQ2hELENBQUM7UUFDRCxpQkFBaUIsR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsZ0JBQWdCLEdBQUcsT0FBTyxDQUFDO1FBQzNFLGtCQUFrQixHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxpQkFBaUIsR0FBRyxPQUFPLENBQUM7SUFDL0UsQ0FBQztTQUFNLENBQUM7UUFDTixpQkFBaUIsR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQztRQUNoRSxrQkFBa0IsR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQztJQUNwRSxDQUFDO0lBRUQsTUFBTSxTQUFTLEdBQUcsV0FBVyxHQUFHLGlCQUFpQixDQUFDO0lBQ2xELE1BQU0sVUFBVSxHQUFHLFlBQVksR0FBRyxrQkFBa0IsQ0FBQztJQUVyRCxPQUFPLFNBQVMsR0FBRyxVQUFVLENBQUM7QUFDaEMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFsbE1vZGVscywgTW9kZWxDb3N0VHlwZSwgU3VwcG9ydGVkTExNcyB9IGZyb20gXCIuL3R5cGVzXCI7XG5cbi8vIHByaWNlcyBhcmUgaW4gZG9sbGFycyBwZXIgbWlsbGlvbiB0b2tlbnNcbmNvbnN0IG1vZGVsQ29zdHM6IE1vZGVsQ29zdFR5cGUgPSB7XG4gIGFudGhyb3BpYzoge1xuICAgICdjbGF1ZGUtMy01LWhhaWt1LTIwMjQxMDIyJzoge1xuICAgIGlucHV0OiAwLjgsXG4gICAgb3V0cHV0OiA0LFxuICAgIH0sXG4gICAgJ2NsYXVkZS0zLW9wdXMtMjAyNDAyMjknOiB7XG4gICAgICBpbnB1dDogMTUsXG4gICAgICBvdXRwdXQ6IDc1LFxuICAgIH0sXG4gIH0sXG4gIGdlbWluaToge1xuICAgICdnZW1pbmktMS41LXBybyc6IHtcbiAgICAgIGlucHV0OiAxLjI1LCAvLyBmb3IgcHJvbXB0cyA8PTEyOEsgdG9rZW5zXG4gICAgICBpbnB1dExhcmdlUHJvbXB0OiAyLjUwLCAvLyBmb3IgcHJvbXB0cyA+MTI4SyB0b2tlbnNcbiAgICAgIG91dHB1dDogNSwgLy8gZm9yIHByb21wdHMgPD0xMjhLIHRva2Vuc1xuICAgICAgb3V0cHV0TGFyZ2VQcm9tcHQ6IDEwLCAvLyBmb3IgcHJvbXB0cyA+MTI4SyB0b2tlbnNcbiAgICB9LFxuICAgICdnZW1pbmktMi4wLWZsYXNoLTAwMSc6IHtcbiAgICAgIGlucHV0OiAwLjEsXG4gICAgICBvdXRwdXQ6IDAuNCxcbiAgICB9XG4gIH0sXG4gIG9wZW5haToge1xuICAgICdncHQtMy41LXR1cmJvJzoge1xuICAgICAgaW5wdXQ6IDAuNSxcbiAgICAgIG91dHB1dDogMS41LFxuICAgIH0sXG4gICAgJ2dwdC00Jzoge1xuICAgICAgaW5wdXQ6IDMwLFxuICAgICAgb3V0cHV0OiA2MCxcbiAgICB9LFxuICAgICdncHQtNG8tbWluaSc6IHtcbiAgICAgIGlucHV0OiAwLjE1LFxuICAgICAgb3V0cHV0OiAwLjYsXG4gICAgfSxcbiAgfSxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVDb3N0KFxuICBwcm92aWRlcjogU3VwcG9ydGVkTExNcywgXG4gIG1vZGVsOiBBbGxNb2RlbHMsIFxuICBpbnB1dFRva2VuczogbnVtYmVyLCBcbiAgb3V0cHV0VG9rZW5zOiBudW1iZXJcbikge1xuICBsZXQgaW5wdXRDb3N0UGVyVG9rZW4sIG91dHB1dENvc3RQZXJUb2tlbjtcbiAgXG4gIGlmIChcbiAgICBwcm92aWRlciA9PT0gJ2dlbWluaScgXG4gICAgJiYgbW9kZWwgPT09ICdnZW1pbmktMS41LXBybycgXG4gICAgJiYgaW5wdXRUb2tlbnMgPiAxMjgwMDBcbiAgICAmJiBtb2RlbENvc3RzW3Byb3ZpZGVyXVttb2RlbF0uaW5wdXRMYXJnZVByb21wdFxuICAgICYmIG1vZGVsQ29zdHNbcHJvdmlkZXJdW21vZGVsXS5vdXRwdXRMYXJnZVByb21wdFxuICApIHtcbiAgICBpbnB1dENvc3RQZXJUb2tlbiA9IG1vZGVsQ29zdHNbcHJvdmlkZXJdW21vZGVsXS5pbnB1dExhcmdlUHJvbXB0IC8gMTAwMDAwMDtcbiAgICBvdXRwdXRDb3N0UGVyVG9rZW4gPSBtb2RlbENvc3RzW3Byb3ZpZGVyXVttb2RlbF0ub3V0cHV0TGFyZ2VQcm9tcHQgLyAxMDAwMDAwO1xuICB9IGVsc2Uge1xuICAgIGlucHV0Q29zdFBlclRva2VuID0gbW9kZWxDb3N0c1twcm92aWRlcl1bbW9kZWxdLmlucHV0IC8gMTAwMDAwMDtcbiAgICBvdXRwdXRDb3N0UGVyVG9rZW4gPSBtb2RlbENvc3RzW3Byb3ZpZGVyXVttb2RlbF0ub3V0cHV0IC8gMTAwMDAwMDtcbiAgfVxuXG4gIGNvbnN0IGlucHV0Q29zdCA9IGlucHV0VG9rZW5zICogaW5wdXRDb3N0UGVyVG9rZW47XG4gIGNvbnN0IG91dHB1dENvc3QgPSBvdXRwdXRUb2tlbnMgKiBvdXRwdXRDb3N0UGVyVG9rZW47XG5cbiAgcmV0dXJuIGlucHV0Q29zdCArIG91dHB1dENvc3Q7XG59XG4iXX0=