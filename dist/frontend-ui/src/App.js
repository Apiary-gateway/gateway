"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = require("react");
const logs_service_1 = require("./services/logs.service"); // Adjust the import path
const LogsTable_1 = require("./components/LogsTable"); // Adjust the import path
require("./index.css"); // Ensure CSS is imported
function App() {
    const [logsMap, setLogsMap] = (0, react_1.useState)(new Map());
    const [nextToken, setNextToken] = (0, react_1.useState)(null);
    const [currentPage, setCurrentPage] = (0, react_1.useState)(1);
    const [isLoading, setIsLoading] = (0, react_1.useState)(false);
    const fetchLogs = async (token) => {
        setIsLoading(true);
        try {
            const logsResponse = await (0, logs_service_1.getLogs)(token);
            const pageNumber = logsResponse.page;
            setLogsMap((prev) => new Map(prev).set(pageNumber, logsResponse.logs));
            setNextToken(logsResponse.nextToken);
            setCurrentPage(pageNumber);
        }
        catch (error) {
            console.error(error);
        }
        finally {
            setIsLoading(false);
        }
    };
    (0, react_1.useEffect)(() => {
        fetchLogs(null);
    }, []);
    const handleNext = () => {
        if (nextToken) {
            fetchLogs(nextToken);
        }
    };
    const handlePageSelect = (page) => {
        setCurrentPage(page);
    };
    const handleDetailsClick = (log) => {
        console.log({
            prompt: log.raw_request?.body.prompt,
            response: log.raw_response?.text,
        });
    };
    const currentLogs = logsMap.get(currentPage) || [];
    return (<div className="app-container">
      <h1>AI GATEWAY LOGS</h1>
      <LogsTable_1.default logs={currentLogs} pageNumbers={Array.from(logsMap.keys())} currentPage={currentPage} nextToken={nextToken} onNext={handleNext} onPageSelect={handlePageSelect} onDetailsClick={handleDetailsClick}/>
      {isLoading && (<div className="loading-overlay">
          <div className="spinner"></div>
        </div>)}
    </div>);
}
exports.default = App;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vZnJvbnRlbmQtdWkvc3JjL0FwcC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpQ0FBNEM7QUFDNUMsMERBQWtELENBQUMseUJBQXlCO0FBQzVFLHNEQUErQyxDQUFDLHlCQUF5QjtBQUN6RSx1QkFBcUIsQ0FBQyx5QkFBeUI7QUFHL0MsU0FBUyxHQUFHO0lBQ1YsTUFBTSxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsR0FBRyxJQUFBLGdCQUFRLEVBQTBCLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQztJQUMzRSxNQUFNLENBQUMsU0FBUyxFQUFFLFlBQVksQ0FBQyxHQUFHLElBQUEsZ0JBQVEsRUFBZ0IsSUFBSSxDQUFDLENBQUM7SUFDaEUsTUFBTSxDQUFDLFdBQVcsRUFBRSxjQUFjLENBQUMsR0FBRyxJQUFBLGdCQUFRLEVBQVMsQ0FBQyxDQUFDLENBQUM7SUFDMUQsTUFBTSxDQUFDLFNBQVMsRUFBRSxZQUFZLENBQUMsR0FBRyxJQUFBLGdCQUFRLEVBQVUsS0FBSyxDQUFDLENBQUM7SUFFM0QsTUFBTSxTQUFTLEdBQUcsS0FBSyxFQUFFLEtBQW9CLEVBQUUsRUFBRTtRQUMvQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbkIsSUFBSSxDQUFDO1lBQ0gsTUFBTSxZQUFZLEdBQUcsTUFBTSxJQUFBLHNCQUFPLEVBQUMsS0FBSyxDQUFDLENBQUM7WUFDMUMsTUFBTSxVQUFVLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQztZQUNyQyxVQUFVLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDdkUsWUFBWSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUNyQyxjQUFjLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDN0IsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDZixPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZCLENBQUM7Z0JBQVMsQ0FBQztZQUNULFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN0QixDQUFDO0lBQ0gsQ0FBQyxDQUFDO0lBRUYsSUFBQSxpQkFBUyxFQUFDLEdBQUcsRUFBRTtRQUNiLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsQixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFFUCxNQUFNLFVBQVUsR0FBRyxHQUFHLEVBQUU7UUFDdEIsSUFBSSxTQUFTLEVBQUUsQ0FBQztZQUNkLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN2QixDQUFDO0lBQ0gsQ0FBQyxDQUFDO0lBRUYsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLElBQVksRUFBRSxFQUFFO1FBQ3hDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN2QixDQUFDLENBQUM7SUFFRixNQUFNLGtCQUFrQixHQUFHLENBQUMsR0FBYSxFQUFFLEVBQUU7UUFDM0MsT0FBTyxDQUFDLEdBQUcsQ0FBQztZQUNWLE1BQU0sRUFBRSxHQUFHLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ3BDLFFBQVEsRUFBRSxHQUFHLENBQUMsWUFBWSxFQUFFLElBQUk7U0FDakMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0lBRUYsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7SUFFbkQsT0FBTyxDQUNMLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQzVCO01BQUEsQ0FBQyxFQUFFLENBQUMsZUFBZSxFQUFFLEVBQUUsQ0FDdkI7TUFBQSxDQUFDLG1CQUFTLENBQ1IsSUFBSSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQ2xCLFdBQVcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FDeEMsV0FBVyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQ3pCLFNBQVMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUNyQixNQUFNLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FDbkIsWUFBWSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FDL0IsY0FBYyxDQUFDLENBQUMsa0JBQWtCLENBQUMsRUFFckM7TUFBQSxDQUFDLFNBQVMsSUFBSSxDQUNaLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FDOUI7VUFBQSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsR0FBRyxDQUNoQztRQUFBLEVBQUUsR0FBRyxDQUFDLENBQ1AsQ0FDSDtJQUFBLEVBQUUsR0FBRyxDQUFDLENBQ1AsQ0FBQztBQUNKLENBQUM7QUFFRCxrQkFBZSxHQUFHLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZ2V0TG9ncyB9IGZyb20gJy4vc2VydmljZXMvbG9ncy5zZXJ2aWNlJzsgLy8gQWRqdXN0IHRoZSBpbXBvcnQgcGF0aFxuaW1wb3J0IExvZ3NUYWJsZSBmcm9tICcuL2NvbXBvbmVudHMvTG9nc1RhYmxlJzsgLy8gQWRqdXN0IHRoZSBpbXBvcnQgcGF0aFxuaW1wb3J0ICcuL2luZGV4LmNzcyc7IC8vIEVuc3VyZSBDU1MgaXMgaW1wb3J0ZWRcbmltcG9ydCB7IExvZ0VudHJ5IH0gZnJvbSAnLi90eXBlcy9sb2dzLnR5cGVzJztcblxuZnVuY3Rpb24gQXBwKCkge1xuICBjb25zdCBbbG9nc01hcCwgc2V0TG9nc01hcF0gPSB1c2VTdGF0ZTxNYXA8bnVtYmVyLCBMb2dFbnRyeVtdPj4obmV3IE1hcCgpKTtcbiAgY29uc3QgW25leHRUb2tlbiwgc2V0TmV4dFRva2VuXSA9IHVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpO1xuICBjb25zdCBbY3VycmVudFBhZ2UsIHNldEN1cnJlbnRQYWdlXSA9IHVzZVN0YXRlPG51bWJlcj4oMSk7XG4gIGNvbnN0IFtpc0xvYWRpbmcsIHNldElzTG9hZGluZ10gPSB1c2VTdGF0ZTxib29sZWFuPihmYWxzZSk7XG5cbiAgY29uc3QgZmV0Y2hMb2dzID0gYXN5bmMgKHRva2VuOiBzdHJpbmcgfCBudWxsKSA9PiB7XG4gICAgc2V0SXNMb2FkaW5nKHRydWUpO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBsb2dzUmVzcG9uc2UgPSBhd2FpdCBnZXRMb2dzKHRva2VuKTtcbiAgICAgIGNvbnN0IHBhZ2VOdW1iZXIgPSBsb2dzUmVzcG9uc2UucGFnZTtcbiAgICAgIHNldExvZ3NNYXAoKHByZXYpID0+IG5ldyBNYXAocHJldikuc2V0KHBhZ2VOdW1iZXIsIGxvZ3NSZXNwb25zZS5sb2dzKSk7XG4gICAgICBzZXROZXh0VG9rZW4obG9nc1Jlc3BvbnNlLm5leHRUb2tlbik7XG4gICAgICBzZXRDdXJyZW50UGFnZShwYWdlTnVtYmVyKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XG4gICAgfVxuICB9O1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgZmV0Y2hMb2dzKG51bGwpO1xuICB9LCBbXSk7XG5cbiAgY29uc3QgaGFuZGxlTmV4dCA9ICgpID0+IHtcbiAgICBpZiAobmV4dFRva2VuKSB7XG4gICAgICBmZXRjaExvZ3MobmV4dFRva2VuKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlUGFnZVNlbGVjdCA9IChwYWdlOiBudW1iZXIpID0+IHtcbiAgICBzZXRDdXJyZW50UGFnZShwYWdlKTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVEZXRhaWxzQ2xpY2sgPSAobG9nOiBMb2dFbnRyeSkgPT4ge1xuICAgIGNvbnNvbGUubG9nKHtcbiAgICAgIHByb21wdDogbG9nLnJhd19yZXF1ZXN0Py5ib2R5LnByb21wdCxcbiAgICAgIHJlc3BvbnNlOiBsb2cucmF3X3Jlc3BvbnNlPy50ZXh0LFxuICAgIH0pO1xuICB9O1xuXG4gIGNvbnN0IGN1cnJlbnRMb2dzID0gbG9nc01hcC5nZXQoY3VycmVudFBhZ2UpIHx8IFtdO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJhcHAtY29udGFpbmVyXCI+XG4gICAgICA8aDE+QUkgR0FURVdBWSBMT0dTPC9oMT5cbiAgICAgIDxMb2dzVGFibGVcbiAgICAgICAgbG9ncz17Y3VycmVudExvZ3N9XG4gICAgICAgIHBhZ2VOdW1iZXJzPXtBcnJheS5mcm9tKGxvZ3NNYXAua2V5cygpKX1cbiAgICAgICAgY3VycmVudFBhZ2U9e2N1cnJlbnRQYWdlfVxuICAgICAgICBuZXh0VG9rZW49e25leHRUb2tlbn1cbiAgICAgICAgb25OZXh0PXtoYW5kbGVOZXh0fVxuICAgICAgICBvblBhZ2VTZWxlY3Q9e2hhbmRsZVBhZ2VTZWxlY3R9XG4gICAgICAgIG9uRGV0YWlsc0NsaWNrPXtoYW5kbGVEZXRhaWxzQ2xpY2t9XG4gICAgICAvPlxuICAgICAge2lzTG9hZGluZyAmJiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibG9hZGluZy1vdmVybGF5XCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzcGlubmVyXCI+PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQXBwO1xuIl19