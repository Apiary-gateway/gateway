"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = require("react");
const config_service_1 = require("../services/config.service");
const react_2 = __importDefault(require("@monaco-editor/react"));
const Config = ({ onClose }) => {
    const [configJson, setConfigJson] = (0, react_1.useState)('');
    const [isEditing, setIsEditing] = (0, react_1.useState)(false);
    const [isLoading, setIsLoading] = (0, react_1.useState)(true);
    const [isSubmitting, setIsSubmitting] = (0, react_1.useState)(false);
    const [showRoutingHelp, setShowRoutingHelp] = (0, react_1.useState)(false);
    const [notification, setNotification] = (0, react_1.useState)(null);
    (0, react_1.useEffect)(() => {
        const fetchConfig = async () => {
            try {
                const data = await (0, config_service_1.getConfig)();
                setConfigJson(JSON.stringify(data, null, 2));
            }
            catch (err) {
                setNotification({
                    type: 'error',
                    message: 'Failed to fetch config',
                });
            }
            finally {
                setIsLoading(false);
            }
        };
        fetchConfig();
    }, []);
    (0, react_1.useEffect)(() => {
        if (notification) {
            const timer = setTimeout(() => {
                setNotification(null);
            }, 3000);
            return () => clearTimeout(timer);
        }
    }, [notification]);
    const handleSubmit = async () => {
        setIsEditing(false);
        setIsSubmitting(true);
        setNotification(null);
        try {
            await (0, config_service_1.submitConfig)(configJson);
            setNotification({
                type: 'success',
                message: 'Config updated successfully',
            });
        }
        catch (err) {
            setNotification({
                type: 'error',
                message: 'Failed to update config',
            });
        }
        finally {
            setIsSubmitting(false);
        }
    };
    return (<div className="config-container">
        <h2>Manage Configuration Object</h2>
        {notification && (<div className={`notification ${notification.type}`}>
            {notification.message}
            </div>)}
        <div className="mb-4">
            <button onClick={() => setShowRoutingHelp(!showRoutingHelp)} className="text-blue-600 hover:underline focus:outline-none">
                {showRoutingHelp ? 'Hide' : 'Show'} Routing Options Help
            </button>
            {showRoutingHelp && (<div className="mt-2 p-4 bg-gray-100 rounded text-sm whitespace-pre-wrap">
                <strong>Routing Options:</strong>
                <br />
                • <code>enableFallbacks</code>: boolean — enable global fallback
                <br />
                • <code>fallbackModel</code>: {`{ provider, model }`} — default fallback
                <br />
                • <code>fallbackOnStatus</code>: number[] — status codes to trigger fallback
                <br />
                • <code>retries</code>: number — number of retry attempts
                <br />
                • <code>availableMetadata</code>: string[] — allowed metadata keys
                <br />
                • <code>conditions</code>: condition[] — routing rules by metadata
                <br />
                &nbsp;&nbsp;&nbsp;↳ <code>name</code>: string — condition name
                <br />
                &nbsp;&nbsp;&nbsp;↳ <code>query</code>: function — metadata predicate
                <br />
                &nbsp;&nbsp;&nbsp;↳ <code>loadBalance</code>: model[] — weighted models
                <br />
                &nbsp;&nbsp;&nbsp;↳ <code>fallbackModel</code>: optional fallback
                <br />
                • <code>defaultModel</code>: {`{ provider, model }`} — fallback if no match
                </div>)}
        </div>

        {(isLoading || isSubmitting) && (<div className="modal-loading-overlay">
            <div className="spinner"></div>
            </div>)}
        {(isEditing ? (<react_2.default height="50vh" defaultLanguage="json" defaultValue={configJson} onChange={(value) => setConfigJson(value || '')}/>) : (<pre>{configJson}</pre>))}
        <div className="config-object"></div>
        <div className="mt-4 flex justify-between">
          <button onClick={onClose} className="px-4 py-2 bg-gray-200 rounded">Close</button>
          {isEditing && !isSubmitting ? (<div className="space-x-2">
              <button onClick={() => setIsEditing(false)} className="px-4 py-2 bg-gray-300 rounded">Cancel</button>
              <button onClick={handleSubmit} className="px-4 py-2 bg-blue-600 text-white rounded">Submit</button>
            </div>) : (<button onClick={() => setIsEditing(true)} className="px-4 py-2 bg-blue-600 text-white rounded">Edit</button>)}
        </div>
        </div>);
};
exports.default = Config;
//# sourceMappingURL=data:application/json;base64,