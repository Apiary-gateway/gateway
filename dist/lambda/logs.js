"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const client_athena_1 = require("@aws-sdk/client-athena");
const dynamoClient = new client_dynamodb_1.DynamoDBClient({});
const athenaClient = new client_athena_1.AthenaClient({});
const LOG_TABLE_NAME = process.env.LOG_TABLE_NAME || '';
const LOG_BUCKET_NAME = process.env.LOG_BUCKET_NAME || '';
const ATHENA_WORKGROUP = process.env.ATHENA_WORKGROUP || 'llm_logs_workgroup';
const ATHENA_DATABASE = 'ai_gateway_logs_db';
const PAGE_SIZE = 15;
const mapDynamoItem = (item) => ({
    id: item.id?.S,
    thread_ts: item.thread_ts?.S,
    timestamp: item.timestamp?.S,
    latency: item.latency?.N,
    provider: item.provider?.S,
    model: item.model?.S,
    tokens_used: item.tokens_used?.N,
    cost: item.cost?.N,
    raw_request: item.raw_request?.S,
    raw_response: item.raw_response?.S || null,
    error_message: item.error_message?.S || null,
    status: item.status?.S,
});
const mapAthenaRow = (row) => {
    const data = row.Data || [];
    return {
        id: data[0]?.VarCharValue,
        timestamp: data[1]?.VarCharValue,
        status: data[2]?.VarCharValue,
        provider: data[3]?.VarCharValue,
        model: data[4]?.VarCharValue,
        latency: data[5]?.VarCharValue,
    };
};
const handler = async (event) => {
    try {
        const queryParams = event.queryStringParameters || {};
        const older = queryParams.older === 'true';
        const page = parseInt(queryParams.page || '1', 10);
        const nextToken = queryParams.nextToken || null;
        console.log('Request parameters:', { older, page, nextToken });
        if (isNaN(page) || page < 1) {
            return {
                statusCode: 400,
                body: JSON.stringify({ message: 'Invalid page number' }),
            };
        }
        let logs = [];
        let responseNextToken = null;
        if (older) {
            console.log('Querying Athena with pagination (all logs)');
            const athenaQuery = `
        SELECT id, timestamp, status, provider, model, latency
        FROM "ai_gateway_logs"
        ORDER BY date DESC, timestamp DESC
      `;
            console.log('Athena query:', athenaQuery);
            const startQuery = new client_athena_1.StartQueryExecutionCommand({
                QueryString: athenaQuery,
                WorkGroup: ATHENA_WORKGROUP,
                ResultConfiguration: {
                    OutputLocation: `s3://${LOG_BUCKET_NAME}/athena-results/`,
                },
                QueryExecutionContext: {
                    Database: ATHENA_DATABASE,
                },
            });
            const queryExecution = await athenaClient.send(startQuery);
            const queryExecutionId = queryExecution.QueryExecutionId;
            console.log('Started Athena query execution:', queryExecutionId);
            let queryState;
            do {
                await new Promise((resolve) => setTimeout(resolve, 1000));
                const queryExecutionResult = await athenaClient.send(new client_athena_1.GetQueryExecutionCommand({ QueryExecutionId: queryExecutionId }));
                queryState = queryExecutionResult.QueryExecution?.Status?.State;
                console.log('Athena query state:', queryState);
                console.log('Query execution details:', JSON.stringify(queryExecutionResult.QueryExecution));
            } while (queryState === 'RUNNING' || queryState === 'QUEUED');
            if (queryState === 'FAILED') {
                const errorDetails = await athenaClient.send(new client_athena_1.GetQueryExecutionCommand({ QueryExecutionId: queryExecutionId }));
                throw new Error('Athena query failed: ' +
                    errorDetails.QueryExecution?.Status?.StateChangeReason);
            }
            const getQueryResultsInput = {
                QueryExecutionId: queryExecutionId,
                MaxResults: PAGE_SIZE + 1, // +1 for header on first page
            };
            if (nextToken) {
                getQueryResultsInput.NextToken = nextToken;
            }
            const queryResults = await athenaClient.send(new client_athena_1.GetQueryResultsCommand(getQueryResultsInput));
            console.log('Raw Athena results:', JSON.stringify(queryResults, null, 2));
            const rows = queryResults.ResultSet?.Rows || [];
            console.log('Raw rows count:', rows.length);
            console.log('Raw rows:', JSON.stringify(rows, null, 2));
            // Simplify: Skip header only on first page, log before mapping
            logs = (!nextToken && rows.length > 0 ? rows.slice(1) : rows).map(mapAthenaRow);
            console.log('Mapped logs from Athena:', {
                count: logs.length,
                logs: JSON.stringify(logs),
            });
            responseNextToken = queryResults.NextToken || null;
            console.log('Athena NextToken:', responseNextToken);
        }
        else {
            console.log('Querying DynamoDB with pagination (all logs)');
            const clientLastKey = nextToken
                ? JSON.parse(decodeURIComponent(nextToken))
                : undefined;
            const dynamoQuery = new client_dynamodb_1.QueryCommand({
                TableName: LOG_TABLE_NAME,
                KeyConditionExpression: 'PK = :pk',
                ExpressionAttributeValues: {
                    ':pk': { S: 'LOG' },
                },
                Limit: PAGE_SIZE,
                ExclusiveStartKey: clientLastKey,
                ScanIndexForward: true,
            });
            const dynamoResult = await dynamoClient.send(dynamoQuery);
            logs = dynamoResult.Items?.map(mapDynamoItem) || [];
            responseNextToken = dynamoResult.LastEvaluatedKey
                ? encodeURIComponent(JSON.stringify(dynamoResult.LastEvaluatedKey))
                : null;
            console.log('DynamoDB results:', {
                items: logs.length,
                nextToken: responseNextToken,
            });
        }
        console.log('Successfully returning results');
        return {
            statusCode: 200,
            body: JSON.stringify({
                logs,
                page,
                pageSize: PAGE_SIZE,
                nextToken: responseNextToken,
            }),
        };
    }
    catch (error) {
        console.error('Error in logs handler:', error);
        if (error instanceof Error) {
            console.error('Error stack:', error.stack);
        }
        return {
            statusCode: 500,
            body: JSON.stringify({
                message: 'Error fetching logs',
                error: String(error),
            }),
        };
    }
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9ncy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2xhbWJkYS9sb2dzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLDhEQUF3RTtBQUN4RSwwREFLZ0M7QUFFaEMsTUFBTSxZQUFZLEdBQUcsSUFBSSxnQ0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzVDLE1BQU0sWUFBWSxHQUFHLElBQUksNEJBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUMxQyxNQUFNLGNBQWMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsSUFBSSxFQUFFLENBQUM7QUFDeEQsTUFBTSxlQUFlLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLElBQUksRUFBRSxDQUFDO0FBQzFELE1BQU0sZ0JBQWdCLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsSUFBSSxvQkFBb0IsQ0FBQztBQUM5RSxNQUFNLGVBQWUsR0FBRyxvQkFBb0IsQ0FBQztBQUM3QyxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUM7QUFFckIsTUFBTSxhQUFhLEdBQUcsQ0FBQyxJQUFTLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDcEMsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQztJQUNkLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDNUIsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUM1QixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3hCLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDMUIsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNwQixXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2hDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDbEIsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXLEVB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Q0FBQyx3QkFBd0IsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMvQyxJQUFJLEtBQUssWUFBWSxLQUFLLEVBQUUsQ0FBQztZQUMzQixPQUFPLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0MsQ0FBQztRQUNELE9BQU87WUFDTCxVQUFVLEVBQUUsR0FBRztZQUNmLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDO2dCQUNuQixPQUFPLEVBQUUscUJBQXFCO2dCQUM5QixLQUFLLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQzthQUNyQixDQUFDO1NBQ0gsQ0FBQztJQUNKLENBQUM7QUFDSCxDQUFDLENBQUM7QUFsSlcsUUFBQSxPQUFPLFdBa0psQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFQSUdhdGV3YXlQcm94eUV2ZW50LCBBUElHYXRld2F5UHJveHlSZXN1bHQgfSBmcm9tICdhd3MtbGFtYmRhJztcbmltcG9ydCB7IER5bmFtb0RCQ2xpZW50LCBRdWVyeUNvbW1hbmQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtZHluYW1vZGInO1xuaW1wb3J0IHtcbiAgQXRoZW5hQ2xpZW50LFxuICBTdGFydFF1ZXJ5RXhlY3V0aW9uQ29tbWFuZCxcbiAgR2V0UXVlcnlFeGVjdXRpb25Db21tYW5kLFxuICBHZXRRdWVyeVJlc3VsdHNDb21tYW5kLFxufSBmcm9tICdAYXdzLXNkay9jbGllbnQtYXRoZW5hJztcblxuY29uc3QgZHluYW1vQ2xpZW50ID0gbmV3IER5bmFtb0RCQ2xpZW50KHt9KTtcbmNvbnN0IGF0aGVuYUNsaWVudCA9IG5ldyBBdGhlbmFDbGllbnQoe30pO1xuY29uc3QgTE9HX1RBQkxFX05BTUUgPSBwcm9jZXNzLmVudi5MT0dfVEFCTEVfTkFNRSB8fCAnJztcbmNvbnN0IExPR19CVUNLRVRfTkFNRSA9IHByb2Nlc3MuZW52LkxPR19CVUNLRVRfTkFNRSB8fCAnJztcbmNvbnN0IEFUSEVOQV9XT1JLR1JPVVAgPSBwcm9jZXNzLmVudi5BVEhFTkFfV09SS0dST1VQIHx8ICdsbG1fbG9nc193b3JrZ3JvdXAnO1xuY29uc3QgQVRIRU5BX0RBVEFCQVNFID0gJ2FpX2dhdGV3YXlfbG9nc19kYic7XG5jb25zdCBQQUdFX1NJWkUgPSAxNTtcblxuY29uc3QgbWFwRHluYW1vSXRlbSA9IChpdGVtOiBhbnkpID0+ICh7XG4gIGlkOiBpdGVtLmlkPy5TLFxuICB0aHJlYWRfdHM6IGl0ZW0udGhyZWFkX3RzPy5TLFxuICB0aW1lc3RhbXA6IGl0ZW0udGltZXN0YW1wPy5TLFxuICBsYXRlbmN5OiBpdGVtLmxhdGVuY3k/Lk4sXG4gIHByb3ZpZGVyOiBpdGVtLnByb3ZpZGVyPy5TLFxuICBtb2RlbDogaXRlbS5tb2RlbD8uUyxcbiAgdG9rZW5zX3VzZWQ6IGl0ZW0udG9rZW5zX3VzZWQ/Lk4sXG4gIGNvc3Q6IGl0ZW0uY29zdD8uTixcbiAgcmF3X3JlcXVlc3Q6IGl0ZW0ucmF3X3JlcXVlc3Q/LlMsXG4gIHJhd19yZXNwb25zZTogaXRlbS5yYXdfcmVzcG9uc2U/LlMgfHwgbnVsbCxcbiAgZXJyb3JfbWVzc2FnZTogaXRlbS5lcnJvcl9tZXNzYWdlPy5TIHx8IG51bGwsXG4gIHN0YXR1czogaXRlbS5zdGF0dXM/LlMsXG59KTtcblxuY29uc3QgbWFwQXRoZW5hUm93ID0gKHJvdzogYW55KSA9PiB7XG4gIGNvbnN0IGRhdGEgPSByb3cuRGF0YSB8fCBbXTtcbiAgcmV0dXJuIHtcbiAgICBpZDogZGF0YVswXT8uVmFyQ2hhclZhbHVlLFxuICAgIHRpbWVzdGFtcDogZGF0YVsxXT8uVmFyQ2hhclZhbHVlLFxuICAgIHN0YXR1czogZGF0YVsyXT8uVmFyQ2hhclZhbHVlLFxuICAgIHByb3ZpZGVyOiBkYXRhWzNdPy5WYXJDaGFyVmFsdWUsXG4gICAgbW9kZWw6IGRhdGFbNF0/LlZhckNoYXJWYWx1ZSxcbiAgICBsYXRlbmN5OiBkYXRhWzVdPy5WYXJDaGFyVmFsdWUsXG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgaGFuZGxlciA9IGFzeW5jIChcbiAgZXZlbnQ6IEFQSUdhdGV3YXlQcm94eUV2ZW50XG4pOiBQcm9taXNlPEFQSUdhdGV3YXlQcm94eVJlc3VsdD4gPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHF1ZXJ5UGFyYW1zID0gZXZlbnQucXVlcnlTdHJpbmdQYXJhbWV0ZXJzIHx8IHt9O1xuICAgIGNvbnN0IG9sZGVyID0gcXVlcnlQYXJhbXMub2xkZXIgPT09ICd0cnVlJztcbiAgICBjb25zdCBwYWdlID0gcGFyc2VJbnQocXVlcnlQYXJhbXMucGFnZSB8fCAnMScsIDEwKTtcbiAgICBjb25zdCBuZXh0VG9rZW4gPSBxdWVyeVBhcmFtcy5uZXh0VG9rZW4gfHwgbnVsbDtcblxuICAgIGNvbnNvbGUubG9nKCdSZXF1ZXN0IHBhcmFtZXRlcnM6JywgeyBvbGRlciwgcGFnZSwgbmV4dFRva2VuIH0pO1xuXG4gICAgaWYgKGlzTmFOKHBhZ2UpIHx8IHBhZ2UgPCAxKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGF0dXNDb2RlOiA0MDAsXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgbWVzc2FnZTogJ0ludmFsaWQgcGFnZSBudW1iZXInIH0pLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBsZXQgbG9nczogYW55W10gPSBbXTtcbiAgICBsZXQgcmVzcG9uc2VOZXh0VG9rZW46IHN0cmluZyB8IG51bGwgPSBudWxsO1xuXG4gICAgaWYgKG9sZGVyKSB7XG4gICAgICBjb25zb2xlLmxvZygnUXVlcnlpbmcgQXRoZW5hIHdpdGggcGFnaW5hdGlvbiAoYWxsIGxvZ3MpJyk7XG4gICAgICBjb25zdCBhdGhlbmFRdWVyeSA9IGBcbiAgICAgICAgU0VMRUNUIGlkLCB0aW1lc3RhbXAsIHN0YXR1cywgcHJvdmlkZXIsIG1vZGVsLCBsYXRlbmN5XG4gICAgICAgIEZST00gXCJhaV9nYXRld2F5X2xvZ3NcIlxuICAgICAgICBPUkRFUiBCWSBkYXRlIERFU0MsIHRpbWVzdGFtcCBERVNDXG4gICAgICBgO1xuICAgICAgY29uc29sZS5sb2coJ0F0aGVuYSBxdWVyeTonLCBhdGhlbmFRdWVyeSk7XG5cbiAgICAgIGNvbnN0IHN0YXJ0UXVlcnkgPSBuZXcgU3RhcnRRdWVyeUV4ZWN1dGlvbkNvbW1hbmQoe1xuICAgICAgICBRdWVyeVN0cmluZzogYXRoZW5hUXVlcnksXG4gICAgICAgIFdvcmtHcm91cDogQVRIRU5BX1dPUktHUk9VUCxcbiAgICAgICAgUmVzdWx0Q29uZmlndXJhdGlvbjoge1xuICAgICAgICAgIE91dHB1dExvY2F0aW9uOiBgczM6Ly8ke0xPR19CVUNLRVRfTkFNRX0vYXRoZW5hLXJlc3VsdHMvYCxcbiAgICAgICAgfSxcbiAgICAgICAgUXVlcnlFeGVjdXRpb25Db250ZXh0OiB7XG4gICAgICAgICAgRGF0YWJhc2U6IEFUSEVOQV9EQVRBQkFTRSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgICAgY29uc3QgcXVlcnlFeGVjdXRpb24gPSBhd2FpdCBhdGhlbmFDbGllbnQuc2VuZChzdGFydFF1ZXJ5KTtcbiAgICAgIGNvbnN0IHF1ZXJ5RXhlY3V0aW9uSWQgPSBxdWVyeUV4ZWN1dGlvbi5RdWVyeUV4ZWN1dGlvbklkITtcbiAgICAgIGNvbnNvbGUubG9nKCdTdGFydGVkIEF0aGVuYSBxdWVyeSBleGVjdXRpb246JywgcXVlcnlFeGVjdXRpb25JZCk7XG5cbiAgICAgIGxldCBxdWVyeVN0YXRlOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgICBkbyB7XG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDEwMDApKTtcbiAgICAgICAgY29uc3QgcXVlcnlFeGVjdXRpb25SZXN1bHQgPSBhd2FpdCBhdGhlbmFDbGllbnQuc2VuZChcbiAgICAgICAgICBuZXcgR2V0UXVlcnlFeGVjdXRpb25Db21tYW5kKHsgUXVlcnlFeGVjdXRpb25JZDogcXVlcnlFeGVjdXRpb25JZCB9KVxuICAgICAgICApO1xuICAgICAgICBxdWVyeVN0YXRlID0gcXVlcnlFeGVjdXRpb25SZXN1bHQuUXVlcnlFeGVjdXRpb24/LlN0YXR1cz8uU3RhdGU7XG4gICAgICAgIGNvbnNvbGUubG9nKCdBdGhlbmEgcXVlcnkgc3RhdGU6JywgcXVlcnlTdGF0ZSk7XG4gICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgICdRdWVyeSBleGVjdXRpb24gZGV0YWlsczonLFxuICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHF1ZXJ5RXhlY3V0aW9uUmVzdWx0LlF1ZXJ5RXhlY3V0aW9uKVxuICAgICAgICApO1xuICAgICAgfSB3aGlsZSAocXVlcnlTdGF0ZSA9PT0gJ1JVTk5JTkcnIHx8IHF1ZXJ5U3RhdGUgPT09ICdRVUVVRUQnKTtcblxuICAgICAgaWYgKHF1ZXJ5U3RhdGUgPT09ICdGQUlMRUQnKSB7XG4gICAgICAgIGNvbnN0IGVycm9yRGV0YWlscyA9IGF3YWl0IGF0aGVuYUNsaWVudC5zZW5kKFxuICAgICAgICAgIG5ldyBHZXRRdWVyeUV4ZWN1dGlvbkNvbW1hbmQoeyBRdWVyeUV4ZWN1dGlvbklkOiBxdWVyeUV4ZWN1dGlvbklkIH0pXG4gICAgICAgICk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnQXRoZW5hIHF1ZXJ5IGZhaWxlZDogJyArXG4gICAgICAgICAgICBlcnJvckRldGFpbHMuUXVlcnlFeGVjdXRpb24/LlN0YXR1cz8uU3RhdGVDaGFuZ2VSZWFzb25cbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZ2V0UXVlcnlSZXN1bHRzSW5wdXQ6IGFueSA9IHtcbiAgICAgICAgUXVlcnlFeGVjdXRpb25JZDogcXVlcnlFeGVjdXRpb25JZCxcbiAgICAgICAgTWF4UmVzdWx0czogUEFHRV9TSVpFICsgMSwgLy8gKzEgZm9yIGhlYWRlciBvbiBmaXJzdCBwYWdlXG4gICAgICB9O1xuICAgICAgaWYgKG5leHRUb2tlbikge1xuICAgICAgICBnZXRRdWVyeVJlc3VsdHNJbnB1dC5OZXh0VG9rZW4gPSBuZXh0VG9rZW47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHF1ZXJ5UmVzdWx0cyA9IGF3YWl0IGF0aGVuYUNsaWVudC5zZW5kKFxuICAgICAgICBuZXcgR2V0UXVlcnlSZXN1bHRzQ29tbWFuZChnZXRRdWVyeVJlc3VsdHNJbnB1dClcbiAgICAgICk7XG4gICAgICBjb25zb2xlLmxvZygnUmF3IEF0aGVuYSByZXN1bHRzOicsIEpTT04uc3RyaW5naWZ5KHF1ZXJ5UmVzdWx0cywgbnVsbCwgMikpO1xuXG4gICAgICBjb25zdCByb3dzID0gcXVlcnlSZXN1bHRzLlJlc3VsdFNldD8uUm93cyB8fCBbXTtcbiAgICAgIGNvbnNvbGUubG9nKCdSYXcgcm93cyBjb3VudDonLCByb3dzLmxlbmd0aCk7XG4gICAgICBjb25zb2xlLmxvZygnUmF3IHJvd3M6JywgSlNPTi5zdHJpbmdpZnkocm93cywgbnVsbCwgMikpO1xuXG4gICAgICAvLyBTaW1wbGlmeTogU2tpcCBoZWFkZXIgb25seSBvbiBmaXJzdCBwYWdlLCBsb2cgYmVmb3JlIG1hcHBpbmdcbiAgICAgIGxvZ3MgPSAoIW5leHRUb2tlbiAmJiByb3dzLmxlbmd0aCA+IDAgPyByb3dzLnNsaWNlKDEpIDogcm93cykubWFwKFxuICAgICAgICBtYXBBdGhlbmFSb3dcbiAgICAgICk7XG4gICAgICBjb25zb2xlLmxvZygnTWFwcGVkIGxvZ3MgZnJvbSBBdGhlbmE6Jywge1xuICAgICAgICBjb3VudDogbG9ncy5sZW5ndGgsXG4gICAgICAgIGxvZ3M6IEpTT04uc3RyaW5naWZ5KGxvZ3MpLFxuICAgICAgfSk7XG5cbiAgICAgIHJlc3BvbnNlTmV4dFRva2VuID0gcXVlcnlSZXN1bHRzLk5leHRUb2tlbiB8fCBudWxsO1xuICAgICAgY29uc29sZS5sb2coJ0F0aGVuYSBOZXh0VG9rZW46JywgcmVzcG9uc2VOZXh0VG9rZW4pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZygnUXVlcnlpbmcgRHluYW1vREIgd2l0aCBwYWdpbmF0aW9uIChhbGwgbG9ncyknKTtcbiAgICAgIGNvbnN0IGNsaWVudExhc3RLZXkgPSBuZXh0VG9rZW5cbiAgICAgICAgPyBKU09OLnBhcnNlKGRlY29kZVVSSUNvbXBvbmVudChuZXh0VG9rZW4pKVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgIGNvbnN0IGR5bmFtb1F1ZXJ5ID0gbmV3IFF1ZXJ5Q29tbWFuZCh7XG4gICAgICAgIFRhYmxlTmFtZTogTE9HX1RBQkxFX05BTUUsXG4gICAgICAgIEtleUNvbmRpdGlvbkV4cHJlc3Npb246ICdQSyA9IDpwaycsXG4gICAgICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXM6IHtcbiAgICAgICAgICAnOnBrJzogeyBTOiAnTE9HJyB9LFxuICAgICAgICB9LFxuICAgICAgICBMaW1pdDogUEFHRV9TSVpFLFxuICAgICAgICBFeGNsdXNpdmVTdGFydEtleTogY2xpZW50TGFzdEtleSxcbiAgICAgICAgU2NhbkluZGV4Rm9yd2FyZDogdHJ1ZSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBkeW5hbW9SZXN1bHQgPSBhd2FpdCBkeW5hbW9DbGllbnQuc2VuZChkeW5hbW9RdWVyeSk7XG4gICAgICBsb2dzID0gZHluYW1vUmVzdWx0Lkl0ZW1zPy5tYXAobWFwRHluYW1vSXRlbSkgfHwgW107XG4gICAgICByZXNwb25zZU5leHRUb2tlbiA9IGR5bmFtb1Jlc3VsdC5MYXN0RXZhbHVhdGVkS2V5XG4gICAgICAgID8gZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGR5bmFtb1Jlc3VsdC5MYXN0RXZhbHVhdGVkS2V5KSlcbiAgICAgICAgOiBudWxsO1xuICAgICAgY29uc29sZS5sb2coJ0R5bmFtb0RCIHJlc3VsdHM6Jywge1xuICAgICAgICBpdGVtczogbG9ncy5sZW5ndGgsXG4gICAgICAgIG5leHRUb2tlbjogcmVzcG9uc2VOZXh0VG9rZW4sXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZygnU3VjY2Vzc2Z1bGx5IHJldHVybmluZyByZXN1bHRzJyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXR1c0NvZGU6IDIwMCxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgbG9ncyxcbiAgICAgICAgcGFnZSxcbiAgICAgICAgcGFnZVNpemU6IFBBR0VfU0laRSxcbiAgICAgICAgbmV4dFRva2VuOiByZXNwb25zZU5leHRUb2tlbixcbiAgICAgIH0pLFxuICAgIH07XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgaW4gbG9ncyBoYW5kbGVyOicsIGVycm9yKTtcbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3Igc3RhY2s6JywgZXJyb3Iuc3RhY2spO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgc3RhdHVzQ29kZTogNTAwLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBtZXNzYWdlOiAnRXJyb3IgZmV0Y2hpbmcgbG9ncycsXG4gICAgICAgIGVycm9yOiBTdHJpbmcoZXJyb3IpLFxuICAgICAgfSksXG4gICAgfTtcbiAgfVxufTtcbiJdfQ==