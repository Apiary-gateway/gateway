"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkSimpleCache = checkSimpleCache;
exports.addToSimpleCache = addToSimpleCache;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
// TODOS
// add to README - optional `userId` field in request body for cache partitioning
// add configuration to `callLLM` function to conditionally check just simple cache or both simple & semantic
const dynamoClient = new client_dynamodb_1.DynamoDBClient();
const CACHE_TABLE_NAME = process.env.CACHE_TABLE_NAME || '';
const CACHE_TTL_SECONDS = 60 * 5; // 5 minutes
function getUserId(userId) {
    return userId ? userId : 'global';
}
function getCacheKey(prompt, provider, model) {
    return `${provider || ''}${model || ''}${prompt}`;
}
async function checkSimpleCache(prompt, userId, provider, model) {
    userId = getUserId(userId);
    const cacheKey = getCacheKey(prompt, provider, model);
    const input = {
        TableName: CACHE_TABLE_NAME,
        Key: {
            userId: {
                S: userId
            },
            cacheKey: {
                S: cacheKey
            }
        },
        // only send back `llmResponse` field?
        // ProjectionExpression: 'llmResponse',
    };
    const command = new client_dynamodb_1.GetItemCommand(input);
    const result = await dynamoClient.send(command);
    // console.log('fetched from Dynamo: ', result.Item ? result.Item.llmResponse : 'no cache hit');
    return result.Item ? result.Item.llmResponse.S?.trim() : null;
}
// Function to store result in cache
async function addToSimpleCache(prompt, llmResponse, userId, provider, model) {
    userId = getUserId(userId);
    const cacheKey = getCacheKey(prompt, provider, model);
    const ttl = Math.floor(Date.now() / 1000) + CACHE_TTL_SECONDS;
    const input = {
        TableName: CACHE_TABLE_NAME,
        Item: {
            userId: {
                S: userId
            },
            cacheKey: {
                S: cacheKey
            },
            provider: {
                S: provider || ''
            },
            model: {
                S: model || ''
            },
            llmResponse: {
                S: JSON.stringify(llmResponse)
            },
            ttl: {
                N: String(ttl)
            }
        },
    };
    const command = new client_dynamodb_1.PutItemCommand(input);
    await dynamoClient.send(command);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlQ2FjaGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9sYW1iZGEvdXRpbC9zaW1wbGVDYWNoZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQTJCQSw0Q0EyQkM7QUFHRCw0Q0FxQ0M7QUE5RkQsOERBSWtDO0FBR2xDLFFBQVE7QUFDUixpRkFBaUY7QUFDakYsNkdBQTZHO0FBRTdHLE1BQU0sWUFBWSxHQUFHLElBQUksZ0NBQWMsRUFBRSxDQUFDO0FBQzFDLE1BQU0sZ0JBQWdCLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsSUFBSSxFQUFFLENBQUM7QUFDNUQsTUFBTSxpQkFBaUIsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsWUFBWTtBQUU5QyxTQUFTLFNBQVMsQ0FBQyxNQUFlO0lBQ2hDLE9BQU8sTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztBQUNwQyxDQUFDO0FBRUQsU0FBUyxXQUFXLENBQ2xCLE1BQWMsRUFDZCxRQUFpQixFQUNqQixLQUFjO0lBRWQsT0FBTyxHQUFHLFFBQVEsSUFBSSxFQUFFLEdBQUcsS0FBSyxJQUFJLEVBQUUsR0FBRyxNQUFNLEVBQUUsQ0FBQztBQUNwRCxDQUFDO0FBRU0sS0FBSyxVQUFVLGdCQUFnQixDQUNwQyxNQUFjLEVBQ2QsTUFBZSxFQUNmLFFBQWlCLEVBQ2pCLEtBQWM7SUFFZCxNQUFNLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzNCLE1BQU0sUUFBUSxHQUFHLFdBQVcsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRXRELE1BQU0sS0FBSyxHQUFHO1FBQ1osU0FBUyxFQUFFLGdCQUFnQjtRQUMzQixHQUFHLEVBQUU7WUFDSCxNQUFNLEVBQUU7Z0JBQ04sQ0FBQyxFQUFFLE1BQU07YUFDVjtZQUNELFFBQVEsRUFBRTtnQkFDUixDQUFDLEVBQUUsUUFBUTthQUNaO1NBQ0Y7UUFDRCxzQ0FBc0M7UUFDdEMsdUNBQXVDO0tBQ3hDLENBQUM7SUFFRixNQUFNLE9BQU8sR0FBRyxJQUFJLGdDQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUMsTUFBTSxNQUFNLEdBQUcsTUFBTSxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2hELGdHQUFnRztJQUNoRyxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0FBQ2hFLENBQUM7QUFFRCxvQ0FBb0M7QUFDN0IsS0FBSyxVQUFVLGdCQUFnQixDQUNwQyxNQUFjLEVBQ2QsV0FBbUIsRUFDbkIsTUFBZSxFQUNmLFFBQWlCLEVBQ2pCLEtBQWM7SUFFZCxNQUFNLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzNCLE1BQU0sUUFBUSxHQUFHLFdBQVcsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3RELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLGlCQUFpQixDQUFDO0lBRTlELE1BQU0sS0FBSyxHQUFHO1FBQ1osU0FBUyxFQUFFLGdCQUFnQjtRQUMzQixJQUFJLEVBQUU7WUFDSixNQUFNLEVBQUU7Z0JBQ04sQ0FBQyxFQUFFLE1BQU07YUFDVjtZQUNELFFBQVEsRUFBRTtnQkFDUixDQUFDLEVBQUUsUUFBUTthQUNaO1lBQ0QsUUFBUSxFQUFFO2dCQUNSLENBQUMsRUFBRSxRQUFRLElBQUksRUFBRTthQUNsQjtZQUNELEtBQUssRUFBRTtnQkFDTCxDQUFDLEVBQUUsS0FBSyxJQUFJLEVBQUU7YUFDZjtZQUNELFdBQVcsRUFBRTtnQkFDWCxDQUFDLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUM7YUFDL0I7WUFDRCxHQUFHLEVBQUU7Z0JBQ0gsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUM7YUFDZjtTQUNGO0tBQ0YsQ0FBQztJQUVGLE1BQU0sT0FBTyxHQUFHLElBQUksZ0NBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxQyxNQUFNLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDbkMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFxuICBEeW5hbW9EQkNsaWVudCwgXG4gIEdldEl0ZW1Db21tYW5kLFxuICBQdXRJdGVtQ29tbWFuZCxcbn0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1keW5hbW9kYlwiO1xuaW1wb3J0IHR5cGUgeyBDb21wbGV0aW9uUmVzcG9uc2UgfSBmcm9tICd0b2tlbi5qcyc7XG5cbi8vIFRPRE9TXG4vLyBhZGQgdG8gUkVBRE1FIC0gb3B0aW9uYWwgYHVzZXJJZGAgZmllbGQgaW4gcmVxdWVzdCBib2R5IGZvciBjYWNoZSBwYXJ0aXRpb25pbmdcbi8vIGFkZCBjb25maWd1cmF0aW9uIHRvIGBjYWxsTExNYCBmdW5jdGlvbiB0byBjb25kaXRpb25hbGx5IGNoZWNrIGp1c3Qgc2ltcGxlIGNhY2hlIG9yIGJvdGggc2ltcGxlICYgc2VtYW50aWNcblxuY29uc3QgZHluYW1vQ2xpZW50ID0gbmV3IER5bmFtb0RCQ2xpZW50KCk7XG5jb25zdCBDQUNIRV9UQUJMRV9OQU1FID0gcHJvY2Vzcy5lbnYuQ0FDSEVfVEFCTEVfTkFNRSB8fCAnJztcbmNvbnN0IENBQ0hFX1RUTF9TRUNPTkRTID0gNjAgKiA1OyAvLyA1IG1pbnV0ZXNcblxuZnVuY3Rpb24gZ2V0VXNlcklkKHVzZXJJZD86IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiB1c2VySWQgPyB1c2VySWQgOiAnZ2xvYmFsJztcbn1cblxuZnVuY3Rpb24gZ2V0Q2FjaGVLZXkoICBcbiAgcHJvbXB0OiBzdHJpbmcsXG4gIHByb3ZpZGVyPzogc3RyaW5nLCBcbiAgbW9kZWw/OiBzdHJpbmdcbik6IHN0cmluZyB7XG4gIHJldHVybiBgJHtwcm92aWRlciB8fCAnJ30ke21vZGVsIHx8ICcnfSR7cHJvbXB0fWA7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjaGVja1NpbXBsZUNhY2hlKFxuICBwcm9tcHQ6IHN0cmluZyxcbiAgdXNlcklkPzogc3RyaW5nLCBcbiAgcHJvdmlkZXI/OiBzdHJpbmcsIFxuICBtb2RlbD86IHN0cmluZywgXG4pIHtcbiAgdXNlcklkID0gZ2V0VXNlcklkKHVzZXJJZCk7XG4gIGNvbnN0IGNhY2hlS2V5ID0gZ2V0Q2FjaGVLZXkocHJvbXB0LCBwcm92aWRlciwgbW9kZWwpO1xuXG4gIGNvbnN0IGlucHV0ID0ge1xuICAgIFRhYmxlTmFtZTogQ0FDSEVfVEFCTEVfTkFNRSxcbiAgICBLZXk6IHsgXG4gICAgICB1c2VySWQ6IHtcbiAgICAgICAgUzogdXNlcklkXG4gICAgICB9LCBcbiAgICAgIGNhY2hlS2V5OiB7XG4gICAgICAgIFM6IGNhY2hlS2V5XG4gICAgICB9IFxuICAgIH0sXG4gICAgLy8gb25seSBzZW5kIGJhY2sgYGxsbVJlc3BvbnNlYCBmaWVsZD9cbiAgICAvLyBQcm9qZWN0aW9uRXhwcmVzc2lvbjogJ2xsbVJlc3BvbnNlJyxcbiAgfTtcbiAgXG4gIGNvbnN0IGNvbW1hbmQgPSBuZXcgR2V0SXRlbUNvbW1hbmQoaW5wdXQpO1xuICBjb25zdCByZXN1bHQgPSBhd2FpdCBkeW5hbW9DbGllbnQuc2VuZChjb21tYW5kKTtcbiAgLy8gY29uc29sZS5sb2coJ2ZldGNoZWQgZnJvbSBEeW5hbW86ICcsIHJlc3VsdC5JdGVtID8gcmVzdWx0Lkl0ZW0ubGxtUmVzcG9uc2UgOiAnbm8gY2FjaGUgaGl0Jyk7XG4gIHJldHVybiByZXN1bHQuSXRlbSA/IHJlc3VsdC5JdGVtLmxsbVJlc3BvbnNlLlM/LnRyaW0oKSA6IG51bGw7XG59XG5cbi8vIEZ1bmN0aW9uIHRvIHN0b3JlIHJlc3VsdCBpbiBjYWNoZVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFkZFRvU2ltcGxlQ2FjaGUoXG4gIHByb21wdDogc3RyaW5nLCBcbiAgbGxtUmVzcG9uc2U6IHN0cmluZyxcbiAgdXNlcklkPzogc3RyaW5nLCBcbiAgcHJvdmlkZXI/OiBzdHJpbmcsIFxuICBtb2RlbD86IHN0cmluZywgXG4pIHtcbiAgdXNlcklkID0gZ2V0VXNlcklkKHVzZXJJZCk7XG4gIGNvbnN0IGNhY2hlS2V5ID0gZ2V0Q2FjaGVLZXkocHJvbXB0LCBwcm92aWRlciwgbW9kZWwpO1xuICBjb25zdCB0dGwgPSBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKSArIENBQ0hFX1RUTF9TRUNPTkRTO1xuXG4gIGNvbnN0IGlucHV0ID0ge1xuICAgIFRhYmxlTmFtZTogQ0FDSEVfVEFCTEVfTkFNRSxcbiAgICBJdGVtOiB7IFxuICAgICAgdXNlcklkOiB7XG4gICAgICAgIFM6IHVzZXJJZFxuICAgICAgfSwgXG4gICAgICBjYWNoZUtleToge1xuICAgICAgICBTOiBjYWNoZUtleVxuICAgICAgfSxcbiAgICAgIHByb3ZpZGVyOiB7XG4gICAgICAgIFM6IHByb3ZpZGVyIHx8ICcnXG4gICAgICB9LFxuICAgICAgbW9kZWw6IHtcbiAgICAgICAgUzogbW9kZWwgfHwgJydcbiAgICAgIH0sIFxuICAgICAgbGxtUmVzcG9uc2U6IHtcbiAgICAgICAgUzogSlNPTi5zdHJpbmdpZnkobGxtUmVzcG9uc2UpXG4gICAgICB9LCBcbiAgICAgIHR0bDoge1xuICAgICAgICBOOiBTdHJpbmcodHRsKVxuICAgICAgfVxuICAgIH0sXG4gIH07XG4gIFxuICBjb25zdCBjb21tYW5kID0gbmV3IFB1dEl0ZW1Db21tYW5kKGlucHV0KTtcbiAgYXdhaXQgZHluYW1vQ2xpZW50LnNlbmQoY29tbWFuZCk7XG59XG4iXX0=