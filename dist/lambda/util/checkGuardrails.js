"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkGuardrailsLevelTwo = checkGuardrailsLevelTwo;
exports.checkGuardrails = checkGuardrails;
const vectorSearch_1 = require("./vectorSearch");
const getConfig_1 = require("./getConfig");
const sentence_splitter_1 = require("sentence-splitter");
const guardrailsIndex = process.env.OPENSEARCH_GUARDRAILS_INDEX;
function checkGuardrailsLevelOne(llmResponse, log) {
    const config = (0, getConfig_1.getConfig)();
    for (const word of config.guardrails.restrictedWords) {
        if (llmResponse.toLowerCase().includes(word.toLowerCase())) {
            log.guardrailHit('one', word);
            return { isBlocked: true, match: word };
        }
    }
    return { isBlocked: false };
}
async function checkGuardrailsLevelTwo(prompt, llmResponse, log) {
    const config = (0, getConfig_1.getConfig)();
    const chunks = chunkTextBySentences(prompt + '. ' + llmResponse, 3);
    if (!guardrailsIndex) {
        throw new Error("OPENSEARCH_GUARDRAILS_INDEX is not set");
    }
    for (const chunk of chunks) {
        const embedding = await (0, vectorSearch_1.getEmbedding)(chunk);
        const matches = await (0, vectorSearch_1.searchKNN)(guardrailsIndex, embedding, 1);
        const topMatch = matches[0];
        const similarity = topMatch._score ?? 0;
        if (similarity > config.guardrails.threshold) {
            log.guardrailHit('two', topMatch._source.text);
            return { isBlocked: true, match: topMatch._source.text };
        }
    }
    return { isBlocked: false };
}
async function checkGuardrails(prompt, llmResponse, log) {
    const config = (0, getConfig_1.getConfig)();
    try {
        if (config.guardrails.sensitivityLevel === 0) {
            return { isBlocked: false };
        }
        const levelOne = checkGuardrailsLevelOne(llmResponse, log);
        if (levelOne.isBlocked) {
            return levelOne;
        }
        if (config.guardrails.sensitivityLevel === 2) {
            const levelTwo = await checkGuardrailsLevelTwo(prompt, llmResponse, log);
            return levelTwo;
        }
        return { isBlocked: false };
    }
    catch (error) {
        console.log('error in checkGuardrails: ', error);
        return { isBlocked: false };
    }
}
function chunkTextBySentences(text, sentencesPerChunk) {
    const sentences = (0, sentence_splitter_1.split)(text)
        .filter(node => node.type === 'Sentence')
        .map(node => node.raw.trim())
        .filter(Boolean);
    const chunks = [];
    for (let i = 0; i < sentences.length; i += sentencesPerChunk - 1) {
        const chunk = sentences.slice(i, i + sentencesPerChunk).join(' ');
        chunks.push(chunk);
        if (chunk)
            chunks.push(chunk);
    }
    return chunks;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tHdWFyZHJhaWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGFtYmRhL3V0aWwvY2hlY2tHdWFyZHJhaWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBbUJBLDBEQXFCQztBQUVELDBDQXlCQztBQW5FRCxpREFBeUQ7QUFDekQsMkNBQXdDO0FBQ3hDLHlEQUE0RDtBQUk1RCxNQUFNLGVBQWUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLDJCQUEyQixDQUFDO0FBRWhFLFNBQVMsdUJBQXVCLENBQUMsV0FBbUIsRUFBRSxHQUFlO0lBQ2pFLE1BQU0sTUFBTSxHQUFHLElBQUEscUJBQVMsR0FBRSxDQUFDO0lBQzNCLEtBQUssTUFBTSxJQUFJLElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUNuRCxJQUFJLFdBQVcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUUsQ0FBQztZQUN6RCxHQUFHLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQTtZQUM3QixPQUFPLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUM7UUFDNUMsQ0FBQztJQUNMLENBQUM7SUFDRCxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxDQUFDO0FBQ2hDLENBQUM7QUFFTSxLQUFLLFVBQVUsdUJBQXVCLENBQUMsTUFBYyxFQUFFLFdBQW1CLEVBQUUsR0FBZTtJQUM5RixNQUFNLE1BQU0sR0FBRyxJQUFBLHFCQUFTLEdBQUUsQ0FBQztJQUMzQixNQUFNLE1BQU0sR0FBRyxvQkFBb0IsQ0FBQyxNQUFNLEdBQUcsSUFBSSxHQUFHLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUVwRSxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDbkIsTUFBTSxJQUFJLEtBQUssQ0FBQyx3Q0FBd0MsQ0FB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QixJQUFJLEtBQUs7WUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxPQUFPLE1BQU0sQ0FBQztBQUNsQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0RW1iZWRkaW5nLCBzZWFyY2hLTk4gfSBmcm9tIFwiLi92ZWN0b3JTZWFyY2hcIjtcbmltcG9ydCB7IGdldENvbmZpZyB9IGZyb20gXCIuL2dldENvbmZpZ1wiO1xuaW1wb3J0IHsgc3BsaXQgYXMgc3BsaXRTZW50ZW5jZXMgfSBmcm9tICdzZW50ZW5jZS1zcGxpdHRlcic7XG5pbXBvcnQgeyBHdWFyZHJhaWxSZXN1bHQgfSBmcm9tIFwiLi90eXBlc1wiO1xuaW1wb3J0IHsgUm91dGluZ0xvZyB9IGZyb20gJy4vcm91dGluZ0xvZyc7XG5cbmNvbnN0IGd1YXJkcmFpbHNJbmRleCA9IHByb2Nlc3MuZW52Lk9QRU5TRUFSQ0hfR1VBUkRSQUlMU19JTkRFWDtcblxuZnVuY3Rpb24gY2hlY2tHdWFyZHJhaWxzTGV2ZWxPbmUobGxtUmVzcG9uc2U6IHN0cmluZywgbG9nOiBSb3V0aW5nTG9nKTogR3VhcmRyYWlsUmVzdWx0IHtcbiAgICBjb25zdCBjb25maWcgPSBnZXRDb25maWcoKTtcbiAgICBmb3IgKGNvbnN0IHdvcmQgb2YgY29uZmlnLmd1YXJkcmFpbHMucmVzdHJpY3RlZFdvcmRzKSB7XG4gICAgICAgIGlmIChsbG1SZXNwb25zZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHdvcmQudG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgICAgICAgIGxvZy5ndWFyZHJhaWxIaXQoJ29uZScsIHdvcmQpXG4gICAgICAgICAgICByZXR1cm4geyBpc0Jsb2NrZWQ6IHRydWUsIG1hdGNoOiB3b3JkIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgaXNCbG9ja2VkOiBmYWxzZSB9O1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY2hlY2tHdWFyZHJhaWxzTGV2ZWxUd28ocHJvbXB0OiBzdHJpbmcsIGxsbVJlc3BvbnNlOiBzdHJpbmcsIGxvZzogUm91dGluZ0xvZyk6IFByb21pc2U8R3VhcmRyYWlsUmVzdWx0PiB7XG4gICAgY29uc3QgY29uZmlnID0gZ2V0Q29uZmlnKCk7XG4gICAgY29uc3QgY2h1bmtzID0gY2h1bmtUZXh0QnlTZW50ZW5jZXMocHJvbXB0ICsgJy4gJyArIGxsbVJlc3BvbnNlLCAzKTtcblxuICAgIGlmICghZ3VhcmRyYWlsc0luZGV4KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk9QRU5TRUFSQ0hfR1VBUkRSQUlMU19JTkRFWCBpcyBub3Qgc2V0XCIpO1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgY2h1bmsgb2YgY2h1bmtzKSB7XG4gICAgICAgIGNvbnN0IGVtYmVkZGluZyA9IGF3YWl0IGdldEVtYmVkZGluZyhjaHVuayk7XG4gICAgICAgIGNvbnN0IG1hdGNoZXMgPSBhd2FpdCBzZWFyY2hLTk4oZ3VhcmRyYWlsc0luZGV4LCBlbWJlZGRpbmcsIDEpO1xuICAgICAgICBjb25zdCB0b3BNYXRjaCA9IG1hdGNoZXNbMF07XG4gICAgICAgIGNvbnN0IHNpbWlsYXJpdHkgPSB0b3BNYXRjaC5fc2NvcmUgPz8gMDtcblxuICAgICAgICBpZiAoc2ltaWxhcml0eSA+IGNvbmZpZy5ndWFyZHJhaWxzLnRocmVzaG9sZCkge1xuICAgICAgICAgICAgbG9nLmd1YXJkcmFpbEhpdCgndHdvJywgdG9wTWF0Y2guX3NvdXJjZS50ZXh0KVxuICAgICAgICAgICAgcmV0dXJuIHsgaXNCbG9ja2VkOiB0cnVlLCBtYXRjaDogdG9wTWF0Y2guX3NvdXJjZS50ZXh0IH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4geyBpc0Jsb2NrZWQ6IGZhbHNlIH07XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjaGVja0d1YXJkcmFpbHMocHJvbXB0OiBzdHJpbmcsIGxsbVJlc3BvbnNlOiBzdHJpbmcsIGxvZzogUm91dGluZ0xvZyk6IFByb21pc2U8R3VhcmRyYWlsUmVzdWx0PiB7XG4gICAgY29uc3QgY29uZmlnID0gZ2V0Q29uZmlnKCk7XG5cbiAgICB0cnkge1xuICAgICAgICBpZiAoY29uZmlnLmd1YXJkcmFpbHMuc2Vuc2l0aXZpdHlMZXZlbCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgaXNCbG9ja2VkOiBmYWxzZSB9O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbGV2ZWxPbmUgPSBjaGVja0d1YXJkcmFpbHNMZXZlbE9uZShsbG1SZXNwb25zZSwgbG9nKTtcblxuICAgICAgICBpZiAobGV2ZWxPbmUuaXNCbG9ja2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gbGV2ZWxPbmU7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgaWYgKGNvbmZpZy5ndWFyZHJhaWxzLnNlbnNpdGl2aXR5TGV2ZWwgPT09IDIpIHtcbiAgICAgICAgICAgIGNvbnN0IGxldmVsVHdvID0gYXdhaXQgY2hlY2tHdWFyZHJhaWxzTGV2ZWxUd28ocHJvbXB0LCBsbG1SZXNwb25zZSwgbG9nKTtcbiAgICAgICAgICAgIHJldHVybiBsZXZlbFR3bztcbiAgICAgICAgfVxuICAgIFxuICAgICAgICByZXR1cm4geyBpc0Jsb2NrZWQ6IGZhbHNlIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmxvZygnZXJyb3IgaW4gY2hlY2tHdWFyZHJhaWxzOiAnLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IGlzQmxvY2tlZDogZmFsc2UgfTtcbiAgICB9XG5cbn1cblxuZnVuY3Rpb24gY2h1bmtUZXh0QnlTZW50ZW5jZXModGV4dDogc3RyaW5nLCBzZW50ZW5jZXNQZXJDaHVuazogbnVtYmVyKTogc3RyaW5nW10ge1xuICAgIGNvbnN0IHNlbnRlbmNlcyA9IHNwbGl0U2VudGVuY2VzKHRleHQpXG4gICAgICAgIC5maWx0ZXIobm9kZSA9PiBub2RlLnR5cGUgPT09ICdTZW50ZW5jZScpXG4gICAgICAgIC5tYXAobm9kZSA9PiBub2RlLnJhdy50cmltKCkpXG4gICAgICAgIC5maWx0ZXIoQm9vbGVhbik7XG5cbiAgICBjb25zdCBjaHVua3M6IHN0cmluZ1tdID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlbnRlbmNlcy5sZW5ndGg7IGkgKz0gc2VudGVuY2VzUGVyQ2h1bmsgLSAxKSB7XG4gICAgICAgIGNvbnN0IGNodW5rID0gc2VudGVuY2VzLnNsaWNlKGksIGkgKyBzZW50ZW5jZXNQZXJDaHVuaykuam9pbignICcpO1xuICAgICAgICBjaHVua3MucHVzaChjaHVuayk7XG4gICAgICAgIGlmIChjaHVuaykgY2h1bmtzLnB1c2goY2h1bmspO1xuICAgIH1cblxuICAgIHJldHVybiBjaHVua3M7XG59XG4iXX0=