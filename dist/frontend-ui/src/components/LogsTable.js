"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function LogsTable({ logs, pageNumbers, currentPage, nextToken, onNext, onPageSelect, onDetailsClick, }) {
    // Format timestamp to human-readable local date and time
    const formatDateTime = (timestamp) => {
        return new Date(timestamp).toLocaleString();
    };
    return (<div>
      <table className="logs-table">
        <thead>
          <tr>
            <th>Time</th>
            <th>Thread ID</th>
            <th>Status</th>
            <th>Model</th>
            <th>Provider</th>
            <th>Tokens</th>
            <th>Cost</th>
            <th>Details</th>
          </tr>
        </thead>
        <tbody>
          {logs.map((log) => (<tr key={log.id}>
              <td>{formatDateTime(log.timestamp)}</td>
              <td>{log.thread_ts}</td>
              <td className={log.status === 'failure' ? 'status-error' : ''}>
                {log.status}
              </td>
              <td>{log.model}</td>
              <td>{log.provider}</td>
              <td>{log.raw_response?.usage.total_tokens || 'NA'}</td>
              <td>{log.cost}</td>
              <td>
                <button className="details-button" onClick={() => onDetailsClick(log)}>
                  Details
                </button>
              </td>
            </tr>))}
        </tbody>
      </table>
      <div className="pagination">
        {pageNumbers.map((page) => (<button key={page} className={`page-button ${page === currentPage ? 'active' : ''}`} onClick={() => onPageSelect(page)}>
            {page}
          </button>))}
        <button className="next-button" onClick={onNext} disabled={!nextToken}>
          Next â†’
        </button>
        <span className="page-info">Page {currentPage}</span>
      </div>
    </div>);
}
exports.default = LogsTable;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9nc1RhYmxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vZnJvbnRlbmQtdWkvc3JjL2NvbXBvbmVudHMvTG9nc1RhYmxlLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQVlBLFNBQVMsU0FBUyxDQUFDLEVBQ2pCLElBQUksRUFDSixXQUFXLEVBQ1gsV0FBVyxFQUNYLFNBQVMsRUFDVCxNQUFNLEVBQ04sWUFBWSxFQUNaLGNBQWMsR0FDQztJQUNmLHlEQUF5RDtJQUN6RCxNQUFNLGNBQWMsR0FBRyxDQUFDLFNBQWlCLEVBQUUsRUFBRTtRQUMzQyxPQUFPLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQzlDLENBQUMsQ0FBQztJQUVGLE9BQU8sQ0FDTCxDQUFDLEdBQUcsQ0FDRjtNQUFBLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQzNCO1FBQUEsQ0FBQyxLQUFLLENBQ0o7VUFBQSxDQUFDLEVBQUUsQ0FDRDtZQUFBLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLENBQ1o7WUFBQSxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUNqQjtZQUFBLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQ2Q7WUFBQSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUNiO1lBQUEsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FDaEI7WUFBQSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUNkO1lBQUEsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FDWjtZQUFBLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQ2pCO1VBQUEsRUFBRSxFQUFFLENBQ047UUFBQSxFQUFFLEtBQUssQ0FDUDtRQUFBLENBQUMsS0FBSyxDQUNKO1VBQUEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUNqQixDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQ2Q7Y0FBQSxDQUFDLEVBQUUsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQ3ZDO2NBQUEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUUsRUFBRSxDQUN2QjtjQUFBLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUM1RDtnQkFBQSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQ2I7Y0FBQSxFQUFFLEVBQUUsQ0FDSjtjQUFBLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FDbkI7Y0FBQSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLENBQ3RCO2NBQUEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLEtBQUssQ0FBQyxZQUFZLElBQUksSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUN0RDtjQUFBLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FDbEI7Y0FBQSxDQUFDLEVBQUUsQ0FDRDtnQkFBQSxDQUFDLE1BQU0sQ0FDTCxTQUFTLENBQUMsZ0JBQWdCLENBQzFCLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUVuQzs7Z0JBQ0YsRUFBRSxNQUFNLENBQ1Y7Y0FBQSxFQUFFLEVBQUUsQ0FDTjtZQUFBLEVBQUUsRUFBRSxDQUFDLENBQ04sQ0FBQyxDQUNKO1FBQUEsRUFBRSxLQUFLLENBQ1Q7TUFBQSxFQUFFLEtBQUssQ0FDUDtNQUFBLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQ3pCO1FBQUEsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUN6QixDQUFDLE1BQU0sQ0FDTCxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FDVixTQUFTLENBQUMsQ0FBQyxlQUFlLElBQUksS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FDakUsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBRWxDO1lBQUEsQ0FBQyxJQUFJLENBQ1A7VUFBQSxFQUFFLE1BQU0sQ0FBQyxDQUNWLENBQUMsQ0FDRjtRQUFBLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FDcEU7O1FBQ0YsRUFBRSxNQUFNLENBQ1I7UUFBQSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsRUFBRSxJQUFJLENBQ3REO01BQUEsRUFBRSxHQUFHLENBQ1A7SUFBQSxFQUFFLEdBQUcsQ0FBQyxDQUNQLENBQUM7QUFDSixDQUFDO0FBRUQsa0JBQWUsU0FBUyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTG9nRW50cnkgfSBmcm9tICcuLi90eXBlcy9sb2dzLnR5cGVzJzsgLy8gQWRqdXN0IHRoZSBpbXBvcnQgcGF0aFxuXG5pbnRlcmZhY2UgTG9nc1RhYmxlUHJvcHMge1xuICBsb2dzOiBMb2dFbnRyeVtdO1xuICBwYWdlTnVtYmVyczogbnVtYmVyW107XG4gIGN1cnJlbnRQYWdlOiBudW1iZXI7XG4gIG5leHRUb2tlbjogc3RyaW5nIHwgbnVsbDtcbiAgb25OZXh0OiAoKSA9PiB2b2lkO1xuICBvblBhZ2VTZWxlY3Q6IChwYWdlOiBudW1iZXIpID0+IHZvaWQ7XG4gIG9uRGV0YWlsc0NsaWNrOiAobG9nOiBMb2dFbnRyeSkgPT4gdm9pZDsgLy8gQWRkZWQgZm9yIGNsaWNrYWJsZSBkZXRhaWxzXG59XG5cbmZ1bmN0aW9uIExvZ3NUYWJsZSh7XG4gIGxvZ3MsXG4gIHBhZ2VOdW1iZXJzLFxuICBjdXJyZW50UGFnZSxcbiAgbmV4dFRva2VuLFxuICBvbk5leHQsXG4gIG9uUGFnZVNlbGVjdCxcbiAgb25EZXRhaWxzQ2xpY2ssXG59OiBMb2dzVGFibGVQcm9wcykge1xuICAvLyBGb3JtYXQgdGltZXN0YW1wIHRvIGh1bWFuLXJlYWRhYmxlIGxvY2FsIGRhdGUgYW5kIHRpbWVcbiAgY29uc3QgZm9ybWF0RGF0ZVRpbWUgPSAodGltZXN0YW1wOiBzdHJpbmcpID0+IHtcbiAgICByZXR1cm4gbmV3IERhdGUodGltZXN0YW1wKS50b0xvY2FsZVN0cmluZygpO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDx0YWJsZSBjbGFzc05hbWU9XCJsb2dzLXRhYmxlXCI+XG4gICAgICAgIDx0aGVhZD5cbiAgICAgICAgICA8dHI+XG4gICAgICAgICAgICA8dGg+VGltZTwvdGg+XG4gICAgICAgICAgICA8dGg+VGhyZWFkIElEPC90aD5cbiAgICAgICAgICAgIDx0aD5TdGF0dXM8L3RoPlxuICAgICAgICAgICAgPHRoPk1vZGVsPC90aD5cbiAgICAgICAgICAgIDx0aD5Qcm92aWRlcjwvdGg+XG4gICAgICAgICAgICA8dGg+VG9rZW5zPC90aD5cbiAgICAgICAgICAgIDx0aD5Db3N0PC90aD5cbiAgICAgICAgICAgIDx0aD5EZXRhaWxzPC90aD5cbiAgICAgICAgICA8L3RyPlxuICAgICAgICA8L3RoZWFkPlxuICAgICAgICA8dGJvZHk+XG4gICAgICAgICAge2xvZ3MubWFwKChsb2cpID0+IChcbiAgICAgICAgICAgIDx0ciBrZXk9e2xvZy5pZH0+XG4gICAgICAgICAgICAgIDx0ZD57Zm9ybWF0RGF0ZVRpbWUobG9nLnRpbWVzdGFtcCl9PC90ZD5cbiAgICAgICAgICAgICAgPHRkPntsb2cudGhyZWFkX3RzfTwvdGQ+XG4gICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9e2xvZy5zdGF0dXMgPT09ICdmYWlsdXJlJyA/ICdzdGF0dXMtZXJyb3InIDogJyd9PlxuICAgICAgICAgICAgICAgIHtsb2cuc3RhdHVzfVxuICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICA8dGQ+e2xvZy5tb2RlbH08L3RkPlxuICAgICAgICAgICAgICA8dGQ+e2xvZy5wcm92aWRlcn08L3RkPlxuICAgICAgICAgICAgICA8dGQ+e2xvZy5yYXdfcmVzcG9uc2U/LnVzYWdlLnRvdGFsX3Rva2VucyB8fCAnTkEnfTwvdGQ+XG4gICAgICAgICAgICAgIDx0ZD57bG9nLmNvc3R9PC90ZD5cbiAgICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImRldGFpbHMtYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uRGV0YWlsc0NsaWNrKGxvZyl9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgRGV0YWlsc1xuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICApKX1cbiAgICAgICAgPC90Ym9keT5cbiAgICAgIDwvdGFibGU+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInBhZ2luYXRpb25cIj5cbiAgICAgICAge3BhZ2VOdW1iZXJzLm1hcCgocGFnZSkgPT4gKFxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIGtleT17cGFnZX1cbiAgICAgICAgICAgIGNsYXNzTmFtZT17YHBhZ2UtYnV0dG9uICR7cGFnZSA9PT0gY3VycmVudFBhZ2UgPyAnYWN0aXZlJyA6ICcnfWB9XG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBvblBhZ2VTZWxlY3QocGFnZSl9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3BhZ2V9XG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICkpfVxuICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cIm5leHQtYnV0dG9uXCIgb25DbGljaz17b25OZXh0fSBkaXNhYmxlZD17IW5leHRUb2tlbn0+XG4gICAgICAgICAgTmV4dCDihpJcbiAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInBhZ2UtaW5mb1wiPlBhZ2Uge2N1cnJlbnRQYWdlfTwvc3Bhbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBMb2dzVGFibGU7XG4iXX0=