"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const validateRequest_1 = require("./util/validateRequest");
const extractRequestData_1 = require("./util/extractRequestData");
const getAndSaveMessages_1 = require("./util/getAndSaveMessages");
const routeRequest_1 = require("./util/routeRequest");
const modelValidation_1 = require("./util/modelValidation");
const logger_1 = require("./util/logger");
const simpleCache_1 = require("./util/simpleCache");
const semanticCache_1 = require("./util/semanticCache");
const handler = async (event) => {
    const logData = {
        requestStartTime: Date.now(),
        provider: null,
        model: null,
        tokens_used: 0,
        cost: 0,
        RawRequest: JSON.stringify(event),
    };
    try {
        const parsed = (0, validateRequest_1.validateRequest)(event);
        if (!parsed.success) {
            await (0, logger_1.logFailedRequest)({
                ...logData,
                errorMessage: 'Invalid Request Body',
            });
            return {
                statusCode: 400,
                body: JSON.stringify({
                    error: "Invalid request body.",
                    details: parsed.error.flatten(),
                }),
            };
        }
        const payload = parsed.data;
        const { threadID, prompt, provider, model, userId } = (0, extractRequestData_1.extractRequestData)(payload);
        const metadata = (0, extractRequestData_1.extractRequestMetadata)(event, payload);
        logData.model = model;
        logData.provider = provider;
        if (!prompt) {
            await (0, logger_1.logFailedRequest)({
                ...logData,
                errorMessage: 'No prompt provided in the request body',
            });
            return {
                statusCode: 400,
                body: JSON.stringify({ message: "No prompt provided in the request body." }),
            };
        }
        if (provider && model && !(0, modelValidation_1.validateModel)({ provider, model })) {
            await (0, logger_1.logFailedRequest)({
                ...logData,
                errorMessage: 'Provider and model combination invalid.',
            });
            return {
                statusCode: 400,
                body: JSON.stringify({ message: 'Provider and model combination invalid. ' })
            };
        }
        const simpleCacheResponse = await (0, simpleCache_1.checkSimpleCache)(prompt, userId, provider, model);
        if (simpleCacheResponse) {
            return {
                statusCode: 200,
                body: JSON.stringify({
                    provider,
                    simpleCacheResponse,
                }),
            };
        }
        const requestEmbedding = await (0, semanticCache_1.getEmbedding)(prompt);
        const semanticCacheResponse = await (0, semanticCache_1.checkSemanticCache)(requestEmbedding, userId, provider, model);
        if (semanticCacheResponse) {
            return {
                statusCode: 200,
                body: JSON.stringify({
                    provider,
                    semanticCacheResponse,
                }),
            };
        }
        const history = await (0, getAndSaveMessages_1.getMessageHistory)(threadID);
        const response = await (0, routeRequest_1.routeRequest)({ history, prompt, provider, model, metadata });
        await (0, getAndSaveMessages_1.saveMessages)(prompt, response.text, threadID);
        await (0, logger_1.logSuccessfulRequest)({
            ...logData,
            RawResponse: JSON.stringify(response),
        });
        // don't await - no need to wait here
        (0, simpleCache_1.addToSimpleCache)(prompt, response.text, userId, provider, model);
        (0, semanticCache_1.addToSemanticCache)(requestEmbedding, prompt, response.text, userId, provider, model);
        return {
            statusCode: 200,
            body: JSON.stringify({
                threadID,
                response
            }),
        };
    }
    catch (error) {
        console.error(error);
        const errorMessage = error instanceof Error ? error.message : 'Unknown Error';
        await (0, logger_1.logFailedRequest)({ ...logData, errorMessage });
        return {
            statusCode: 500,
            body: JSON.stringify({
                error: errorMessage,
            }),
        };
    }
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,