"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestBodySchema = exports.FullRequestSchema = void 0;
const zod_1 = require("zod");
const modelValidation_1 = require("../modelValidation");
const constants_1 = require("../constants");
exports.FullRequestSchema = zod_1.z.object({
    headers: zod_1.z.record(zod_1.z.string()),
    body: zod_1.z.union([zod_1.z.string(), zod_1.z.record(zod_1.z.unknown())]),
});
exports.RequestBodySchema = zod_1.z
    .object({
    prompt: zod_1.z.string().min(1),
    threadID: zod_1.z.string().optional(),
    provider: zod_1.z.enum(constants_1.providerNames).optional(),
    model: zod_1.z.enum(constants_1.modelNames).optional(),
    userType: zod_1.z.string().optional(),
    region: zod_1.z.string().optional(),
    userId: zod_1.z.string().min(1).optional(),
})
    .superRefine((data, ctx) => {
    const { provider, model } = data;
    if (model && !provider) {
        ctx.addIssue({
            code: zod_1.z.ZodIssueCode.custom,
            message: 'Provider is required when model is specified',
            path: ['model'],
        });
        return;
    }
    if (model && provider && !(0, modelValidation_1.isValidModelForProvider)(provider, model)) {
        ctx.addIssue({
            code: zod_1.z.ZodIssueCode.custom,
            message: `Invalid model for provider ${provider}`,
            path: ['model'],
        });
        return;
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVxdWVzdFNjaGVtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xhbWJkYS91dGlsL3NjaGVtYXMvcmVxdWVzdFNjaGVtYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2QkFBd0I7QUFDeEIsd0RBQTZEO0FBQzdELDRDQUF5RDtBQUU1QyxRQUFBLGlCQUFpQixHQUFHLE9BQUMsQ0FBQyxNQUFNLENBQUM7SUFDdEMsT0FBTyxFQUFFLE9BQUMsQ0FBQyxNQUFNLENBQUMsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQzdCLElBQUksRUFBRSxPQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLE9BQUMsQ0FBQyxNQUFNLENBQUMsT0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztDQUNyRCxDQUFDLENBQUM7QUFFVSxRQUFBLGlCQUFpQixHQUFHLE9BQUM7S0FDL0IsTUFBTSxDQUFDO0lBQ04sTUFBTSxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3pCLFFBQVEsRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQy9CLFFBQVEsRUFBRSxPQUFDLENBQUMsSUFBSSxDQUFDLHlCQUFhLENBQUMsQ0FBQyxRQUFRLEVBQUU7SUFDMUMsS0FBSyxFQUFFLE9BQUMsQ0FBQyxJQUFJLENBQUMsc0JBQVUsQ0FBQyxDQUFDLFFBQVEsRUFBRTtJQUNwQyxRQUFRLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRTtJQUMvQixNQUFNLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRTtJQUM3QixNQUFNLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUU7Q0FDckMsQ0FBQztLQUNELFdBQVcsQ0FBQyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRTtJQUN6QixNQUFNLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxHQUFHLElBQUksQ0FBQztJQUNqQyxJQUFJLEtBQUssSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3JCLEdBQUcsQ0FBQyxRQUFRLENBQUM7WUFDVCxJQUFJLEVBQUUsT0FBQyxDQUFDLFlBQVksQ0FBQyxNQUFNO1lBQzNCLE9BQU8sRUFBRSw4Q0FBOEM7WUFDdkQsSUFBSSxFQUFFLENBQUMsT0FBTyxDQUFDO1NBQ2xCLENBQUMsQ0FBQztRQUNILE9BQU87SUFDWCxDQUFDO0lBRUQsSUFBSSxLQUFLLElBQUksUUFBUSxJQUFJLENBQUMsSUFBQSx5Q0FBdUIsRUFBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQztRQUNqRSxHQUFHLENBQUMsUUFBUSxDQUFDO1lBQ1QsSUFBSSxFQUFFLE9BQUMsQ0FBQyxZQUFZLENBQUMsTUFBTTtZQUMzQixPQUFPLEVBQUUsOEJBQThCLFFBQVEsRUFBRTtZQUNqRCxJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUM7U0FDbEIsQ0FBQyxDQUFDO1FBQ0gsT0FBTztJQUVYLENBQUM7QUFDSCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHogfSBmcm9tICd6b2QnO1xuaW1wb3J0IHsgaXNWYWxpZE1vZGVsRm9yUHJvdmlkZXIgfSBmcm9tICcuLi9tb2RlbFZhbGlkYXRpb24nO1xuaW1wb3J0IHsgcHJvdmlkZXJOYW1lcywgbW9kZWxOYW1lcyB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5cbmV4cG9ydCBjb25zdCBGdWxsUmVxdWVzdFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICBoZWFkZXJzOiB6LnJlY29yZCh6LnN0cmluZygpKSxcbiAgICBib2R5OiB6LnVuaW9uKFt6LnN0cmluZygpLCB6LnJlY29yZCh6LnVua25vd24oKSldKSxcbn0pO1xuXG5leHBvcnQgY29uc3QgUmVxdWVzdEJvZHlTY2hlbWEgPSB6XG4gIC5vYmplY3Qoe1xuICAgIHByb21wdDogei5zdHJpbmcoKS5taW4oMSksXG4gICAgdGhyZWFkSUQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICBwcm92aWRlcjogei5lbnVtKHByb3ZpZGVyTmFtZXMpLm9wdGlvbmFsKCksXG4gICAgbW9kZWw6IHouZW51bShtb2RlbE5hbWVzKS5vcHRpb25hbCgpLCBcbiAgICB1c2VyVHlwZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgIHJlZ2lvbjogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgIHVzZXJJZDogei5zdHJpbmcoKS5taW4oMSkub3B0aW9uYWwoKSxcbiAgfSlcbiAgLnN1cGVyUmVmaW5lKChkYXRhLCBjdHgpID0+IHtcbiAgICBjb25zdCB7IHByb3ZpZGVyLCBtb2RlbCB9ID0gZGF0YTtcbiAgICBpZiAobW9kZWwgJiYgIXByb3ZpZGVyKSB7XG4gICAgICAgIGN0eC5hZGRJc3N1ZSh7XG4gICAgICAgICAgICBjb2RlOiB6LlpvZElzc3VlQ29kZS5jdXN0b20sXG4gICAgICAgICAgICBtZXNzYWdlOiAnUHJvdmlkZXIgaXMgcmVxdWlyZWQgd2hlbiBtb2RlbCBpcyBzcGVjaWZpZWQnLFxuICAgICAgICAgICAgcGF0aDogWydtb2RlbCddLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChtb2RlbCAmJiBwcm92aWRlciAmJiAhaXNWYWxpZE1vZGVsRm9yUHJvdmlkZXIocHJvdmlkZXIsIG1vZGVsKSkge1xuICAgICAgICBjdHguYWRkSXNzdWUoe1xuICAgICAgICAgICAgY29kZTogei5ab2RJc3N1ZUNvZGUuY3VzdG9tLFxuICAgICAgICAgICAgbWVzc2FnZTogYEludmFsaWQgbW9kZWwgZm9yIHByb3ZpZGVyICR7cHJvdmlkZXJ9YCxcbiAgICAgICAgICAgIHBhdGg6IFsnbW9kZWwnXSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIFxuICAgIH1cbiAgfSk7XG5cbmV4cG9ydCB0eXBlIFJlcXVlc3RQYXlsb2FkID0gei5pbmZlcjx0eXBlb2YgUmVxdWVzdEJvZHlTY2hlbWE+OyJdfQ==