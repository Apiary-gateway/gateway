"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.routeRequest = routeRequest;
const callLLM_1 = __importDefault(require("./callLLM"));
const errorHandling_1 = require("./errorHandling");
const constants_1 = require("./constants");
const constants_2 = require("./constants");
const routingLog_1 = require("./routingLog");
const retryWithBackoff_1 = require("./retryWithBackoff");
const getConfig_1 = require("./getConfig");
async function routeRequest({ history, prompt, provider, model, metadata, userId }) {
    const log = new routingLog_1.RoutingLog();
    const config = (0, getConfig_1.getConfig)();
    const conditions = config.routing.conditions || [];
    if (provider) {
        model = model || constants_2.MODELS[provider][0];
        return await routeToSpecified({ history, prompt, provider, model, log });
    }
    if (conditions.length > 0 && metadata) {
        for (const cond of conditions) {
            if (cond.query(metadata)) { // fulfills condition, call load balance
                try {
                    log.conditionMatched(cond.name);
                    log.routedToLoadBalance();
                    const { provider, model } = weightedPick(cond.loadBalance);
                    log.modelSelected(provider, model);
                    return await (0, retryWithBackoff_1.retryWithBackoff)(() => (0, callLLM_1.default)({ history, prompt, provider, model, log, userId }));
                }
                catch (error) {
                    return await handleRoutingError(error, history, prompt, log, cond);
                }
            }
        }
    }
    return await routeToDefault({ history, prompt, log });
}
async function handleRoutingError(error, history, prompt, log, condition) {
    const config = (0, getConfig_1.getConfig)();
    const statusCode = (0, errorHandling_1.getErrorStatusCode)(error);
    log.routingError(error.message, statusCode);
    const fallbackStatuses = config.routing.fallbackOnStatus || constants_1.FALLBACK_STATUS_CODES;
    if (statusCode && config.routing.enableFallbacks && fallbackStatuses.includes(statusCode)) {
        return await routeToFallback({ history, prompt, condition, log });
    }
    else {
        console.error('Error routing request:', error);
        throw error;
    }
}
async function routeToDefault({ history, prompt, condition, log, userId }) {
    try {
        const config = (0, getConfig_1.getConfig)();
        const { provider, model } = config.routing.defaultModel;
        log.routedToDefault(provider, model);
        return await (0, retryWithBackoff_1.retryWithBackoff)(() => (0, callLLM_1.default)({ history, prompt, provider, model, log, userId }));
    }
    catch (error) {
        return handleRoutingError(error, history, prompt, log, condition);
    }
}
async function routeToFallback({ history, prompt, condition, log, userId }) {
    const config = (0, getConfig_1.getConfig)();
    const { provider, model } = condition?.fallbackModel || config.routing.fallbackModel;
    log.routedToFallback(provider, model);
    return await (0, retryWithBackoff_1.retryWithBackoff)(() => (0, callLLM_1.default)({ history, prompt, provider, model, log, userId }));
}
async function routeToSpecified({ history, prompt, provider, model, log, userId }) {
    try {
        log.routedToSpecified(provider, model);
        return await (0, retryWithBackoff_1.retryWithBackoff)(() => (0, callLLM_1.default)({ history, prompt, provider, model, log, userId }));
    }
    catch (error) {
        return handleRoutingError(error, history, prompt, log);
    }
}
function weightedPick(choices) {
    if (!choices.length) {
        throw new Error('No choices provided for weighted selection');
    }
    const totalWeight = choices.reduce((acc, choice) => acc + choice.weight, 0);
    const randomWeight = Math.random() * totalWeight;
    let currentWeight = 0;
    for (const choice of choices) {
        currentWeight += choice.weight;
        if (randomWeight < currentWeight) {
            return choice;
        }
    }
    return choices[choices.length - 1];
}
//# sourceMappingURL=data:application/json;base64,