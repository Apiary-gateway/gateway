"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoutingLog = void 0;
class RoutingLog {
    constructor() {
        this.log = {
            timestamp: Date.now().toString(),
            events: [],
        };
    }
    getLog() {
        return this.log;
    }
    conditionMatched(condition) {
        this.add({ type: 'condition_match', condition });
    }
    routedToLoadBalance() {
        this.add({ type: 'routed_to_load_balance' });
    }
    modelSelected(provider, model) {
        this.add({ type: 'model_selected', provider, model });
    }
    routedToFallback(newProvider, newModel) {
        this.add({ type: 'routed_to_fallback', newProvider, newModel });
    }
    routedToDefault(provider, model) {
        this.add({ type: 'routed_to_default', provider, model });
    }
    routedToSpecified(provider, model) {
        this.add({ type: 'routed_to_specified', provider, model });
    }
    routingError(error, statusCode) {
        this.add({ type: 'routing_error', error, statusCode });
    }
    cacheHit(cacheType) {
        this.add({ type: 'cache_hit', cacheType });
    }
    guardrailHit(level, match) {
        this.add({ type: 'guardrail_hit', level, match });
    }
    guardrailRetry() {
        this.add({ type: 'guardrail_retry' });
    }
    add(event) {
        this.log.events.push(event);
    }
}
exports.RoutingLog = RoutingLog;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGluZ0xvZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xhbWJkYS91dGlsL3JvdXRpbmdMb2cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsTUFBYSxVQUFVO0lBR25CO1FBQ0ksSUFBSSxDQUFDLEdBQUcsR0FBRztZQUNQLFNBQVMsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxFQUFFO1lBQ2hDLE1BQU0sRUFBRSxFQUFFO1NBQ2IsQ0FBQztJQUNOLENBQUM7SUFFRCxNQUFNO1FBQ0YsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDO0lBQ3BCLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxTQUFpQjtRQUM5QixJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVELG1CQUFtQjtRQUNmLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEVBQUUsd0JBQXdCLEVBQUUsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRCxhQUFhLENBQUMsUUFBdUIsRUFBRSxLQUFzQztRQUN6RSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxXQUEwQixFQUFFLFFBQXlDO1FBQ2xGLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEVBQUUsb0JBQW9CLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDcEUsQ0FBQztJQUVELGVBQWUsQ0FBQyxRQUF1QixFQUFFLEtBQXNDO1FBQzNFLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEVBQUUsbUJBQW1CLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUVELGlCQUFpQixDQUFDLFFBQXVCLEVBQUUsS0FBc0M7UUFDN0UsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksRUFBRSxxQkFBcUIsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBRUQsWUFBWSxDQUFDLEtBQWEsRUFBRSxVQUFtQjtRQUMzQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxFQUFFLGVBQWUsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBRUQsUUFBUSxDQUFDLFNBQWdDO1FBQ3JDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVELFlBQVksQ0FBQyxLQUFvQixFQUFFLEtBQWE7UUFDNUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksRUFBRSxlQUFlLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVELGNBQWM7UUFDVixJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxFQUFFLGlCQUFpQixFQUFFLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBR08sR0FBRyxDQUFDLEtBQW1CO1FBQzNCLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNoQyxDQUFDO0NBQ0o7QUExREQsZ0NBMERDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUm91dGluZ0V2ZW50LCBSb3V0aW5nTG9nIGFzIFJvdXRpbmdMb2dUeXBlLCBTdXBwb3J0ZWRMTE1zLCBNb2RlbEZvclByb3ZpZGVyIH0gZnJvbSBcIi4vdHlwZXNcIjtcblxuZXhwb3J0IGNsYXNzIFJvdXRpbmdMb2cge1xuICAgIHByaXZhdGUgbG9nOiBSb3V0aW5nTG9nVHlwZTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmxvZyA9IHtcbiAgICAgICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKS50b1N0cmluZygpLFxuICAgICAgICAgICAgZXZlbnRzOiBbXSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBnZXRMb2coKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvZztcbiAgICB9XG5cbiAgICBjb25kaXRpb25NYXRjaGVkKGNvbmRpdGlvbjogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuYWRkKHsgdHlwZTogJ2NvbmRpdGlvbl9tYXRjaCcsIGNvbmRpdGlvbiB9KTtcbiAgICB9XG5cbiAgICByb3V0ZWRUb0xvYWRCYWxhbmNlKCkge1xuICAgICAgICB0aGlzLmFkZCh7IHR5cGU6ICdyb3V0ZWRfdG9fbG9hZF9iYWxhbmNlJyB9KTtcbiAgICB9XG5cbiAgICBtb2RlbFNlbGVjdGVkKHByb3ZpZGVyOiBTdXBwb3J0ZWRMTE1zLCBtb2RlbDogTW9kZWxGb3JQcm92aWRlcjxTdXBwb3J0ZWRMTE1zPikge1xuICAgICAgICB0aGlzLmFkZCh7IHR5cGU6ICdtb2RlbF9zZWxlY3RlZCcsIHByb3ZpZGVyLCBtb2RlbCB9KTtcbiAgICB9XG5cbiAgICByb3V0ZWRUb0ZhbGxiYWNrKG5ld1Byb3ZpZGVyOiBTdXBwb3J0ZWRMTE1zLCBuZXdNb2RlbDogTW9kZWxGb3JQcm92aWRlcjxTdXBwb3J0ZWRMTE1zPikge1xuICAgICAgICB0aGlzLmFkZCh7IHR5cGU6ICdyb3V0ZWRfdG9fZmFsbGJhY2snLCBuZXdQcm92aWRlciwgbmV3TW9kZWwgfSk7XG4gICAgfVxuXG4gICAgcm91dGVkVG9EZWZhdWx0KHByb3ZpZGVyOiBTdXBwb3J0ZWRMTE1zLCBtb2RlbDogTW9kZWxGb3JQcm92aWRlcjxTdXBwb3J0ZWRMTE1zPikge1xuICAgICAgICB0aGlzLmFkZCh7IHR5cGU6ICdyb3V0ZWRfdG9fZGVmYXVsdCcsIHByb3ZpZGVyLCBtb2RlbCB9KTtcbiAgICB9XG5cbiAgICByb3V0ZWRUb1NwZWNpZmllZChwcm92aWRlcjogU3VwcG9ydGVkTExNcywgbW9kZWw6IE1vZGVsRm9yUHJvdmlkZXI8U3VwcG9ydGVkTExNcz4pIHtcbiAgICAgICAgdGhpcy5hZGQoeyB0eXBlOiAncm91dGVkX3RvX3NwZWNpZmllZCcsIHByb3ZpZGVyLCBtb2RlbCB9KTtcbiAgICB9XG5cbiAgICByb3V0aW5nRXJyb3IoZXJyb3I6IHN0cmluZywgc3RhdHVzQ29kZT86IG51bWJlcikge1xuICAgICAgICB0aGlzLmFkZCh7IHR5cGU6ICdyb3V0aW5nX2Vycm9yJywgZXJyb3IsIHN0YXR1c0NvZGUgfSk7XG4gICAgfVxuXG4gICAgY2FjaGVIaXQoY2FjaGVUeXBlOiAnc2ltcGxlJyB8ICdzZW1hbnRpYycpIHtcbiAgICAgICAgdGhpcy5hZGQoeyB0eXBlOiAnY2FjaGVfaGl0JywgY2FjaGVUeXBlIH0pO1xuICAgIH1cblxuICAgIGd1YXJkcmFpbEhpdChsZXZlbDogJ29uZScgfCAndHdvJywgbWF0Y2g6IHN0cmluZykge1xuICAgICAgICB0aGlzLmFkZCh7IHR5cGU6ICdndWFyZHJhaWxfaGl0JywgbGV2ZWwsIG1hdGNoIH0pO1xuICAgIH1cblxuICAgIGd1YXJkcmFpbFJldHJ5KCkge1xuICAgICAgICB0aGlzLmFkZCh7IHR5cGU6ICdndWFyZHJhaWxfcmV0cnknIH0pO1xuICAgIH1cblxuXG4gICAgcHJpdmF0ZSBhZGQoZXZlbnQ6IFJvdXRpbmdFdmVudCkge1xuICAgICAgICB0aGlzLmxvZy5ldmVudHMucHVzaChldmVudCk7XG4gICAgfVxufSJdfQ==