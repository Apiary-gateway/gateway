"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkSimpleCache = checkSimpleCache;
exports.addToSimpleCache = addToSimpleCache;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
// TODOS
// include cache hit or miss header in response from `router`
// format cached response better - ex. tokens used = 0
// add to README - optional `userId` field in request body for cache partitioning
// add configuration to `router` function to conditionally check just simple cache or both simple & semantic
const dynamoClient = new client_dynamodb_1.DynamoDBClient();
const CACHE_TABLE_NAME = process.env.CACHE_TABLE_NAME || '';
const CACHE_TTL_SECONDS = 60 * 5; // 5 minutes
function getUserId(userId) {
    return userId ? userId : 'global';
}
function getCacheKey(prompt, provider, model) {
    return `${provider || ''}${model || ''}${prompt}`;
}
async function checkSimpleCache(prompt, userId, provider, model) {
    userId = getUserId(userId);
    const cacheKey = getCacheKey(prompt, provider, model);
    const input = {
        TableName: CACHE_TABLE_NAME,
        Key: {
            userId: {
                S: userId
            },
            cacheKey: {
                S: cacheKey
            }
        },
        // only send back `llmResponse` field?
        // ProjectionExpression: 'llmResponse',
    };
    const command = new client_dynamodb_1.GetItemCommand(input);
    const result = await dynamoClient.send(command);
    // console.log('fetched from Dynamo: ', result.Item ? result.Item.llmResponse : 'no cache hit');
    return result.Item ? result.Item.llmResponse : null;
}
// Function to store result in cache
async function addToSimpleCache(prompt, llmResponse, userId, provider, model) {
    userId = getUserId(userId);
    const cacheKey = getCacheKey(prompt, provider, model);
    const ttl = Math.floor(Date.now() / 1000) + CACHE_TTL_SECONDS;
    const input = {
        TableName: CACHE_TABLE_NAME,
        Item: {
            userId: {
                S: userId
            },
            cacheKey: {
                S: cacheKey
            },
            provider: {
                S: provider || ''
            },
            model: {
                S: model || ''
            },
            llmResponse: {
                S: JSON.stringify(llmResponse)
            },
            ttl: {
                N: String(ttl)
            }
        },
    };
    const command = new client_dynamodb_1.PutItemCommand(input);
    await dynamoClient.send(command);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlQ2FjaGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9sYW1iZGEvdXRpbC9zaW1wbGVDYWNoZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQTZCQSw0Q0EyQkM7QUFHRCw0Q0FxQ0M7QUFoR0QsOERBSWtDO0FBR2xDLFFBQVE7QUFDUiw2REFBNkQ7QUFDN0Qsc0RBQXNEO0FBQ3RELGlGQUFpRjtBQUNqRiw0R0FBNEc7QUFFNUcsTUFBTSxZQUFZLEdBQUcsSUFBSSxnQ0FBYyxFQUFFLENBQUM7QUFDMUMsTUFBTSxnQkFBZ0IsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixJQUFJLEVBQUUsQ0FBQztBQUM1RCxNQUFNLGlCQUFpQixHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxZQUFZO0FBRTlDLFNBQVMsU0FBUyxDQUFDLE1BQWU7SUFDaEMsT0FBTyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO0FBQ3BDLENBQUM7QUFFRCxTQUFTLFdBQVcsQ0FDbEIsTUFBYyxFQUNkLFFBQWlCLEVBQ2pCLEtBQWM7SUFFZCxPQUFPLEdBQUcsUUFBUSxJQUFJLEVBQUUsR0FBRyxLQUFLLElBQUksRUFBRSxHQUFHLE1BQU0sRUFBRSxDQUFDO0FBQ3BELENBQUM7QUFFTSxLQUFLLFVBQVUsZ0JBQWdCLENBQ3BDLE1BQWMsRUFDZCxNQUFlLEVBQ2YsUUFBaUIsRUFDakIsS0FBYztJQUVkLE1BQU0sR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDM0IsTUFBTSxRQUFRLEdBQUcsV0FBVyxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFdEQsTUFBTSxLQUFLLEdBQUc7UUFDWixTQUFTLEVBQUUsZ0JBQWdCO1FBQzNCLEdBQUcsRUFBRTtZQUNILE1BQU0sRUFBRTtnQkFDTixDQUFDLEVBQUUsTUFBTTthQUNWO1lBQ0QsUUFBUSxFQUFFO2dCQUNSLENBQUMsRUFBRSxRQUFRO2FBQ1o7U0FDRjtRQUNELHNDQUFzQztRQUN0Qyx1Q0FBdUM7S0FDeEMsQ0FBQztJQUVGLE1BQU0sT0FBTyxHQUFHLElBQUksZ0NBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxQyxNQUFNLE1BQU0sR0FBRyxNQUFNLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDaEQsZ0dBQWdHO0lBQ2hHLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztBQUN0RCxDQUFDO0FBRUQsb0NBQW9DO0FBQzdCLEtBQUssVUFBVSxnQkFBZ0IsQ0FDcEMsTUFBYyxFQUNkLFdBQW1CLEVBQ25CLE1BQWUsRUFDZixRQUFpQixFQUNqQixLQUFjO0lBRWQsTUFBTSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMzQixNQUFNLFFBQVEsR0FBRyxXQUFXLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN0RCxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxpQkFBaUIsQ0FBQztJQUU5RCxNQUFNLEtBQUssR0FBRztRQUNaLFNBQVMsRUFBRSxnQkFBZ0I7UUFDM0IsSUFBSSxFQUFFO1lBQ0osTUFBTSxFQUFFO2dCQUNOLENBQUMsRUFBRSxNQUFNO2FBQ1Y7WUFDRCxRQUFRLEVBQUU7Z0JBQ1IsQ0FBQyxFQUFFLFFBQVE7YUFDWjtZQUNELFFBQVEsRUFBRTtnQkFDUixDQUFDLEVBQUUsUUFBUSxJQUFJLEVBQUU7YUFDbEI7WUFDRCxLQUFLLEVBQUU7Z0JBQ0wsQ0FBQyxFQUFFLEtBQUssSUFBSSxFQUFFO2FBQ2Y7WUFDRCxXQUFXLEVBQUU7Z0JBQ1gsQ0FBQyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDO2FBQy9CO1lBQ0QsR0FBRyxFQUFFO2dCQUNILENBQUMsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDO2FBQ2Y7U0FDRjtLQUNGLENBQUM7SUFFRixNQUFNLE9BQU8sR0FBRyxJQUFJLGdDQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUMsTUFBTSxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ25DLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBcbiAgRHluYW1vREJDbGllbnQsIFxuICBHZXRJdGVtQ29tbWFuZCxcbiAgUHV0SXRlbUNvbW1hbmQsXG59IGZyb20gXCJAYXdzLXNkay9jbGllbnQtZHluYW1vZGJcIjtcbmltcG9ydCB0eXBlIHsgQ29tcGxldGlvblJlc3BvbnNlIH0gZnJvbSAndG9rZW4uanMnO1xuXG4vLyBUT0RPU1xuLy8gaW5jbHVkZSBjYWNoZSBoaXQgb3IgbWlzcyBoZWFkZXIgaW4gcmVzcG9uc2UgZnJvbSBgcm91dGVyYFxuLy8gZm9ybWF0IGNhY2hlZCByZXNwb25zZSBiZXR0ZXIgLSBleC4gdG9rZW5zIHVzZWQgPSAwXG4vLyBhZGQgdG8gUkVBRE1FIC0gb3B0aW9uYWwgYHVzZXJJZGAgZmllbGQgaW4gcmVxdWVzdCBib2R5IGZvciBjYWNoZSBwYXJ0aXRpb25pbmdcbi8vIGFkZCBjb25maWd1cmF0aW9uIHRvIGByb3V0ZXJgIGZ1bmN0aW9uIHRvIGNvbmRpdGlvbmFsbHkgY2hlY2sganVzdCBzaW1wbGUgY2FjaGUgb3IgYm90aCBzaW1wbGUgJiBzZW1hbnRpY1xuXG5jb25zdCBkeW5hbW9DbGllbnQgPSBuZXcgRHluYW1vREJDbGllbnQoKTtcbmNvbnN0IENBQ0hFX1RBQkxFX05BTUUgPSBwcm9jZXNzLmVudi5DQUNIRV9UQUJMRV9OQU1FIHx8ICcnO1xuY29uc3QgQ0FDSEVfVFRMX1NFQ09ORFMgPSA2MCAqIDU7IC8vIDUgbWludXRlc1xuXG5mdW5jdGlvbiBnZXRVc2VySWQodXNlcklkPzogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIHVzZXJJZCA/IHVzZXJJZCA6ICdnbG9iYWwnO1xufVxuXG5mdW5jdGlvbiBnZXRDYWNoZUtleSggIFxuICBwcm9tcHQ6IHN0cmluZyxcbiAgcHJvdmlkZXI/OiBzdHJpbmcsIFxuICBtb2RlbD86IHN0cmluZ1xuKTogc3RyaW5nIHtcbiAgcmV0dXJuIGAke3Byb3ZpZGVyIHx8ICcnfSR7bW9kZWwgfHwgJyd9JHtwcm9tcHR9YDtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNoZWNrU2ltcGxlQ2FjaGUoXG4gIHByb21wdDogc3RyaW5nLFxuICB1c2VySWQ/OiBzdHJpbmcsIFxuICBwcm92aWRlcj86IHN0cmluZywgXG4gIG1vZGVsPzogc3RyaW5nLCBcbikge1xuICB1c2VySWQgPSBnZXRVc2VySWQodXNlcklkKTtcbiAgY29uc3QgY2FjaGVLZXkgPSBnZXRDYWNoZUtleShwcm9tcHQsIHByb3ZpZGVyLCBtb2RlbCk7XG5cbiAgY29uc3QgaW5wdXQgPSB7XG4gICAgVGFibGVOYW1lOiBDQUNIRV9UQUJMRV9OQU1FLFxuICAgIEtleTogeyBcbiAgICAgIHVzZXJJZDoge1xuICAgICAgICBTOiB1c2VySWRcbiAgICAgIH0sIFxuICAgICAgY2FjaGVLZXk6IHtcbiAgICAgICAgUzogY2FjaGVLZXlcbiAgICAgIH0gXG4gICAgfSxcbiAgICAvLyBvbmx5IHNlbmQgYmFjayBgbGxtUmVzcG9uc2VgIGZpZWxkP1xuICAgIC8vIFByb2plY3Rpb25FeHByZXNzaW9uOiAnbGxtUmVzcG9uc2UnLFxuICB9O1xuICBcbiAgY29uc3QgY29tbWFuZCA9IG5ldyBHZXRJdGVtQ29tbWFuZChpbnB1dCk7XG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGR5bmFtb0NsaWVudC5zZW5kKGNvbW1hbmQpO1xuICAvLyBjb25zb2xlLmxvZygnZmV0Y2hlZCBmcm9tIER5bmFtbzogJywgcmVzdWx0Lkl0ZW0gPyByZXN1bHQuSXRlbS5sbG1SZXNwb25zZSA6ICdubyBjYWNoZSBoaXQnKTtcbiAgcmV0dXJuIHJlc3VsdC5JdGVtID8gcmVzdWx0Lkl0ZW0ubGxtUmVzcG9uc2UgOiBudWxsO1xufVxuXG4vLyBGdW5jdGlvbiB0byBzdG9yZSByZXN1bHQgaW4gY2FjaGVcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhZGRUb1NpbXBsZUNhY2hlKFxuICBwcm9tcHQ6IHN0cmluZywgXG4gIGxsbVJlc3BvbnNlOiBzdHJpbmcsXG4gIHVzZXJJZD86IHN0cmluZywgXG4gIHByb3ZpZGVyPzogc3RyaW5nLCBcbiAgbW9kZWw/OiBzdHJpbmcsIFxuKSB7XG4gIHVzZXJJZCA9IGdldFVzZXJJZCh1c2VySWQpO1xuICBjb25zdCBjYWNoZUtleSA9IGdldENhY2hlS2V5KHByb21wdCwgcHJvdmlkZXIsIG1vZGVsKTtcbiAgY29uc3QgdHRsID0gTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCkgKyBDQUNIRV9UVExfU0VDT05EUztcblxuICBjb25zdCBpbnB1dCA9IHtcbiAgICBUYWJsZU5hbWU6IENBQ0hFX1RBQkxFX05BTUUsXG4gICAgSXRlbTogeyBcbiAgICAgIHVzZXJJZDoge1xuICAgICAgICBTOiB1c2VySWRcbiAgICAgIH0sIFxuICAgICAgY2FjaGVLZXk6IHtcbiAgICAgICAgUzogY2FjaGVLZXlcbiAgICAgIH0sXG4gICAgICBwcm92aWRlcjoge1xuICAgICAgICBTOiBwcm92aWRlciB8fCAnJ1xuICAgICAgfSxcbiAgICAgIG1vZGVsOiB7XG4gICAgICAgIFM6IG1vZGVsIHx8ICcnXG4gICAgICB9LCBcbiAgICAgIGxsbVJlc3BvbnNlOiB7XG4gICAgICAgIFM6IEpTT04uc3RyaW5naWZ5KGxsbVJlc3BvbnNlKVxuICAgICAgfSwgXG4gICAgICB0dGw6IHtcbiAgICAgICAgTjogU3RyaW5nKHR0bClcbiAgICAgIH1cbiAgICB9LFxuICB9O1xuICBcbiAgY29uc3QgY29tbWFuZCA9IG5ldyBQdXRJdGVtQ29tbWFuZChpbnB1dCk7XG4gIGF3YWl0IGR5bmFtb0NsaWVudC5zZW5kKGNvbW1hbmQpO1xufVxuIl19