"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = callLLM;
const constants_1 = require("./constants");
const token_js_1 = require("token.js");
const constants_2 = require("./constants");
const client_secrets_manager_1 = require("@aws-sdk/client-secrets-manager");
const SECRET_NAME = 'llm-provider-api-keys';
let cachedApiKeys = null;
async function loadApiKeys() {
    if (cachedApiKeys)
        return cachedApiKeys;
    const secretsManager = new client_secrets_manager_1.SecretsManagerClient();
    const command = new client_secrets_manager_1.GetSecretValueCommand({ SecretId: SECRET_NAME });
    const response = await secretsManager.send(command);
    if (response && response.SecretString) {
        cachedApiKeys = JSON.parse(response.SecretString);
    }
    return;
}
async function callLLM(history, prompt, provider, model) {
    try {
        await loadApiKeys();
        if (cachedApiKeys) {
            for (const [key, value] of Object.entries(cachedApiKeys)) {
                process.env[key] = value;
            }
        }
        const tokenjs = new token_js_1.TokenJS();
        if (!constants_2.MODELS[provider].includes(model || constants_2.MODELS[provider][0])) {
            throw new Error(`Invalid model "${model}" for provider "${provider}"`);
        }
        const response = await tokenjs.chat.completions.create({
            provider: provider,
            model: model || constants_2.MODELS[provider][0],
            messages: [
                { role: 'system', content: process.env.SYSTEM_PROMPT || constants_1.SYSTEM_PROMPT },
                ...history,
                {
                    role: 'user',
                    content: prompt,
                }
            ],
            temperature: 0.7,
            max_tokens: 500
        });
        return {
            text: response.choices?.[0]?.message?.content || '',
            usage: response.usage,
        };
    }
    catch (error) {
        console.error(`Error in ${provider} call:`, error);
        throw error;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsbExMTS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNhbGxMTE0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUEwQkEsMEJBd0NDO0FBakVELDJDQUE0QztBQUM1Qyx1Q0FBbUM7QUFDbkMsMkNBQXFDO0FBR3JDLDRFQUE4RjtBQUU5RixNQUFNLFdBQVcsR0FBRyx1QkFBdUIsQ0FBQztBQUU1QyxJQUFJLGFBQWEsR0FBa0MsSUFBSSxDQUFDO0FBRXhELEtBQUssVUFBVSxXQUFXO0lBQ3RCLElBQUksYUFBYTtRQUFFLE9BQU8sYUFBYSxDQUFDO0lBRXhDLE1BQU0sY0FBYyxHQUFHLElBQUksNkNBQW9CLEVBQUUsQ0FBQztJQUNsRCxNQUFNLE9BQU8sR0FBRyxJQUFJLDhDQUFxQixDQUFDLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUM7SUFDckUsTUFBTSxRQUFRLEdBQUcsTUFBTSxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRXBELElBQUksUUFBUSxJQUFJLFFBQVEsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNwQyxhQUFhLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVELE9BQU87QUFDWCxDQUFDO0FBRWMsS0FBSyxVQUFVLE9BQU8sQ0FBMEIsT0FBMEIsRUFBRSxNQUFjLEVBQUUsUUFBVyxFQUFFLEtBQW1CO0lBRXZJLElBQUksQ0FBQztRQUNELE1BQU0sV0FBVyxFQUFFLENBQUM7UUFFcEIsSUFBSSxhQUFhLEVBQUUsQ0FBQztZQUNoQixLQUFLLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDO2dCQUN2RCxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztZQUM3QixDQUFDO1FBQ0wsQ0FBQztRQUVELE1BQU0sT0FBTyxHQUFHLElBQUksa0JBQU8sRUFBRSxDQUFDO1FBRTlCLElBQUksQ0FBQyxrQkFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLElBQUksa0JBQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDM0QsTUFBTSxJQUFJLEtBQUssQ0FBQyxrQkFBa0IsS0FBSyxtQkFBbUIsUUFBUSxHQUFHLENBQUMsQ0FBQztRQUMzRSxDQUFDO1FBRUQsTUFBTSxRQUFRLEdBQUcsTUFBTSxPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUM7WUFDbkQsUUFBUSxFQUFFLFFBQWU7WUFDekIsS0FBSyxFQUFFLEtBQUssSUFBSSxrQkFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNuQyxRQUFRLEVBQUU7Z0JBQ04sRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsSUFBSSx5QkFBYSxFQUFFO2dCQUN2RSxHQUFHLE9BQU87Z0JBQ1Y7b0JBQ0ksSUFBSSxFQUFFLE1BQU07b0JBQ1osT0FBTyxFQUFFLE1BQU07aUJBQ2xCO2FBQ0o7WUFDRCxXQUFXLEVBQUUsR0FBRztZQUNoQixVQUFVLEVBQUUsR0FBRztTQUNsQixDQUFDLENBQUM7UUFFSCxPQUFPO1lBQ0gsSUFBSSxFQUFFLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsT0FBTyxJQUFJLEVBQUU7WUFDbkQsS0FBSyxFQUFFLFFBQVEsQ0FBQyxLQUFLO1NBQ3hCLENBQUE7SUFDTCxDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNiLE9BQU8sQ0FBQyxLQUFLLENBQUMsWUFBWSxRQUFRLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNuRCxNQUFNLEtBQUssQ0FBQztJQUNoQixDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEludGVybmFsTWVzc2FnZSB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgU1lTVEVNX1BST01QVCB9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCB7IFRva2VuSlMgfSBmcm9tICd0b2tlbi5qcyc7XG5pbXBvcnQgeyBNT0RFTFMgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBTdXBwb3J0ZWRMTE1zLCBNb2RlbE1hcCB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHR5cGUgeyBDb21wbGV0aW9uUmVzcG9uc2UgfSBmcm9tICd0b2tlbi5qcyc7XG5pbXBvcnQgeyBTZWNyZXRzTWFuYWdlckNsaWVudCwgR2V0U2VjcmV0VmFsdWVDb21tYW5kIH0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1zZWNyZXRzLW1hbmFnZXJcIjtcblxuY29uc3QgU0VDUkVUX05BTUUgPSAnbGxtLXByb3ZpZGVyLWFwaS1rZXlzJztcblxubGV0IGNhY2hlZEFwaUtleXM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gfCBudWxsID0gbnVsbDtcblxuYXN5bmMgZnVuY3Rpb24gbG9hZEFwaUtleXMoKSB7XG4gICAgaWYgKGNhY2hlZEFwaUtleXMpIHJldHVybiBjYWNoZWRBcGlLZXlzOyBcbiAgXG4gICAgY29uc3Qgc2VjcmV0c01hbmFnZXIgPSBuZXcgU2VjcmV0c01hbmFnZXJDbGllbnQoKTtcbiAgICBjb25zdCBjb21tYW5kID0gbmV3IEdldFNlY3JldFZhbHVlQ29tbWFuZCh7IFNlY3JldElkOiBTRUNSRVRfTkFNRSB9KTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHNlY3JldHNNYW5hZ2VyLnNlbmQoY29tbWFuZCk7XG5cbiAgICBpZiAocmVzcG9uc2UgJiYgcmVzcG9uc2UuU2VjcmV0U3RyaW5nKSB7XG4gICAgICAgIGNhY2hlZEFwaUtleXMgPSBKU09OLnBhcnNlKHJlc3BvbnNlLlNlY3JldFN0cmluZyk7XG4gICAgfVxuICBcbiAgICByZXR1cm47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGNhbGxMTE08SyBleHRlbmRzIFN1cHBvcnRlZExMTXM+KGhpc3Rvcnk6IEludGVybmFsTWVzc2FnZVtdLCBwcm9tcHQ6IHN0cmluZywgcHJvdmlkZXI6IEssIG1vZGVsPzogTW9kZWxNYXBbS10pOlxuICAgIFByb21pc2U8eyB0ZXh0OiBzdHJpbmcsIHVzYWdlOiBDb21wbGV0aW9uUmVzcG9uc2VbJ3VzYWdlJ10gfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGxvYWRBcGlLZXlzKCk7XG4gICAgICAgIFxuICAgICAgICBpZiAoY2FjaGVkQXBpS2V5cykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoY2FjaGVkQXBpS2V5cykpIHtcbiAgICAgICAgICAgICAgICBwcm9jZXNzLmVudltrZXldID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0b2tlbmpzID0gbmV3IFRva2VuSlMoKTtcblxuICAgICAgICBpZiAoIU1PREVMU1twcm92aWRlcl0uaW5jbHVkZXMobW9kZWwgfHwgTU9ERUxTW3Byb3ZpZGVyXVswXSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBtb2RlbCBcIiR7bW9kZWx9XCIgZm9yIHByb3ZpZGVyIFwiJHtwcm92aWRlcn1cImApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0b2tlbmpzLmNoYXQuY29tcGxldGlvbnMuY3JlYXRlKHtcbiAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlciBhcyBhbnksXG4gICAgICAgICAgICBtb2RlbDogbW9kZWwgfHwgTU9ERUxTW3Byb3ZpZGVyXVswXSxcbiAgICAgICAgICAgIG1lc3NhZ2VzOiBbXG4gICAgICAgICAgICAgICAgeyByb2xlOiAnc3lzdGVtJywgY29udGVudDogcHJvY2Vzcy5lbnYuU1lTVEVNX1BST01QVCB8fCBTWVNURU1fUFJPTVBUIH0sXG4gICAgICAgICAgICAgICAgLi4uaGlzdG9yeSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHJvbGU6ICd1c2VyJyxcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogcHJvbXB0LFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB0ZW1wZXJhdHVyZTogMC43LFxuICAgICAgICAgICAgbWF4X3Rva2VuczogNTAwXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0ZXh0OiByZXNwb25zZS5jaG9pY2VzPy5bMF0/Lm1lc3NhZ2U/LmNvbnRlbnQgfHwgJycsXG4gICAgICAgICAgICB1c2FnZTogcmVzcG9uc2UudXNhZ2UsXG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBpbiAke3Byb3ZpZGVyfSBjYWxsOmAsIGVycm9yKTtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxufSJdfQ==